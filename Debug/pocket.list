
pocket.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093f0  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013eb8  08009588  08009588  0000a588  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d440  0801d440  0001f1c4  2**0
                  CONTENTS
  4 .ARM          00000008  0801d440  0801d440  0001e440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d448  0801d448  0001f1c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d448  0801d448  0001e448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801d44c  0801d44c  0001e44c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001c4  20000000  0801d450  0001f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000587c  200001c4  0801d614  0001f1c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005a40  0801d614  0001fa40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001f1c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012b48  00000000  00000000  0001f1f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000333a  00000000  00000000  00031d3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001118  00000000  00000000  00035078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c7a  00000000  00000000  00036190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000189d6  00000000  00000000  00036e0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016a3f  00000000  00000000  0004f7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b8ac  00000000  00000000  0006621f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  00101acb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a88  00000000  00000000  00101b7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  00106604  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000330c  00000000  00000000  00106647  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000140  00000000  00000000  00109953  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200001c4 	.word	0x200001c4
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08009570 	.word	0x08009570

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200001c8 	.word	0x200001c8
 80001d4:	08009570 	.word	0x08009570

080001d8 <arm_bitreversal_32>:
 80001d8:	1c4b      	adds	r3, r1, #1
 80001da:	2b01      	cmp	r3, #1
 80001dc:	bf98      	it	ls
 80001de:	4770      	bxls	lr
 80001e0:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001e4:	1c91      	adds	r1, r2, #2
 80001e6:	089b      	lsrs	r3, r3, #2

080001e8 <arm_bitreversal_32_0>:
 80001e8:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001ec:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001f0:	880a      	ldrh	r2, [r1, #0]
 80001f2:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001f6:	4480      	add	r8, r0
 80001f8:	4481      	add	r9, r0
 80001fa:	4402      	add	r2, r0
 80001fc:	4484      	add	ip, r0
 80001fe:	f8d9 7000 	ldr.w	r7, [r9]
 8000202:	f8d8 6000 	ldr.w	r6, [r8]
 8000206:	6815      	ldr	r5, [r2, #0]
 8000208:	f8dc 4000 	ldr.w	r4, [ip]
 800020c:	f8c9 6000 	str.w	r6, [r9]
 8000210:	f8c8 7000 	str.w	r7, [r8]
 8000214:	f8cc 5000 	str.w	r5, [ip]
 8000218:	6014      	str	r4, [r2, #0]
 800021a:	f8d9 7004 	ldr.w	r7, [r9, #4]
 800021e:	f8d8 6004 	ldr.w	r6, [r8, #4]
 8000222:	6855      	ldr	r5, [r2, #4]
 8000224:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000228:	f8c9 6004 	str.w	r6, [r9, #4]
 800022c:	f8c8 7004 	str.w	r7, [r8, #4]
 8000230:	f8cc 5004 	str.w	r5, [ip, #4]
 8000234:	6054      	str	r4, [r2, #4]
 8000236:	3108      	adds	r1, #8
 8000238:	3b01      	subs	r3, #1
 800023a:	d1d5      	bne.n	80001e8 <arm_bitreversal_32_0>
 800023c:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000240:	4770      	bx	lr

08000242 <arm_bitreversal_16>:
 8000242:	1c4b      	adds	r3, r1, #1
 8000244:	2b01      	cmp	r3, #1
 8000246:	bf98      	it	ls
 8000248:	4770      	bxls	lr
 800024a:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800024e:	1c91      	adds	r1, r2, #2
 8000250:	089b      	lsrs	r3, r3, #2

08000252 <arm_bitreversal_16_0>:
 8000252:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000256:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 800025a:	880a      	ldrh	r2, [r1, #0]
 800025c:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000260:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 8000264:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000268:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 800026c:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000270:	f8d9 7000 	ldr.w	r7, [r9]
 8000274:	f8d8 6000 	ldr.w	r6, [r8]
 8000278:	6815      	ldr	r5, [r2, #0]
 800027a:	f8dc 4000 	ldr.w	r4, [ip]
 800027e:	f8c9 6000 	str.w	r6, [r9]
 8000282:	f8c8 7000 	str.w	r7, [r8]
 8000286:	f8cc 5000 	str.w	r5, [ip]
 800028a:	6014      	str	r4, [r2, #0]
 800028c:	3108      	adds	r1, #8
 800028e:	3b01      	subs	r3, #1
 8000290:	d1df      	bne.n	8000252 <arm_bitreversal_16_0>
 8000292:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000296:	4770      	bx	lr

08000298 <__aeabi_drsub>:
 8000298:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800029c:	e002      	b.n	80002a4 <__adddf3>
 800029e:	bf00      	nop

080002a0 <__aeabi_dsub>:
 80002a0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002a4 <__adddf3>:
 80002a4:	b530      	push	{r4, r5, lr}
 80002a6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002aa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ae:	ea94 0f05 	teq	r4, r5
 80002b2:	bf08      	it	eq
 80002b4:	ea90 0f02 	teqeq	r0, r2
 80002b8:	bf1f      	itttt	ne
 80002ba:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002be:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002c2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002c6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ca:	f000 80e2 	beq.w	8000492 <__adddf3+0x1ee>
 80002ce:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002d2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002d6:	bfb8      	it	lt
 80002d8:	426d      	neglt	r5, r5
 80002da:	dd0c      	ble.n	80002f6 <__adddf3+0x52>
 80002dc:	442c      	add	r4, r5
 80002de:	ea80 0202 	eor.w	r2, r0, r2
 80002e2:	ea81 0303 	eor.w	r3, r1, r3
 80002e6:	ea82 0000 	eor.w	r0, r2, r0
 80002ea:	ea83 0101 	eor.w	r1, r3, r1
 80002ee:	ea80 0202 	eor.w	r2, r0, r2
 80002f2:	ea81 0303 	eor.w	r3, r1, r3
 80002f6:	2d36      	cmp	r5, #54	@ 0x36
 80002f8:	bf88      	it	hi
 80002fa:	bd30      	pophi	{r4, r5, pc}
 80002fc:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000300:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000304:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000308:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800030c:	d002      	beq.n	8000314 <__adddf3+0x70>
 800030e:	4240      	negs	r0, r0
 8000310:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000314:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000318:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800031c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000320:	d002      	beq.n	8000328 <__adddf3+0x84>
 8000322:	4252      	negs	r2, r2
 8000324:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000328:	ea94 0f05 	teq	r4, r5
 800032c:	f000 80a7 	beq.w	800047e <__adddf3+0x1da>
 8000330:	f1a4 0401 	sub.w	r4, r4, #1
 8000334:	f1d5 0e20 	rsbs	lr, r5, #32
 8000338:	db0d      	blt.n	8000356 <__adddf3+0xb2>
 800033a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800033e:	fa22 f205 	lsr.w	r2, r2, r5
 8000342:	1880      	adds	r0, r0, r2
 8000344:	f141 0100 	adc.w	r1, r1, #0
 8000348:	fa03 f20e 	lsl.w	r2, r3, lr
 800034c:	1880      	adds	r0, r0, r2
 800034e:	fa43 f305 	asr.w	r3, r3, r5
 8000352:	4159      	adcs	r1, r3
 8000354:	e00e      	b.n	8000374 <__adddf3+0xd0>
 8000356:	f1a5 0520 	sub.w	r5, r5, #32
 800035a:	f10e 0e20 	add.w	lr, lr, #32
 800035e:	2a01      	cmp	r2, #1
 8000360:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000364:	bf28      	it	cs
 8000366:	f04c 0c02 	orrcs.w	ip, ip, #2
 800036a:	fa43 f305 	asr.w	r3, r3, r5
 800036e:	18c0      	adds	r0, r0, r3
 8000370:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000374:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000378:	d507      	bpl.n	800038a <__adddf3+0xe6>
 800037a:	f04f 0e00 	mov.w	lr, #0
 800037e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000382:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000386:	eb6e 0101 	sbc.w	r1, lr, r1
 800038a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800038e:	d31b      	bcc.n	80003c8 <__adddf3+0x124>
 8000390:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000394:	d30c      	bcc.n	80003b0 <__adddf3+0x10c>
 8000396:	0849      	lsrs	r1, r1, #1
 8000398:	ea5f 0030 	movs.w	r0, r0, rrx
 800039c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a0:	f104 0401 	add.w	r4, r4, #1
 80003a4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003ac:	f080 809a 	bcs.w	80004e4 <__adddf3+0x240>
 80003b0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003b4:	bf08      	it	eq
 80003b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ba:	f150 0000 	adcs.w	r0, r0, #0
 80003be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003c2:	ea41 0105 	orr.w	r1, r1, r5
 80003c6:	bd30      	pop	{r4, r5, pc}
 80003c8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003cc:	4140      	adcs	r0, r0
 80003ce:	eb41 0101 	adc.w	r1, r1, r1
 80003d2:	3c01      	subs	r4, #1
 80003d4:	bf28      	it	cs
 80003d6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003da:	d2e9      	bcs.n	80003b0 <__adddf3+0x10c>
 80003dc:	f091 0f00 	teq	r1, #0
 80003e0:	bf04      	itt	eq
 80003e2:	4601      	moveq	r1, r0
 80003e4:	2000      	moveq	r0, #0
 80003e6:	fab1 f381 	clz	r3, r1
 80003ea:	bf08      	it	eq
 80003ec:	3320      	addeq	r3, #32
 80003ee:	f1a3 030b 	sub.w	r3, r3, #11
 80003f2:	f1b3 0220 	subs.w	r2, r3, #32
 80003f6:	da0c      	bge.n	8000412 <__adddf3+0x16e>
 80003f8:	320c      	adds	r2, #12
 80003fa:	dd08      	ble.n	800040e <__adddf3+0x16a>
 80003fc:	f102 0c14 	add.w	ip, r2, #20
 8000400:	f1c2 020c 	rsb	r2, r2, #12
 8000404:	fa01 f00c 	lsl.w	r0, r1, ip
 8000408:	fa21 f102 	lsr.w	r1, r1, r2
 800040c:	e00c      	b.n	8000428 <__adddf3+0x184>
 800040e:	f102 0214 	add.w	r2, r2, #20
 8000412:	bfd8      	it	le
 8000414:	f1c2 0c20 	rsble	ip, r2, #32
 8000418:	fa01 f102 	lsl.w	r1, r1, r2
 800041c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000420:	bfdc      	itt	le
 8000422:	ea41 010c 	orrle.w	r1, r1, ip
 8000426:	4090      	lslle	r0, r2
 8000428:	1ae4      	subs	r4, r4, r3
 800042a:	bfa2      	ittt	ge
 800042c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000430:	4329      	orrge	r1, r5
 8000432:	bd30      	popge	{r4, r5, pc}
 8000434:	ea6f 0404 	mvn.w	r4, r4
 8000438:	3c1f      	subs	r4, #31
 800043a:	da1c      	bge.n	8000476 <__adddf3+0x1d2>
 800043c:	340c      	adds	r4, #12
 800043e:	dc0e      	bgt.n	800045e <__adddf3+0x1ba>
 8000440:	f104 0414 	add.w	r4, r4, #20
 8000444:	f1c4 0220 	rsb	r2, r4, #32
 8000448:	fa20 f004 	lsr.w	r0, r0, r4
 800044c:	fa01 f302 	lsl.w	r3, r1, r2
 8000450:	ea40 0003 	orr.w	r0, r0, r3
 8000454:	fa21 f304 	lsr.w	r3, r1, r4
 8000458:	ea45 0103 	orr.w	r1, r5, r3
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	f1c4 040c 	rsb	r4, r4, #12
 8000462:	f1c4 0220 	rsb	r2, r4, #32
 8000466:	fa20 f002 	lsr.w	r0, r0, r2
 800046a:	fa01 f304 	lsl.w	r3, r1, r4
 800046e:	ea40 0003 	orr.w	r0, r0, r3
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	fa21 f004 	lsr.w	r0, r1, r4
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f094 0f00 	teq	r4, #0
 8000482:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000486:	bf06      	itte	eq
 8000488:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800048c:	3401      	addeq	r4, #1
 800048e:	3d01      	subne	r5, #1
 8000490:	e74e      	b.n	8000330 <__adddf3+0x8c>
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf18      	it	ne
 8000498:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049c:	d029      	beq.n	80004f2 <__adddf3+0x24e>
 800049e:	ea94 0f05 	teq	r4, r5
 80004a2:	bf08      	it	eq
 80004a4:	ea90 0f02 	teqeq	r0, r2
 80004a8:	d005      	beq.n	80004b6 <__adddf3+0x212>
 80004aa:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ae:	bf04      	itt	eq
 80004b0:	4619      	moveq	r1, r3
 80004b2:	4610      	moveq	r0, r2
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	ea91 0f03 	teq	r1, r3
 80004ba:	bf1e      	ittt	ne
 80004bc:	2100      	movne	r1, #0
 80004be:	2000      	movne	r0, #0
 80004c0:	bd30      	popne	{r4, r5, pc}
 80004c2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004c6:	d105      	bne.n	80004d4 <__adddf3+0x230>
 80004c8:	0040      	lsls	r0, r0, #1
 80004ca:	4149      	adcs	r1, r1
 80004cc:	bf28      	it	cs
 80004ce:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d8:	bf3c      	itt	cc
 80004da:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004de:	bd30      	popcc	{r4, r5, pc}
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004e4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004ec:	f04f 0000 	mov.w	r0, #0
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004f6:	bf1a      	itte	ne
 80004f8:	4619      	movne	r1, r3
 80004fa:	4610      	movne	r0, r2
 80004fc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000500:	bf1c      	itt	ne
 8000502:	460b      	movne	r3, r1
 8000504:	4602      	movne	r2, r0
 8000506:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800050a:	bf06      	itte	eq
 800050c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000510:	ea91 0f03 	teqeq	r1, r3
 8000514:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	bf00      	nop

0800051c <__aeabi_ui2d>:
 800051c:	f090 0f00 	teq	r0, #0
 8000520:	bf04      	itt	eq
 8000522:	2100      	moveq	r1, #0
 8000524:	4770      	bxeq	lr
 8000526:	b530      	push	{r4, r5, lr}
 8000528:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800052c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000530:	f04f 0500 	mov.w	r5, #0
 8000534:	f04f 0100 	mov.w	r1, #0
 8000538:	e750      	b.n	80003dc <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_i2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000550:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000554:	bf48      	it	mi
 8000556:	4240      	negmi	r0, r0
 8000558:	f04f 0100 	mov.w	r1, #0
 800055c:	e73e      	b.n	80003dc <__adddf3+0x138>
 800055e:	bf00      	nop

08000560 <__aeabi_f2d>:
 8000560:	0042      	lsls	r2, r0, #1
 8000562:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000566:	ea4f 0131 	mov.w	r1, r1, rrx
 800056a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800056e:	bf1f      	itttt	ne
 8000570:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000574:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000578:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800057c:	4770      	bxne	lr
 800057e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000582:	bf08      	it	eq
 8000584:	4770      	bxeq	lr
 8000586:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800058a:	bf04      	itt	eq
 800058c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000590:	4770      	bxeq	lr
 8000592:	b530      	push	{r4, r5, lr}
 8000594:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000598:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800059c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a0:	e71c      	b.n	80003dc <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_ul2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	e00a      	b.n	80005ca <__aeabi_l2d+0x16>

080005b4 <__aeabi_l2d>:
 80005b4:	ea50 0201 	orrs.w	r2, r0, r1
 80005b8:	bf08      	it	eq
 80005ba:	4770      	bxeq	lr
 80005bc:	b530      	push	{r4, r5, lr}
 80005be:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005c2:	d502      	bpl.n	80005ca <__aeabi_l2d+0x16>
 80005c4:	4240      	negs	r0, r0
 80005c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ca:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005ce:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005d2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d6:	f43f aed8 	beq.w	800038a <__adddf3+0xe6>
 80005da:	f04f 0203 	mov.w	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005f2:	f1c2 0320 	rsb	r3, r2, #32
 80005f6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 fe03 	lsl.w	lr, r1, r3
 8000602:	ea40 000e 	orr.w	r0, r0, lr
 8000606:	fa21 f102 	lsr.w	r1, r1, r2
 800060a:	4414      	add	r4, r2
 800060c:	e6bd      	b.n	800038a <__adddf3+0xe6>
 800060e:	bf00      	nop

08000610 <__aeabi_dmul>:
 8000610:	b570      	push	{r4, r5, r6, lr}
 8000612:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000616:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800061a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061e:	bf1d      	ittte	ne
 8000620:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000624:	ea94 0f0c 	teqne	r4, ip
 8000628:	ea95 0f0c 	teqne	r5, ip
 800062c:	f000 f8de 	bleq	80007ec <__aeabi_dmul+0x1dc>
 8000630:	442c      	add	r4, r5
 8000632:	ea81 0603 	eor.w	r6, r1, r3
 8000636:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800063a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000642:	bf18      	it	ne
 8000644:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000648:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800064c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000650:	d038      	beq.n	80006c4 <__aeabi_dmul+0xb4>
 8000652:	fba0 ce02 	umull	ip, lr, r0, r2
 8000656:	f04f 0500 	mov.w	r5, #0
 800065a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000662:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000666:	f04f 0600 	mov.w	r6, #0
 800066a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066e:	f09c 0f00 	teq	ip, #0
 8000672:	bf18      	it	ne
 8000674:	f04e 0e01 	orrne.w	lr, lr, #1
 8000678:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800067c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000680:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000684:	d204      	bcs.n	8000690 <__aeabi_dmul+0x80>
 8000686:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800068a:	416d      	adcs	r5, r5
 800068c:	eb46 0606 	adc.w	r6, r6, r6
 8000690:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000694:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000698:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800069c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a8:	bf88      	it	hi
 80006aa:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006ae:	d81e      	bhi.n	80006ee <__aeabi_dmul+0xde>
 80006b0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006b4:	bf08      	it	eq
 80006b6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ba:	f150 0000 	adcs.w	r0, r0, #0
 80006be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c8:	ea46 0101 	orr.w	r1, r6, r1
 80006cc:	ea40 0002 	orr.w	r0, r0, r2
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d8:	bfc2      	ittt	gt
 80006da:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	popgt	{r4, r5, r6, pc}
 80006e4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e8:	f04f 0e00 	mov.w	lr, #0
 80006ec:	3c01      	subs	r4, #1
 80006ee:	f300 80ab 	bgt.w	8000848 <__aeabi_dmul+0x238>
 80006f2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006f6:	bfde      	ittt	le
 80006f8:	2000      	movle	r0, #0
 80006fa:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006fe:	bd70      	pople	{r4, r5, r6, pc}
 8000700:	f1c4 0400 	rsb	r4, r4, #0
 8000704:	3c20      	subs	r4, #32
 8000706:	da35      	bge.n	8000774 <__aeabi_dmul+0x164>
 8000708:	340c      	adds	r4, #12
 800070a:	dc1b      	bgt.n	8000744 <__aeabi_dmul+0x134>
 800070c:	f104 0414 	add.w	r4, r4, #20
 8000710:	f1c4 0520 	rsb	r5, r4, #32
 8000714:	fa00 f305 	lsl.w	r3, r0, r5
 8000718:	fa20 f004 	lsr.w	r0, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea40 0002 	orr.w	r0, r0, r2
 8000724:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000728:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000730:	fa21 f604 	lsr.w	r6, r1, r4
 8000734:	eb42 0106 	adc.w	r1, r2, r6
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f1c4 040c 	rsb	r4, r4, #12
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f304 	lsl.w	r3, r0, r4
 8000750:	fa20 f005 	lsr.w	r0, r0, r5
 8000754:	fa01 f204 	lsl.w	r2, r1, r4
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000760:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000764:	f141 0100 	adc.w	r1, r1, #0
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 0520 	rsb	r5, r4, #32
 8000778:	fa00 f205 	lsl.w	r2, r0, r5
 800077c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000780:	fa20 f304 	lsr.w	r3, r0, r4
 8000784:	fa01 f205 	lsl.w	r2, r1, r5
 8000788:	ea43 0302 	orr.w	r3, r3, r2
 800078c:	fa21 f004 	lsr.w	r0, r1, r4
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000794:	fa21 f204 	lsr.w	r2, r1, r4
 8000798:	ea20 0002 	bic.w	r0, r0, r2
 800079c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f094 0f00 	teq	r4, #0
 80007b0:	d10f      	bne.n	80007d2 <__aeabi_dmul+0x1c2>
 80007b2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007b6:	0040      	lsls	r0, r0, #1
 80007b8:	eb41 0101 	adc.w	r1, r1, r1
 80007bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3c01      	subeq	r4, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1a6>
 80007c6:	ea41 0106 	orr.w	r1, r1, r6
 80007ca:	f095 0f00 	teq	r5, #0
 80007ce:	bf18      	it	ne
 80007d0:	4770      	bxne	lr
 80007d2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007d6:	0052      	lsls	r2, r2, #1
 80007d8:	eb43 0303 	adc.w	r3, r3, r3
 80007dc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3d01      	subeq	r5, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1c6>
 80007e6:	ea43 0306 	orr.w	r3, r3, r6
 80007ea:	4770      	bx	lr
 80007ec:	ea94 0f0c 	teq	r4, ip
 80007f0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f4:	bf18      	it	ne
 80007f6:	ea95 0f0c 	teqne	r5, ip
 80007fa:	d00c      	beq.n	8000816 <__aeabi_dmul+0x206>
 80007fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000800:	bf18      	it	ne
 8000802:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000806:	d1d1      	bne.n	80007ac <__aeabi_dmul+0x19c>
 8000808:	ea81 0103 	eor.w	r1, r1, r3
 800080c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000810:	f04f 0000 	mov.w	r0, #0
 8000814:	bd70      	pop	{r4, r5, r6, pc}
 8000816:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081a:	bf06      	itte	eq
 800081c:	4610      	moveq	r0, r2
 800081e:	4619      	moveq	r1, r3
 8000820:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000824:	d019      	beq.n	800085a <__aeabi_dmul+0x24a>
 8000826:	ea94 0f0c 	teq	r4, ip
 800082a:	d102      	bne.n	8000832 <__aeabi_dmul+0x222>
 800082c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000830:	d113      	bne.n	800085a <__aeabi_dmul+0x24a>
 8000832:	ea95 0f0c 	teq	r5, ip
 8000836:	d105      	bne.n	8000844 <__aeabi_dmul+0x234>
 8000838:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800083c:	bf1c      	itt	ne
 800083e:	4610      	movne	r0, r2
 8000840:	4619      	movne	r1, r3
 8000842:	d10a      	bne.n	800085a <__aeabi_dmul+0x24a>
 8000844:	ea81 0103 	eor.w	r1, r1, r3
 8000848:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800084c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000850:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000854:	f04f 0000 	mov.w	r0, #0
 8000858:	bd70      	pop	{r4, r5, r6, pc}
 800085a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800085e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000862:	bd70      	pop	{r4, r5, r6, pc}

08000864 <__aeabi_ddiv>:
 8000864:	b570      	push	{r4, r5, r6, lr}
 8000866:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800086a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800086e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000872:	bf1d      	ittte	ne
 8000874:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000878:	ea94 0f0c 	teqne	r4, ip
 800087c:	ea95 0f0c 	teqne	r5, ip
 8000880:	f000 f8a7 	bleq	80009d2 <__aeabi_ddiv+0x16e>
 8000884:	eba4 0405 	sub.w	r4, r4, r5
 8000888:	ea81 0e03 	eor.w	lr, r1, r3
 800088c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000890:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000894:	f000 8088 	beq.w	80009a8 <__aeabi_ddiv+0x144>
 8000898:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800089c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008ac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008bc:	429d      	cmp	r5, r3
 80008be:	bf08      	it	eq
 80008c0:	4296      	cmpeq	r6, r2
 80008c2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008c6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008ca:	d202      	bcs.n	80008d2 <__aeabi_ddiv+0x6e>
 80008cc:	085b      	lsrs	r3, r3, #1
 80008ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d2:	1ab6      	subs	r6, r6, r2
 80008d4:	eb65 0503 	sbc.w	r5, r5, r3
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008e2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000940:	ea55 0e06 	orrs.w	lr, r5, r6
 8000944:	d018      	beq.n	8000978 <__aeabi_ddiv+0x114>
 8000946:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800094a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000952:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000956:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800095a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000962:	d1c0      	bne.n	80008e6 <__aeabi_ddiv+0x82>
 8000964:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000968:	d10b      	bne.n	8000982 <__aeabi_ddiv+0x11e>
 800096a:	ea41 0100 	orr.w	r1, r1, r0
 800096e:	f04f 0000 	mov.w	r0, #0
 8000972:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000976:	e7b6      	b.n	80008e6 <__aeabi_ddiv+0x82>
 8000978:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800097c:	bf04      	itt	eq
 800097e:	4301      	orreq	r1, r0
 8000980:	2000      	moveq	r0, #0
 8000982:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000986:	bf88      	it	hi
 8000988:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800098c:	f63f aeaf 	bhi.w	80006ee <__aeabi_dmul+0xde>
 8000990:	ebb5 0c03 	subs.w	ip, r5, r3
 8000994:	bf04      	itt	eq
 8000996:	ebb6 0c02 	subseq.w	ip, r6, r2
 800099a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099e:	f150 0000 	adcs.w	r0, r0, #0
 80009a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	pop	{r4, r5, r6, pc}
 80009a8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009ac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b4:	bfc2      	ittt	gt
 80009b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009be:	bd70      	popgt	{r4, r5, r6, pc}
 80009c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009c4:	f04f 0e00 	mov.w	lr, #0
 80009c8:	3c01      	subs	r4, #1
 80009ca:	e690      	b.n	80006ee <__aeabi_dmul+0xde>
 80009cc:	ea45 0e06 	orr.w	lr, r5, r6
 80009d0:	e68d      	b.n	80006ee <__aeabi_dmul+0xde>
 80009d2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d6:	ea94 0f0c 	teq	r4, ip
 80009da:	bf08      	it	eq
 80009dc:	ea95 0f0c 	teqeq	r5, ip
 80009e0:	f43f af3b 	beq.w	800085a <__aeabi_dmul+0x24a>
 80009e4:	ea94 0f0c 	teq	r4, ip
 80009e8:	d10a      	bne.n	8000a00 <__aeabi_ddiv+0x19c>
 80009ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ee:	f47f af34 	bne.w	800085a <__aeabi_dmul+0x24a>
 80009f2:	ea95 0f0c 	teq	r5, ip
 80009f6:	f47f af25 	bne.w	8000844 <__aeabi_dmul+0x234>
 80009fa:	4610      	mov	r0, r2
 80009fc:	4619      	mov	r1, r3
 80009fe:	e72c      	b.n	800085a <__aeabi_dmul+0x24a>
 8000a00:	ea95 0f0c 	teq	r5, ip
 8000a04:	d106      	bne.n	8000a14 <__aeabi_ddiv+0x1b0>
 8000a06:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a0a:	f43f aefd 	beq.w	8000808 <__aeabi_dmul+0x1f8>
 8000a0e:	4610      	mov	r0, r2
 8000a10:	4619      	mov	r1, r3
 8000a12:	e722      	b.n	800085a <__aeabi_dmul+0x24a>
 8000a14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a18:	bf18      	it	ne
 8000a1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1e:	f47f aec5 	bne.w	80007ac <__aeabi_dmul+0x19c>
 8000a22:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a26:	f47f af0d 	bne.w	8000844 <__aeabi_dmul+0x234>
 8000a2a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2e:	f47f aeeb 	bne.w	8000808 <__aeabi_dmul+0x1f8>
 8000a32:	e712      	b.n	800085a <__aeabi_dmul+0x24a>

08000a34 <__gedf2>:
 8000a34:	f04f 3cff 	mov.w	ip, #4294967295
 8000a38:	e006      	b.n	8000a48 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__ledf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	e002      	b.n	8000a48 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__cmpdf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a58:	bf18      	it	ne
 8000a5a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a5e:	d01b      	beq.n	8000a98 <__cmpdf2+0x54>
 8000a60:	b001      	add	sp, #4
 8000a62:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a66:	bf0c      	ite	eq
 8000a68:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a6c:	ea91 0f03 	teqne	r1, r3
 8000a70:	bf02      	ittt	eq
 8000a72:	ea90 0f02 	teqeq	r0, r2
 8000a76:	2000      	moveq	r0, #0
 8000a78:	4770      	bxeq	lr
 8000a7a:	f110 0f00 	cmn.w	r0, #0
 8000a7e:	ea91 0f03 	teq	r1, r3
 8000a82:	bf58      	it	pl
 8000a84:	4299      	cmppl	r1, r3
 8000a86:	bf08      	it	eq
 8000a88:	4290      	cmpeq	r0, r2
 8000a8a:	bf2c      	ite	cs
 8000a8c:	17d8      	asrcs	r0, r3, #31
 8000a8e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a92:	f040 0001 	orr.w	r0, r0, #1
 8000a96:	4770      	bx	lr
 8000a98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d102      	bne.n	8000aa8 <__cmpdf2+0x64>
 8000aa2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa6:	d107      	bne.n	8000ab8 <__cmpdf2+0x74>
 8000aa8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d1d6      	bne.n	8000a60 <__cmpdf2+0x1c>
 8000ab2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab6:	d0d3      	beq.n	8000a60 <__cmpdf2+0x1c>
 8000ab8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdrcmple>:
 8000ac0:	4684      	mov	ip, r0
 8000ac2:	4610      	mov	r0, r2
 8000ac4:	4662      	mov	r2, ip
 8000ac6:	468c      	mov	ip, r1
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4663      	mov	r3, ip
 8000acc:	e000      	b.n	8000ad0 <__aeabi_cdcmpeq>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_cdcmpeq>:
 8000ad0:	b501      	push	{r0, lr}
 8000ad2:	f7ff ffb7 	bl	8000a44 <__cmpdf2>
 8000ad6:	2800      	cmp	r0, #0
 8000ad8:	bf48      	it	mi
 8000ada:	f110 0f00 	cmnmi.w	r0, #0
 8000ade:	bd01      	pop	{r0, pc}

08000ae0 <__aeabi_dcmpeq>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff fff4 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000ae8:	bf0c      	ite	eq
 8000aea:	2001      	moveq	r0, #1
 8000aec:	2000      	movne	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmplt>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffea 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000afc:	bf34      	ite	cc
 8000afe:	2001      	movcc	r0, #1
 8000b00:	2000      	movcs	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmple>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffe0 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000b10:	bf94      	ite	ls
 8000b12:	2001      	movls	r0, #1
 8000b14:	2000      	movhi	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpge>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffce 	bl	8000ac0 <__aeabi_cdrcmple>
 8000b24:	bf94      	ite	ls
 8000b26:	2001      	movls	r0, #1
 8000b28:	2000      	movhi	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmpgt>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffc4 	bl	8000ac0 <__aeabi_cdrcmple>
 8000b38:	bf34      	ite	cc
 8000b3a:	2001      	movcc	r0, #1
 8000b3c:	2000      	movcs	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_d2iz>:
 8000b44:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b48:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b4c:	d215      	bcs.n	8000b7a <__aeabi_d2iz+0x36>
 8000b4e:	d511      	bpl.n	8000b74 <__aeabi_d2iz+0x30>
 8000b50:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b54:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b58:	d912      	bls.n	8000b80 <__aeabi_d2iz+0x3c>
 8000b5a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b62:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b66:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b6e:	bf18      	it	ne
 8000b70:	4240      	negne	r0, r0
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7e:	d105      	bne.n	8000b8c <__aeabi_d2iz+0x48>
 8000b80:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b84:	bf08      	it	eq
 8000b86:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop

08000b94 <__aeabi_d2uiz>:
 8000b94:	004a      	lsls	r2, r1, #1
 8000b96:	d211      	bcs.n	8000bbc <__aeabi_d2uiz+0x28>
 8000b98:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b9c:	d211      	bcs.n	8000bc2 <__aeabi_d2uiz+0x2e>
 8000b9e:	d50d      	bpl.n	8000bbc <__aeabi_d2uiz+0x28>
 8000ba0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba8:	d40e      	bmi.n	8000bc8 <__aeabi_d2uiz+0x34>
 8000baa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bb6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bba:	4770      	bx	lr
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc6:	d102      	bne.n	8000bce <__aeabi_d2uiz+0x3a>
 8000bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bcc:	4770      	bx	lr
 8000bce:	f04f 0000 	mov.w	r0, #0
 8000bd2:	4770      	bx	lr

08000bd4 <__aeabi_d2f>:
 8000bd4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bd8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bdc:	bf24      	itt	cs
 8000bde:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000be2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000be6:	d90d      	bls.n	8000c04 <__aeabi_d2f+0x30>
 8000be8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bf8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bfc:	bf08      	it	eq
 8000bfe:	f020 0001 	biceq.w	r0, r0, #1
 8000c02:	4770      	bx	lr
 8000c04:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c08:	d121      	bne.n	8000c4e <__aeabi_d2f+0x7a>
 8000c0a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c0e:	bfbc      	itt	lt
 8000c10:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c14:	4770      	bxlt	lr
 8000c16:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c1a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c1e:	f1c2 0218 	rsb	r2, r2, #24
 8000c22:	f1c2 0c20 	rsb	ip, r2, #32
 8000c26:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2a:	fa20 f002 	lsr.w	r0, r0, r2
 8000c2e:	bf18      	it	ne
 8000c30:	f040 0001 	orrne.w	r0, r0, #1
 8000c34:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c38:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c3c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c40:	ea40 000c 	orr.w	r0, r0, ip
 8000c44:	fa23 f302 	lsr.w	r3, r3, r2
 8000c48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c4c:	e7cc      	b.n	8000be8 <__aeabi_d2f+0x14>
 8000c4e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c52:	d107      	bne.n	8000c64 <__aeabi_d2f+0x90>
 8000c54:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c58:	bf1e      	ittt	ne
 8000c5a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c5e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c62:	4770      	bxne	lr
 8000c64:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c6c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop

08000c74 <__aeabi_uldivmod>:
 8000c74:	b953      	cbnz	r3, 8000c8c <__aeabi_uldivmod+0x18>
 8000c76:	b94a      	cbnz	r2, 8000c8c <__aeabi_uldivmod+0x18>
 8000c78:	2900      	cmp	r1, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	2800      	cmpeq	r0, #0
 8000c7e:	bf1c      	itt	ne
 8000c80:	f04f 31ff 	movne.w	r1, #4294967295
 8000c84:	f04f 30ff 	movne.w	r0, #4294967295
 8000c88:	f000 b96a 	b.w	8000f60 <__aeabi_idiv0>
 8000c8c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c94:	f000 f806 	bl	8000ca4 <__udivmoddi4>
 8000c98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca0:	b004      	add	sp, #16
 8000ca2:	4770      	bx	lr

08000ca4 <__udivmoddi4>:
 8000ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ca8:	9d08      	ldr	r5, [sp, #32]
 8000caa:	460c      	mov	r4, r1
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d14e      	bne.n	8000d4e <__udivmoddi4+0xaa>
 8000cb0:	4694      	mov	ip, r2
 8000cb2:	458c      	cmp	ip, r1
 8000cb4:	4686      	mov	lr, r0
 8000cb6:	fab2 f282 	clz	r2, r2
 8000cba:	d962      	bls.n	8000d82 <__udivmoddi4+0xde>
 8000cbc:	b14a      	cbz	r2, 8000cd2 <__udivmoddi4+0x2e>
 8000cbe:	f1c2 0320 	rsb	r3, r2, #32
 8000cc2:	4091      	lsls	r1, r2
 8000cc4:	fa20 f303 	lsr.w	r3, r0, r3
 8000cc8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ccc:	4319      	orrs	r1, r3
 8000cce:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f f68c 	uxth.w	r6, ip
 8000cda:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb07 1114 	mls	r1, r7, r4, r1
 8000ce6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cea:	fb04 f106 	mul.w	r1, r4, r6
 8000cee:	4299      	cmp	r1, r3
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x64>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cfa:	f080 8112 	bcs.w	8000f22 <__udivmoddi4+0x27e>
 8000cfe:	4299      	cmp	r1, r3
 8000d00:	f240 810f 	bls.w	8000f22 <__udivmoddi4+0x27e>
 8000d04:	3c02      	subs	r4, #2
 8000d06:	4463      	add	r3, ip
 8000d08:	1a59      	subs	r1, r3, r1
 8000d0a:	fa1f f38e 	uxth.w	r3, lr
 8000d0e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d12:	fb07 1110 	mls	r1, r7, r0, r1
 8000d16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1a:	fb00 f606 	mul.w	r6, r0, r6
 8000d1e:	429e      	cmp	r6, r3
 8000d20:	d90a      	bls.n	8000d38 <__udivmoddi4+0x94>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d2a:	f080 80fc 	bcs.w	8000f26 <__udivmoddi4+0x282>
 8000d2e:	429e      	cmp	r6, r3
 8000d30:	f240 80f9 	bls.w	8000f26 <__udivmoddi4+0x282>
 8000d34:	4463      	add	r3, ip
 8000d36:	3802      	subs	r0, #2
 8000d38:	1b9b      	subs	r3, r3, r6
 8000d3a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d3e:	2100      	movs	r1, #0
 8000d40:	b11d      	cbz	r5, 8000d4a <__udivmoddi4+0xa6>
 8000d42:	40d3      	lsrs	r3, r2
 8000d44:	2200      	movs	r2, #0
 8000d46:	e9c5 3200 	strd	r3, r2, [r5]
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d905      	bls.n	8000d5e <__udivmoddi4+0xba>
 8000d52:	b10d      	cbz	r5, 8000d58 <__udivmoddi4+0xb4>
 8000d54:	e9c5 0100 	strd	r0, r1, [r5]
 8000d58:	2100      	movs	r1, #0
 8000d5a:	4608      	mov	r0, r1
 8000d5c:	e7f5      	b.n	8000d4a <__udivmoddi4+0xa6>
 8000d5e:	fab3 f183 	clz	r1, r3
 8000d62:	2900      	cmp	r1, #0
 8000d64:	d146      	bne.n	8000df4 <__udivmoddi4+0x150>
 8000d66:	42a3      	cmp	r3, r4
 8000d68:	d302      	bcc.n	8000d70 <__udivmoddi4+0xcc>
 8000d6a:	4290      	cmp	r0, r2
 8000d6c:	f0c0 80f0 	bcc.w	8000f50 <__udivmoddi4+0x2ac>
 8000d70:	1a86      	subs	r6, r0, r2
 8000d72:	eb64 0303 	sbc.w	r3, r4, r3
 8000d76:	2001      	movs	r0, #1
 8000d78:	2d00      	cmp	r5, #0
 8000d7a:	d0e6      	beq.n	8000d4a <__udivmoddi4+0xa6>
 8000d7c:	e9c5 6300 	strd	r6, r3, [r5]
 8000d80:	e7e3      	b.n	8000d4a <__udivmoddi4+0xa6>
 8000d82:	2a00      	cmp	r2, #0
 8000d84:	f040 8090 	bne.w	8000ea8 <__udivmoddi4+0x204>
 8000d88:	eba1 040c 	sub.w	r4, r1, ip
 8000d8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d90:	fa1f f78c 	uxth.w	r7, ip
 8000d94:	2101      	movs	r1, #1
 8000d96:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d9a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d9e:	fb08 4416 	mls	r4, r8, r6, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb07 f006 	mul.w	r0, r7, r6
 8000daa:	4298      	cmp	r0, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x11c>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x11a>
 8000db8:	4298      	cmp	r0, r3
 8000dba:	f200 80cd 	bhi.w	8000f58 <__udivmoddi4+0x2b4>
 8000dbe:	4626      	mov	r6, r4
 8000dc0:	1a1c      	subs	r4, r3, r0
 8000dc2:	fa1f f38e 	uxth.w	r3, lr
 8000dc6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dca:	fb08 4410 	mls	r4, r8, r0, r4
 8000dce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dd2:	fb00 f707 	mul.w	r7, r0, r7
 8000dd6:	429f      	cmp	r7, r3
 8000dd8:	d908      	bls.n	8000dec <__udivmoddi4+0x148>
 8000dda:	eb1c 0303 	adds.w	r3, ip, r3
 8000dde:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x146>
 8000de4:	429f      	cmp	r7, r3
 8000de6:	f200 80b0 	bhi.w	8000f4a <__udivmoddi4+0x2a6>
 8000dea:	4620      	mov	r0, r4
 8000dec:	1bdb      	subs	r3, r3, r7
 8000dee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000df2:	e7a5      	b.n	8000d40 <__udivmoddi4+0x9c>
 8000df4:	f1c1 0620 	rsb	r6, r1, #32
 8000df8:	408b      	lsls	r3, r1
 8000dfa:	fa22 f706 	lsr.w	r7, r2, r6
 8000dfe:	431f      	orrs	r7, r3
 8000e00:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e04:	fa04 f301 	lsl.w	r3, r4, r1
 8000e08:	ea43 030c 	orr.w	r3, r3, ip
 8000e0c:	40f4      	lsrs	r4, r6
 8000e0e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e12:	0c38      	lsrs	r0, r7, #16
 8000e14:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e18:	fbb4 fef0 	udiv	lr, r4, r0
 8000e1c:	fa1f fc87 	uxth.w	ip, r7
 8000e20:	fb00 441e 	mls	r4, r0, lr, r4
 8000e24:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e28:	fb0e f90c 	mul.w	r9, lr, ip
 8000e2c:	45a1      	cmp	r9, r4
 8000e2e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e32:	d90a      	bls.n	8000e4a <__udivmoddi4+0x1a6>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e3a:	f080 8084 	bcs.w	8000f46 <__udivmoddi4+0x2a2>
 8000e3e:	45a1      	cmp	r9, r4
 8000e40:	f240 8081 	bls.w	8000f46 <__udivmoddi4+0x2a2>
 8000e44:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	eba4 0409 	sub.w	r4, r4, r9
 8000e4e:	fa1f f983 	uxth.w	r9, r3
 8000e52:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e56:	fb00 4413 	mls	r4, r0, r3, r4
 8000e5a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e5e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e62:	45a4      	cmp	ip, r4
 8000e64:	d907      	bls.n	8000e76 <__udivmoddi4+0x1d2>
 8000e66:	193c      	adds	r4, r7, r4
 8000e68:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e6c:	d267      	bcs.n	8000f3e <__udivmoddi4+0x29a>
 8000e6e:	45a4      	cmp	ip, r4
 8000e70:	d965      	bls.n	8000f3e <__udivmoddi4+0x29a>
 8000e72:	3b02      	subs	r3, #2
 8000e74:	443c      	add	r4, r7
 8000e76:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e7a:	fba0 9302 	umull	r9, r3, r0, r2
 8000e7e:	eba4 040c 	sub.w	r4, r4, ip
 8000e82:	429c      	cmp	r4, r3
 8000e84:	46ce      	mov	lr, r9
 8000e86:	469c      	mov	ip, r3
 8000e88:	d351      	bcc.n	8000f2e <__udivmoddi4+0x28a>
 8000e8a:	d04e      	beq.n	8000f2a <__udivmoddi4+0x286>
 8000e8c:	b155      	cbz	r5, 8000ea4 <__udivmoddi4+0x200>
 8000e8e:	ebb8 030e 	subs.w	r3, r8, lr
 8000e92:	eb64 040c 	sbc.w	r4, r4, ip
 8000e96:	fa04 f606 	lsl.w	r6, r4, r6
 8000e9a:	40cb      	lsrs	r3, r1
 8000e9c:	431e      	orrs	r6, r3
 8000e9e:	40cc      	lsrs	r4, r1
 8000ea0:	e9c5 6400 	strd	r6, r4, [r5]
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	e750      	b.n	8000d4a <__udivmoddi4+0xa6>
 8000ea8:	f1c2 0320 	rsb	r3, r2, #32
 8000eac:	fa20 f103 	lsr.w	r1, r0, r3
 8000eb0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eb4:	fa24 f303 	lsr.w	r3, r4, r3
 8000eb8:	4094      	lsls	r4, r2
 8000eba:	430c      	orrs	r4, r1
 8000ebc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ec0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ec4:	fa1f f78c 	uxth.w	r7, ip
 8000ec8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ecc:	fb08 3110 	mls	r1, r8, r0, r3
 8000ed0:	0c23      	lsrs	r3, r4, #16
 8000ed2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ed6:	fb00 f107 	mul.w	r1, r0, r7
 8000eda:	4299      	cmp	r1, r3
 8000edc:	d908      	bls.n	8000ef0 <__udivmoddi4+0x24c>
 8000ede:	eb1c 0303 	adds.w	r3, ip, r3
 8000ee2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000ee6:	d22c      	bcs.n	8000f42 <__udivmoddi4+0x29e>
 8000ee8:	4299      	cmp	r1, r3
 8000eea:	d92a      	bls.n	8000f42 <__udivmoddi4+0x29e>
 8000eec:	3802      	subs	r0, #2
 8000eee:	4463      	add	r3, ip
 8000ef0:	1a5b      	subs	r3, r3, r1
 8000ef2:	b2a4      	uxth	r4, r4
 8000ef4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ef8:	fb08 3311 	mls	r3, r8, r1, r3
 8000efc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f00:	fb01 f307 	mul.w	r3, r1, r7
 8000f04:	42a3      	cmp	r3, r4
 8000f06:	d908      	bls.n	8000f1a <__udivmoddi4+0x276>
 8000f08:	eb1c 0404 	adds.w	r4, ip, r4
 8000f0c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f10:	d213      	bcs.n	8000f3a <__udivmoddi4+0x296>
 8000f12:	42a3      	cmp	r3, r4
 8000f14:	d911      	bls.n	8000f3a <__udivmoddi4+0x296>
 8000f16:	3902      	subs	r1, #2
 8000f18:	4464      	add	r4, ip
 8000f1a:	1ae4      	subs	r4, r4, r3
 8000f1c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f20:	e739      	b.n	8000d96 <__udivmoddi4+0xf2>
 8000f22:	4604      	mov	r4, r0
 8000f24:	e6f0      	b.n	8000d08 <__udivmoddi4+0x64>
 8000f26:	4608      	mov	r0, r1
 8000f28:	e706      	b.n	8000d38 <__udivmoddi4+0x94>
 8000f2a:	45c8      	cmp	r8, r9
 8000f2c:	d2ae      	bcs.n	8000e8c <__udivmoddi4+0x1e8>
 8000f2e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f32:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f36:	3801      	subs	r0, #1
 8000f38:	e7a8      	b.n	8000e8c <__udivmoddi4+0x1e8>
 8000f3a:	4631      	mov	r1, r6
 8000f3c:	e7ed      	b.n	8000f1a <__udivmoddi4+0x276>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	e799      	b.n	8000e76 <__udivmoddi4+0x1d2>
 8000f42:	4630      	mov	r0, r6
 8000f44:	e7d4      	b.n	8000ef0 <__udivmoddi4+0x24c>
 8000f46:	46d6      	mov	lr, sl
 8000f48:	e77f      	b.n	8000e4a <__udivmoddi4+0x1a6>
 8000f4a:	4463      	add	r3, ip
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	e74d      	b.n	8000dec <__udivmoddi4+0x148>
 8000f50:	4606      	mov	r6, r0
 8000f52:	4623      	mov	r3, r4
 8000f54:	4608      	mov	r0, r1
 8000f56:	e70f      	b.n	8000d78 <__udivmoddi4+0xd4>
 8000f58:	3e02      	subs	r6, #2
 8000f5a:	4463      	add	r3, ip
 8000f5c:	e730      	b.n	8000dc0 <__udivmoddi4+0x11c>
 8000f5e:	bf00      	nop

08000f60 <__aeabi_idiv0>:
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop

08000f64 <OLED_Write_Cmd>:
static uint8_t oled_buffer[128 * 8] = {0};

/**
 * @brief OLED写入命令
 */
static void OLED_Write_Cmd(uint8_t cmd) {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b086      	sub	sp, #24
 8000f68:	af02      	add	r7, sp, #8
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[2];
    buf[0] = 0x00; // control byte
 8000f6e:	2300      	movs	r3, #0
 8000f70:	733b      	strb	r3, [r7, #12]
    buf[1] = cmd;
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	737b      	strb	r3, [r7, #13]

    HAL_I2C_Master_Transmit(&hi2c1, 0x78, buf, 2, 0xFFFF);
 8000f76:	f107 020c 	add.w	r2, r7, #12
 8000f7a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f7e:	9300      	str	r3, [sp, #0]
 8000f80:	2302      	movs	r3, #2
 8000f82:	2178      	movs	r1, #120	@ 0x78
 8000f84:	4803      	ldr	r0, [pc, #12]	@ (8000f94 <OLED_Write_Cmd+0x30>)
 8000f86:	f004 f965 	bl	8005254 <HAL_I2C_Master_Transmit>
}
 8000f8a:	bf00      	nop
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000688 	.word	0x20000688

08000f98 <OLED_Write_Dat>:

/**
 * @brief OLED写入数据
 */
static void OLED_Write_Dat(uint8_t dat) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af02      	add	r7, sp, #8
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[2];
    buf[0] = 0x40; // control byte
 8000fa2:	2340      	movs	r3, #64	@ 0x40
 8000fa4:	733b      	strb	r3, [r7, #12]
    buf[1] = dat;
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	737b      	strb	r3, [r7, #13]

    HAL_I2C_Master_Transmit(&hi2c1, 0x78, buf, 2, 0xFFFF);
 8000faa:	f107 020c 	add.w	r2, r7, #12
 8000fae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000fb2:	9300      	str	r3, [sp, #0]
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	2178      	movs	r1, #120	@ 0x78
 8000fb8:	4803      	ldr	r0, [pc, #12]	@ (8000fc8 <OLED_Write_Dat+0x30>)
 8000fba:	f004 f94b 	bl	8005254 <HAL_I2C_Master_Transmit>
}
 8000fbe:	bf00      	nop
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000688 	.word	0x20000688

08000fcc <OLED_Set_Pos>:

/**
 * @brief OLED设置显示位置
 */
void OLED_Set_Pos(uint8_t x, uint8_t y) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	460a      	mov	r2, r1
 8000fd6:	71fb      	strb	r3, [r7, #7]
 8000fd8:	4613      	mov	r3, r2
 8000fda:	71bb      	strb	r3, [r7, #6]
    OLED_Write_Cmd(0xB0 + y);          // 设置页地址
 8000fdc:	79bb      	ldrb	r3, [r7, #6]
 8000fde:	3b50      	subs	r3, #80	@ 0x50
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff ffbe 	bl	8000f64 <OLED_Write_Cmd>
    OLED_Write_Cmd(((x & 0xF0) >> 4) | 0x10); // 设置高列地址
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	091b      	lsrs	r3, r3, #4
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	f043 0310 	orr.w	r3, r3, #16
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff ffb5 	bl	8000f64 <OLED_Write_Cmd>
    OLED_Write_Cmd((x & 0x0F) | 0x01);       // 设置低列地址
 8000ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffe:	f003 030e 	and.w	r3, r3, #14
 8001002:	b25b      	sxtb	r3, r3
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	b25b      	sxtb	r3, r3
 800100a:	b2db      	uxtb	r3, r3
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff ffa9 	bl	8000f64 <OLED_Write_Cmd>
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
	...

0800101c <OLED_Clear>:

/**
 * @brief OLED清屏函数（清屏之后屏幕全为黑色）
 */
void OLED_Clear(void) {
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
    memset(oled_buffer, 0, sizeof(oled_buffer));
 8001020:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001024:	2100      	movs	r1, #0
 8001026:	4803      	ldr	r0, [pc, #12]	@ (8001034 <OLED_Clear+0x18>)
 8001028:	f007 fa1a 	bl	8008460 <memset>
    OLED_Update_Screen(); // 立即刷新
 800102c:	f000 fbd6 	bl	80017dc <OLED_Update_Screen>
}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}
 8001034:	200001e0 	.word	0x200001e0

08001038 <oled_pow>:
 * @brief OLED专用pow函数
 * @param m - 底数
 * @param n - 指数
 * @return 计算结果 (m^n)
 */
static uint32_t oled_pow(uint8_t m, uint8_t n) {
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	460a      	mov	r2, r1
 8001042:	71fb      	strb	r3, [r7, #7]
 8001044:	4613      	mov	r3, r2
 8001046:	71bb      	strb	r3, [r7, #6]
    uint32_t result = 1; // 初始化结果为1（任何数的0次幂为1）
 8001048:	2301      	movs	r3, #1
 800104a:	60fb      	str	r3, [r7, #12]
    while (n--) {        // 循环n次，每次将result乘以m
 800104c:	e004      	b.n	8001058 <oled_pow+0x20>
        result *= m;
 800104e:	79fa      	ldrb	r2, [r7, #7]
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	fb02 f303 	mul.w	r3, r2, r3
 8001056:	60fb      	str	r3, [r7, #12]
    while (n--) {        // 循环n次，每次将result乘以m
 8001058:	79bb      	ldrb	r3, [r7, #6]
 800105a:	1e5a      	subs	r2, r3, #1
 800105c:	71ba      	strb	r2, [r7, #6]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d1f5      	bne.n	800104e <oled_pow+0x16>
    }
    return result;
 8001062:	68fb      	ldr	r3, [r7, #12]
}
 8001064:	4618      	mov	r0, r3
 8001066:	3714      	adds	r7, #20
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <OLED_ShowChar>:


void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr, uint8_t size) {
 8001070:	b490      	push	{r4, r7}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	4604      	mov	r4, r0
 8001078:	4608      	mov	r0, r1
 800107a:	4611      	mov	r1, r2
 800107c:	461a      	mov	r2, r3
 800107e:	4623      	mov	r3, r4
 8001080:	71fb      	strb	r3, [r7, #7]
 8001082:	4603      	mov	r3, r0
 8001084:	71bb      	strb	r3, [r7, #6]
 8001086:	460b      	mov	r3, r1
 8001088:	717b      	strb	r3, [r7, #5]
 800108a:	4613      	mov	r3, r2
 800108c:	713b      	strb	r3, [r7, #4]
    if (x >= 128 || y >= 8) return; // 边界检查
 800108e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001092:	2b00      	cmp	r3, #0
 8001094:	db7d      	blt.n	8001192 <OLED_ShowChar+0x122>
 8001096:	79bb      	ldrb	r3, [r7, #6]
 8001098:	2b07      	cmp	r3, #7
 800109a:	d87a      	bhi.n	8001192 <OLED_ShowChar+0x122>

    uint8_t c = chr - ' '; // 计算字体数组索引
 800109c:	797b      	ldrb	r3, [r7, #5]
 800109e:	3b20      	subs	r3, #32
 80010a0:	73bb      	strb	r3, [r7, #14]
    uint8_t i;

    if (size == 16) {
 80010a2:	793b      	ldrb	r3, [r7, #4]
 80010a4:	2b10      	cmp	r3, #16
 80010a6:	d149      	bne.n	800113c <OLED_ShowChar+0xcc>
        for (i = 0; i < 8; i++) {
 80010a8:	2300      	movs	r3, #0
 80010aa:	73fb      	strb	r3, [r7, #15]
 80010ac:	e042      	b.n	8001134 <OLED_ShowChar+0xc4>
            if (x + i < 128) {
 80010ae:	79fa      	ldrb	r2, [r7, #7]
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
 80010b2:	4413      	add	r3, r2
 80010b4:	2b7f      	cmp	r3, #127	@ 0x7f
 80010b6:	dc3a      	bgt.n	800112e <OLED_ShowChar+0xbe>
                oled_buffer[y * 128 + x + i] |= F8X16[c * 16 + i]; // 上半部分
 80010b8:	79bb      	ldrb	r3, [r7, #6]
 80010ba:	01da      	lsls	r2, r3, #7
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	441a      	add	r2, r3
 80010c0:	7bfb      	ldrb	r3, [r7, #15]
 80010c2:	4413      	add	r3, r2
 80010c4:	4a35      	ldr	r2, [pc, #212]	@ (800119c <OLED_ShowChar+0x12c>)
 80010c6:	5cd1      	ldrb	r1, [r2, r3]
 80010c8:	7bbb      	ldrb	r3, [r7, #14]
 80010ca:	011a      	lsls	r2, r3, #4
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
 80010ce:	4413      	add	r3, r2
 80010d0:	4a33      	ldr	r2, [pc, #204]	@ (80011a0 <OLED_ShowChar+0x130>)
 80010d2:	5cd2      	ldrb	r2, [r2, r3]
 80010d4:	79bb      	ldrb	r3, [r7, #6]
 80010d6:	01d8      	lsls	r0, r3, #7
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	4418      	add	r0, r3
 80010dc:	7bfb      	ldrb	r3, [r7, #15]
 80010de:	4403      	add	r3, r0
 80010e0:	430a      	orrs	r2, r1
 80010e2:	b2d1      	uxtb	r1, r2
 80010e4:	4a2d      	ldr	r2, [pc, #180]	@ (800119c <OLED_ShowChar+0x12c>)
 80010e6:	54d1      	strb	r1, [r2, r3]
                if (y + 1 < 8 && x + i < 128) {
 80010e8:	79bb      	ldrb	r3, [r7, #6]
 80010ea:	2b06      	cmp	r3, #6
 80010ec:	d81f      	bhi.n	800112e <OLED_ShowChar+0xbe>
 80010ee:	79fa      	ldrb	r2, [r7, #7]
 80010f0:	7bfb      	ldrb	r3, [r7, #15]
 80010f2:	4413      	add	r3, r2
 80010f4:	2b7f      	cmp	r3, #127	@ 0x7f
 80010f6:	dc1a      	bgt.n	800112e <OLED_ShowChar+0xbe>
                    oled_buffer[(y + 1) * 128 + x + i] |= F8X16[c * 16 + i + 8]; // 下半部分
 80010f8:	79bb      	ldrb	r3, [r7, #6]
 80010fa:	3301      	adds	r3, #1
 80010fc:	01da      	lsls	r2, r3, #7
 80010fe:	79fb      	ldrb	r3, [r7, #7]
 8001100:	441a      	add	r2, r3
 8001102:	7bfb      	ldrb	r3, [r7, #15]
 8001104:	4413      	add	r3, r2
 8001106:	4a25      	ldr	r2, [pc, #148]	@ (800119c <OLED_ShowChar+0x12c>)
 8001108:	5cd1      	ldrb	r1, [r2, r3]
 800110a:	7bbb      	ldrb	r3, [r7, #14]
 800110c:	011a      	lsls	r2, r3, #4
 800110e:	7bfb      	ldrb	r3, [r7, #15]
 8001110:	4413      	add	r3, r2
 8001112:	3308      	adds	r3, #8
 8001114:	4a22      	ldr	r2, [pc, #136]	@ (80011a0 <OLED_ShowChar+0x130>)
 8001116:	5cd2      	ldrb	r2, [r2, r3]
 8001118:	79bb      	ldrb	r3, [r7, #6]
 800111a:	3301      	adds	r3, #1
 800111c:	01d8      	lsls	r0, r3, #7
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	4418      	add	r0, r3
 8001122:	7bfb      	ldrb	r3, [r7, #15]
 8001124:	4403      	add	r3, r0
 8001126:	430a      	orrs	r2, r1
 8001128:	b2d1      	uxtb	r1, r2
 800112a:	4a1c      	ldr	r2, [pc, #112]	@ (800119c <OLED_ShowChar+0x12c>)
 800112c:	54d1      	strb	r1, [r2, r3]
        for (i = 0; i < 8; i++) {
 800112e:	7bfb      	ldrb	r3, [r7, #15]
 8001130:	3301      	adds	r3, #1
 8001132:	73fb      	strb	r3, [r7, #15]
 8001134:	7bfb      	ldrb	r3, [r7, #15]
 8001136:	2b07      	cmp	r3, #7
 8001138:	d9b9      	bls.n	80010ae <OLED_ShowChar+0x3e>
 800113a:	e02b      	b.n	8001194 <OLED_ShowChar+0x124>
                }
            }
        }
    } else {
        for (i = 0; i < 6; i++) {
 800113c:	2300      	movs	r3, #0
 800113e:	73fb      	strb	r3, [r7, #15]
 8001140:	e023      	b.n	800118a <OLED_ShowChar+0x11a>
            if (x + i < 128) {
 8001142:	79fa      	ldrb	r2, [r7, #7]
 8001144:	7bfb      	ldrb	r3, [r7, #15]
 8001146:	4413      	add	r3, r2
 8001148:	2b7f      	cmp	r3, #127	@ 0x7f
 800114a:	dc1b      	bgt.n	8001184 <OLED_ShowChar+0x114>
                oled_buffer[y * 128 + x + i] |= F6x8[c][i];
 800114c:	79bb      	ldrb	r3, [r7, #6]
 800114e:	01da      	lsls	r2, r3, #7
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	441a      	add	r2, r3
 8001154:	7bfb      	ldrb	r3, [r7, #15]
 8001156:	4413      	add	r3, r2
 8001158:	4a10      	ldr	r2, [pc, #64]	@ (800119c <OLED_ShowChar+0x12c>)
 800115a:	5cd1      	ldrb	r1, [r2, r3]
 800115c:	7bba      	ldrb	r2, [r7, #14]
 800115e:	7bf8      	ldrb	r0, [r7, #15]
 8001160:	4c10      	ldr	r4, [pc, #64]	@ (80011a4 <OLED_ShowChar+0x134>)
 8001162:	4613      	mov	r3, r2
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	4413      	add	r3, r2
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	4423      	add	r3, r4
 800116c:	4403      	add	r3, r0
 800116e:	781a      	ldrb	r2, [r3, #0]
 8001170:	79bb      	ldrb	r3, [r7, #6]
 8001172:	01d8      	lsls	r0, r3, #7
 8001174:	79fb      	ldrb	r3, [r7, #7]
 8001176:	4418      	add	r0, r3
 8001178:	7bfb      	ldrb	r3, [r7, #15]
 800117a:	4403      	add	r3, r0
 800117c:	430a      	orrs	r2, r1
 800117e:	b2d1      	uxtb	r1, r2
 8001180:	4a06      	ldr	r2, [pc, #24]	@ (800119c <OLED_ShowChar+0x12c>)
 8001182:	54d1      	strb	r1, [r2, r3]
        for (i = 0; i < 6; i++) {
 8001184:	7bfb      	ldrb	r3, [r7, #15]
 8001186:	3301      	adds	r3, #1
 8001188:	73fb      	strb	r3, [r7, #15]
 800118a:	7bfb      	ldrb	r3, [r7, #15]
 800118c:	2b05      	cmp	r3, #5
 800118e:	d9d8      	bls.n	8001142 <OLED_ShowChar+0xd2>
 8001190:	e000      	b.n	8001194 <OLED_ShowChar+0x124>
    if (x >= 128 || y >= 8) return; // 边界检查
 8001192:	bf00      	nop
            }
        }
    }
}
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bc90      	pop	{r4, r7}
 800119a:	4770      	bx	lr
 800119c:	200001e0 	.word	0x200001e0
 80011a0:	080097fc 	.word	0x080097fc
 80011a4:	080095d4 	.word	0x080095d4

080011a8 <OLED_ShowString>:


void OLED_ShowString(uint8_t x, uint8_t y, char *chr, uint8_t size) {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	603a      	str	r2, [r7, #0]
 80011b0:	461a      	mov	r2, r3
 80011b2:	4603      	mov	r3, r0
 80011b4:	71fb      	strb	r3, [r7, #7]
 80011b6:	460b      	mov	r3, r1
 80011b8:	71bb      	strb	r3, [r7, #6]
 80011ba:	4613      	mov	r3, r2
 80011bc:	717b      	strb	r3, [r7, #5]
    uint8_t j = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	73fb      	strb	r3, [r7, #15]
    while (chr[j] != '\0') {
 80011c2:	e025      	b.n	8001210 <OLED_ShowString+0x68>
        OLED_ShowChar(x, y, chr[j], size);
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
 80011c6:	683a      	ldr	r2, [r7, #0]
 80011c8:	4413      	add	r3, r2
 80011ca:	781a      	ldrb	r2, [r3, #0]
 80011cc:	797b      	ldrb	r3, [r7, #5]
 80011ce:	79b9      	ldrb	r1, [r7, #6]
 80011d0:	79f8      	ldrb	r0, [r7, #7]
 80011d2:	f7ff ff4d 	bl	8001070 <OLED_ShowChar>
        x += (size == 16) ? 8 : 6; // 计算下一个字符位置
 80011d6:	797b      	ldrb	r3, [r7, #5]
 80011d8:	2b10      	cmp	r3, #16
 80011da:	d101      	bne.n	80011e0 <OLED_ShowString+0x38>
 80011dc:	2208      	movs	r2, #8
 80011de:	e000      	b.n	80011e2 <OLED_ShowString+0x3a>
 80011e0:	2206      	movs	r2, #6
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	4413      	add	r3, r2
 80011e6:	71fb      	strb	r3, [r7, #7]
        if (x > 120) {             // 边界换行
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	2b78      	cmp	r3, #120	@ 0x78
 80011ec:	d90d      	bls.n	800120a <OLED_ShowString+0x62>
            x = 0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	71fb      	strb	r3, [r7, #7]
            y += (size == 16) ? 2 : 1; // 根据字体高度换页
 80011f2:	797b      	ldrb	r3, [r7, #5]
 80011f4:	2b10      	cmp	r3, #16
 80011f6:	d101      	bne.n	80011fc <OLED_ShowString+0x54>
 80011f8:	2202      	movs	r2, #2
 80011fa:	e000      	b.n	80011fe <OLED_ShowString+0x56>
 80011fc:	2201      	movs	r2, #1
 80011fe:	79bb      	ldrb	r3, [r7, #6]
 8001200:	4413      	add	r3, r2
 8001202:	71bb      	strb	r3, [r7, #6]
            if (y >= 8) break;         // 超出屏幕则终止
 8001204:	79bb      	ldrb	r3, [r7, #6]
 8001206:	2b07      	cmp	r3, #7
 8001208:	d809      	bhi.n	800121e <OLED_ShowString+0x76>
        }
        j++;
 800120a:	7bfb      	ldrb	r3, [r7, #15]
 800120c:	3301      	adds	r3, #1
 800120e:	73fb      	strb	r3, [r7, #15]
    while (chr[j] != '\0') {
 8001210:	7bfb      	ldrb	r3, [r7, #15]
 8001212:	683a      	ldr	r2, [r7, #0]
 8001214:	4413      	add	r3, r2
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d1d3      	bne.n	80011c4 <OLED_ShowString+0x1c>
    }
}
 800121c:	e000      	b.n	8001220 <OLED_ShowString+0x78>
            if (y >= 8) break;         // 超出屏幕则终止
 800121e:	bf00      	nop
}
 8001220:	bf00      	nop
 8001222:	3710      	adds	r7, #16
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <OLED_ShowNum>:


void OLED_ShowNum(uint8_t x, uint8_t y, uint32_t num, uint8_t len, uint8_t size) {
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	603a      	str	r2, [r7, #0]
 8001230:	461a      	mov	r2, r3
 8001232:	4603      	mov	r3, r0
 8001234:	71fb      	strb	r3, [r7, #7]
 8001236:	460b      	mov	r3, r1
 8001238:	71bb      	strb	r3, [r7, #6]
 800123a:	4613      	mov	r3, r2
 800123c:	717b      	strb	r3, [r7, #5]
    if (x >= 128 || y >= 8) return; // 边界检查
 800123e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001242:	2b00      	cmp	r3, #0
 8001244:	db56      	blt.n	80012f4 <OLED_ShowNum+0xcc>
 8001246:	79bb      	ldrb	r3, [r7, #6]
 8001248:	2b07      	cmp	r3, #7
 800124a:	d853      	bhi.n	80012f4 <OLED_ShowNum+0xcc>

    uint8_t t, temp;
    uint8_t enshow = 0; // 前导零标志
 800124c:	2300      	movs	r3, #0
 800124e:	73bb      	strb	r3, [r7, #14]

    for (t = 0; t < len; t++) {
 8001250:	2300      	movs	r3, #0
 8001252:	73fb      	strb	r3, [r7, #15]
 8001254:	e049      	b.n	80012ea <OLED_ShowNum+0xc2>
        temp = (num / oled_pow(10, len - t - 1)) % 10;
 8001256:	797a      	ldrb	r2, [r7, #5]
 8001258:	7bfb      	ldrb	r3, [r7, #15]
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	b2db      	uxtb	r3, r3
 800125e:	3b01      	subs	r3, #1
 8001260:	b2db      	uxtb	r3, r3
 8001262:	4619      	mov	r1, r3
 8001264:	200a      	movs	r0, #10
 8001266:	f7ff fee7 	bl	8001038 <oled_pow>
 800126a:	4602      	mov	r2, r0
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	fbb3 f1f2 	udiv	r1, r3, r2
 8001272:	4b22      	ldr	r3, [pc, #136]	@ (80012fc <OLED_ShowNum+0xd4>)
 8001274:	fba3 2301 	umull	r2, r3, r3, r1
 8001278:	08da      	lsrs	r2, r3, #3
 800127a:	4613      	mov	r3, r2
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	4413      	add	r3, r2
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	1aca      	subs	r2, r1, r3
 8001284:	4613      	mov	r3, r2
 8001286:	737b      	strb	r3, [r7, #13]

        // 前导零处理
        if (enshow == 0 && t < (len - 1)) {
 8001288:	7bbb      	ldrb	r3, [r7, #14]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d119      	bne.n	80012c2 <OLED_ShowNum+0x9a>
 800128e:	7bfa      	ldrb	r2, [r7, #15]
 8001290:	797b      	ldrb	r3, [r7, #5]
 8001292:	3b01      	subs	r3, #1
 8001294:	429a      	cmp	r2, r3
 8001296:	da14      	bge.n	80012c2 <OLED_ShowNum+0x9a>
            if (temp == 0) {
 8001298:	7b7b      	ldrb	r3, [r7, #13]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d10f      	bne.n	80012be <OLED_ShowNum+0x96>
                OLED_ShowChar(x + (size / 2) * t, y, ' ', size); // 显示空格
 800129e:	7e3b      	ldrb	r3, [r7, #24]
 80012a0:	085b      	lsrs	r3, r3, #1
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	7bfa      	ldrb	r2, [r7, #15]
 80012a6:	fb12 f303 	smulbb	r3, r2, r3
 80012aa:	b2da      	uxtb	r2, r3
 80012ac:	79fb      	ldrb	r3, [r7, #7]
 80012ae:	4413      	add	r3, r2
 80012b0:	b2d8      	uxtb	r0, r3
 80012b2:	7e3b      	ldrb	r3, [r7, #24]
 80012b4:	79b9      	ldrb	r1, [r7, #6]
 80012b6:	2220      	movs	r2, #32
 80012b8:	f7ff feda 	bl	8001070 <OLED_ShowChar>
                continue;
 80012bc:	e012      	b.n	80012e4 <OLED_ShowNum+0xbc>
            } else {
                enshow = 1; // 开始显示数字
 80012be:	2301      	movs	r3, #1
 80012c0:	73bb      	strb	r3, [r7, #14]
            }
        }

        OLED_ShowChar(x + (size / 2) * t, y, temp + '0', size); // 显示数字
 80012c2:	7e3b      	ldrb	r3, [r7, #24]
 80012c4:	085b      	lsrs	r3, r3, #1
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	7bfa      	ldrb	r2, [r7, #15]
 80012ca:	fb12 f303 	smulbb	r3, r2, r3
 80012ce:	b2da      	uxtb	r2, r3
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	4413      	add	r3, r2
 80012d4:	b2d8      	uxtb	r0, r3
 80012d6:	7b7b      	ldrb	r3, [r7, #13]
 80012d8:	3330      	adds	r3, #48	@ 0x30
 80012da:	b2da      	uxtb	r2, r3
 80012dc:	7e3b      	ldrb	r3, [r7, #24]
 80012de:	79b9      	ldrb	r1, [r7, #6]
 80012e0:	f7ff fec6 	bl	8001070 <OLED_ShowChar>
    for (t = 0; t < len; t++) {
 80012e4:	7bfb      	ldrb	r3, [r7, #15]
 80012e6:	3301      	adds	r3, #1
 80012e8:	73fb      	strb	r3, [r7, #15]
 80012ea:	7bfa      	ldrb	r2, [r7, #15]
 80012ec:	797b      	ldrb	r3, [r7, #5]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d3b1      	bcc.n	8001256 <OLED_ShowNum+0x2e>
 80012f2:	e000      	b.n	80012f6 <OLED_ShowNum+0xce>
    if (x >= 128 || y >= 8) return; // 边界检查
 80012f4:	bf00      	nop
    }
}
 80012f6:	3710      	adds	r7, #16
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	cccccccd 	.word	0xcccccccd

08001300 <OLED_ShowFloat>:


void OLED_ShowFloat(uint8_t x, uint8_t y, float num, uint8_t decimals, uint8_t size) {
 8001300:	b590      	push	{r4, r7, lr}
 8001302:	b097      	sub	sp, #92	@ 0x5c
 8001304:	af00      	add	r7, sp, #0
 8001306:	4604      	mov	r4, r0
 8001308:	4608      	mov	r0, r1
 800130a:	ed87 0a00 	vstr	s0, [r7]
 800130e:	4611      	mov	r1, r2
 8001310:	461a      	mov	r2, r3
 8001312:	4623      	mov	r3, r4
 8001314:	71fb      	strb	r3, [r7, #7]
 8001316:	4603      	mov	r3, r0
 8001318:	71bb      	strb	r3, [r7, #6]
 800131a:	460b      	mov	r3, r1
 800131c:	717b      	strb	r3, [r7, #5]
 800131e:	4613      	mov	r3, r2
 8001320:	713b      	strb	r3, [r7, #4]
    if (x >= 128 || y >= 8) return;
 8001322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001326:	2b00      	cmp	r3, #0
 8001328:	f2c0 8148 	blt.w	80015bc <OLED_ShowFloat+0x2bc>
 800132c:	79bb      	ldrb	r3, [r7, #6]
 800132e:	2b07      	cmp	r3, #7
 8001330:	f200 8144 	bhi.w	80015bc <OLED_ShowFloat+0x2bc>

    char str_buf[16] = {0};  // 初始化缓冲区
 8001334:	2300      	movs	r3, #0
 8001336:	61bb      	str	r3, [r7, #24]
 8001338:	f107 031c 	add.w	r3, r7, #28
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
    int32_t integer_part;
    int32_t decimal_part;
    uint8_t is_negative = 0;
 8001344:	2300      	movs	r3, #0
 8001346:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    int32_t factor = 1;
 800134a:	2301      	movs	r3, #1
 800134c:	64bb      	str	r3, [r7, #72]	@ 0x48

    // 参数有效性检查
    decimals = decimals > 5 ? 5 : decimals;
 800134e:	797b      	ldrb	r3, [r7, #5]
 8001350:	2b05      	cmp	r3, #5
 8001352:	bf28      	it	cs
 8001354:	2305      	movcs	r3, #5
 8001356:	717b      	strb	r3, [r7, #5]
    for(uint8_t i=0; i<decimals; i++) factor *= 10;
 8001358:	2300      	movs	r3, #0
 800135a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800135e:	e00a      	b.n	8001376 <OLED_ShowFloat+0x76>
 8001360:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001362:	4613      	mov	r3, r2
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	4413      	add	r3, r2
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800136c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001370:	3301      	adds	r3, #1
 8001372:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8001376:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 800137a:	797b      	ldrb	r3, [r7, #5]
 800137c:	429a      	cmp	r2, r3
 800137e:	d3ef      	bcc.n	8001360 <OLED_ShowFloat+0x60>

    // 四舍五入处理（整个数值）
    float rounded = num;
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	643b      	str	r3, [r7, #64]	@ 0x40
    if(decimals > 0) {
 8001384:	797b      	ldrb	r3, [r7, #5]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d019      	beq.n	80013be <OLED_ShowFloat+0xbe>
        rounded += (num < 0 ? -0.5f : 0.5f) / factor;
 800138a:	edd7 7a00 	vldr	s15, [r7]
 800138e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001396:	d502      	bpl.n	800139e <OLED_ShowFloat+0x9e>
 8001398:	eefe 6a00 	vmov.f32	s13, #224	@ 0xbf000000 -0.5
 800139c:	e001      	b.n	80013a2 <OLED_ShowFloat+0xa2>
 800139e:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 80013a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80013a4:	ee07 3a90 	vmov	s15, r3
 80013a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013b0:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80013b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013b8:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
 80013bc:	e011      	b.n	80013e2 <OLED_ShowFloat+0xe2>
    } else {
        rounded += (num < 0 ? -0.5f : 0.5f);
 80013be:	edd7 7a00 	vldr	s15, [r7]
 80013c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ca:	d502      	bpl.n	80013d2 <OLED_ShowFloat+0xd2>
 80013cc:	eefe 7a00 	vmov.f32	s15, #224	@ 0xbf000000 -0.5
 80013d0:	e001      	b.n	80013d6 <OLED_ShowFloat+0xd6>
 80013d2:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80013d6:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80013da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013de:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    }

    // 处理负数
    if(rounded < 0) {
 80013e2:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80013e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ee:	d508      	bpl.n	8001402 <OLED_ShowFloat+0x102>
        is_negative = 1;
 80013f0:	2301      	movs	r3, #1
 80013f2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
        rounded = -rounded;
 80013f6:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80013fa:	eef1 7a67 	vneg.f32	s15, s15
 80013fe:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    }

    // 分离整数和小数部分
    integer_part = (int32_t)rounded;
 8001402:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001406:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800140a:	ee17 3a90 	vmov	r3, s15
 800140e:	657b      	str	r3, [r7, #84]	@ 0x54
    float decimal_float = rounded - integer_part;
 8001410:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001412:	ee07 3a90 	vmov	s15, r3
 8001416:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800141a:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 800141e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001422:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    decimal_part = (int32_t)(decimal_float * factor + 0.5f);  // 再次四舍五入
 8001426:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001428:	ee07 3a90 	vmov	s15, r3
 800142c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001430:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001434:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001438:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800143c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001440:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001444:	ee17 3a90 	vmov	r3, s15
 8001448:	653b      	str	r3, [r7, #80]	@ 0x50

    // 处理进位（例如：3.9995 → 4.0）
    if(decimal_part >= factor) {
 800144a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800144c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800144e:	429a      	cmp	r2, r3
 8001450:	db06      	blt.n	8001460 <OLED_ShowFloat+0x160>
        integer_part++;
 8001452:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001454:	3301      	adds	r3, #1
 8001456:	657b      	str	r3, [r7, #84]	@ 0x54
        decimal_part -= factor;
 8001458:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800145a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	653b      	str	r3, [r7, #80]	@ 0x50
    }

    // 构建字符串
    uint8_t idx = 0;
 8001460:	2300      	movs	r3, #0
 8001462:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

    // 负号
    if(is_negative) {
 8001466:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800146a:	2b00      	cmp	r3, #0
 800146c:	d009      	beq.n	8001482 <OLED_ShowFloat+0x182>
        str_buf[idx++] = '-';
 800146e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001472:	1c5a      	adds	r2, r3, #1
 8001474:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8001478:	3358      	adds	r3, #88	@ 0x58
 800147a:	443b      	add	r3, r7
 800147c:	222d      	movs	r2, #45	@ 0x2d
 800147e:	f803 2c40 	strb.w	r2, [r3, #-64]
    }

    // 整数部分
    if(integer_part == 0) {
 8001482:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001484:	2b00      	cmp	r3, #0
 8001486:	d10a      	bne.n	800149e <OLED_ShowFloat+0x19e>
        str_buf[idx++] = '0';
 8001488:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800148c:	1c5a      	adds	r2, r3, #1
 800148e:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8001492:	3358      	adds	r3, #88	@ 0x58
 8001494:	443b      	add	r3, r7
 8001496:	2230      	movs	r2, #48	@ 0x30
 8001498:	f803 2c40 	strb.w	r2, [r3, #-64]
 800149c:	e043      	b.n	8001526 <OLED_ShowFloat+0x226>
    } else {
        int32_t temp = integer_part;
 800149e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80014a0:	63bb      	str	r3, [r7, #56]	@ 0x38
        uint8_t num_digits = 0;
 80014a2:	2300      	movs	r3, #0
 80014a4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        char num_buf[10];

        // 分离数字（逆序存储）
        while(temp > 0) {
 80014a8:	e01f      	b.n	80014ea <OLED_ShowFloat+0x1ea>
            num_buf[num_digits++] = (temp % 10) + '0';
 80014aa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80014ac:	4b45      	ldr	r3, [pc, #276]	@ (80015c4 <OLED_ShowFloat+0x2c4>)
 80014ae:	fb83 1302 	smull	r1, r3, r3, r2
 80014b2:	1099      	asrs	r1, r3, #2
 80014b4:	17d3      	asrs	r3, r2, #31
 80014b6:	1ac9      	subs	r1, r1, r3
 80014b8:	460b      	mov	r3, r1
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	440b      	add	r3, r1
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	1ad1      	subs	r1, r2, r3
 80014c2:	b2ca      	uxtb	r2, r1
 80014c4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80014c8:	1c59      	adds	r1, r3, #1
 80014ca:	f887 1037 	strb.w	r1, [r7, #55]	@ 0x37
 80014ce:	3230      	adds	r2, #48	@ 0x30
 80014d0:	b2d2      	uxtb	r2, r2
 80014d2:	3358      	adds	r3, #88	@ 0x58
 80014d4:	443b      	add	r3, r7
 80014d6:	f803 2c4c 	strb.w	r2, [r3, #-76]
            temp /= 10;
 80014da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80014dc:	4a39      	ldr	r2, [pc, #228]	@ (80015c4 <OLED_ShowFloat+0x2c4>)
 80014de:	fb82 1203 	smull	r1, r2, r2, r3
 80014e2:	1092      	asrs	r2, r2, #2
 80014e4:	17db      	asrs	r3, r3, #31
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	63bb      	str	r3, [r7, #56]	@ 0x38
        while(temp > 0) {
 80014ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	dcdc      	bgt.n	80014aa <OLED_ShowFloat+0x1aa>
        }

        // 正序写入缓冲区
        for(int i=num_digits-1; i>=0; i--) {
 80014f0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80014f4:	3b01      	subs	r3, #1
 80014f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80014f8:	e012      	b.n	8001520 <OLED_ShowFloat+0x220>
            str_buf[idx++] = num_buf[i];
 80014fa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80014fe:	1c5a      	adds	r2, r3, #1
 8001500:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8001504:	4619      	mov	r1, r3
 8001506:	f107 020c 	add.w	r2, r7, #12
 800150a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800150c:	4413      	add	r3, r2
 800150e:	781a      	ldrb	r2, [r3, #0]
 8001510:	f101 0358 	add.w	r3, r1, #88	@ 0x58
 8001514:	443b      	add	r3, r7
 8001516:	f803 2c40 	strb.w	r2, [r3, #-64]
        for(int i=num_digits-1; i>=0; i--) {
 800151a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800151c:	3b01      	subs	r3, #1
 800151e:	633b      	str	r3, [r7, #48]	@ 0x30
 8001520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001522:	2b00      	cmp	r3, #0
 8001524:	dae9      	bge.n	80014fa <OLED_ShowFloat+0x1fa>
        }
    }

    // 小数部分
    if(decimals > 0) {
 8001526:	797b      	ldrb	r3, [r7, #5]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d038      	beq.n	800159e <OLED_ShowFloat+0x29e>
        str_buf[idx++] = '.';
 800152c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001530:	1c5a      	adds	r2, r3, #1
 8001532:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8001536:	3358      	adds	r3, #88	@ 0x58
 8001538:	443b      	add	r3, r7
 800153a:	222e      	movs	r2, #46	@ 0x2e
 800153c:	f803 2c40 	strb.w	r2, [r3, #-64]

        // 分离小数数字（正序存储）
        for(int i=decimals-1; i>=0; i--) {
 8001540:	797b      	ldrb	r3, [r7, #5]
 8001542:	3b01      	subs	r3, #1
 8001544:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001546:	e021      	b.n	800158c <OLED_ShowFloat+0x28c>
            str_buf[idx + i] = (decimal_part % 10) + '0';
 8001548:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800154a:	4b1e      	ldr	r3, [pc, #120]	@ (80015c4 <OLED_ShowFloat+0x2c4>)
 800154c:	fb83 1302 	smull	r1, r3, r3, r2
 8001550:	1099      	asrs	r1, r3, #2
 8001552:	17d3      	asrs	r3, r2, #31
 8001554:	1ac9      	subs	r1, r1, r3
 8001556:	460b      	mov	r3, r1
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	440b      	add	r3, r1
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	1ad1      	subs	r1, r2, r3
 8001560:	b2ca      	uxtb	r2, r1
 8001562:	f897 103f 	ldrb.w	r1, [r7, #63]	@ 0x3f
 8001566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001568:	440b      	add	r3, r1
 800156a:	3230      	adds	r2, #48	@ 0x30
 800156c:	b2d2      	uxtb	r2, r2
 800156e:	3358      	adds	r3, #88	@ 0x58
 8001570:	443b      	add	r3, r7
 8001572:	f803 2c40 	strb.w	r2, [r3, #-64]
            decimal_part /= 10;
 8001576:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001578:	4a12      	ldr	r2, [pc, #72]	@ (80015c4 <OLED_ShowFloat+0x2c4>)
 800157a:	fb82 1203 	smull	r1, r2, r2, r3
 800157e:	1092      	asrs	r2, r2, #2
 8001580:	17db      	asrs	r3, r3, #31
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	653b      	str	r3, [r7, #80]	@ 0x50
        for(int i=decimals-1; i>=0; i--) {
 8001586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001588:	3b01      	subs	r3, #1
 800158a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800158c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800158e:	2b00      	cmp	r3, #0
 8001590:	dada      	bge.n	8001548 <OLED_ShowFloat+0x248>
        }
        idx += decimals;
 8001592:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8001596:	797b      	ldrb	r3, [r7, #5]
 8001598:	4413      	add	r3, r2
 800159a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }

    str_buf[idx] = '\0';
 800159e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80015a2:	3358      	adds	r3, #88	@ 0x58
 80015a4:	443b      	add	r3, r7
 80015a6:	2200      	movs	r2, #0
 80015a8:	f803 2c40 	strb.w	r2, [r3, #-64]

    // 调试输出（可选）
    // printf("Formatted: %s\n", str_buf);

    OLED_ShowString(x, y, str_buf, size);
 80015ac:	793b      	ldrb	r3, [r7, #4]
 80015ae:	f107 0218 	add.w	r2, r7, #24
 80015b2:	79b9      	ldrb	r1, [r7, #6]
 80015b4:	79f8      	ldrb	r0, [r7, #7]
 80015b6:	f7ff fdf7 	bl	80011a8 <OLED_ShowString>
 80015ba:	e000      	b.n	80015be <OLED_ShowFloat+0x2be>
    if (x >= 128 || y >= 8) return;
 80015bc:	bf00      	nop
}
 80015be:	375c      	adds	r7, #92	@ 0x5c
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd90      	pop	{r4, r7, pc}
 80015c4:	66666667 	.word	0x66666667

080015c8 <OLED_DrawPoint>:
void OLED_DrawPoint(uint8_t x, uint8_t y, uint8_t color) {
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	71fb      	strb	r3, [r7, #7]
 80015d2:	460b      	mov	r3, r1
 80015d4:	71bb      	strb	r3, [r7, #6]
 80015d6:	4613      	mov	r3, r2
 80015d8:	717b      	strb	r3, [r7, #5]
    if (x >= 128 || y >= 64) return; // 边界检查，防止越界访问
 80015da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	db1f      	blt.n	8001622 <OLED_DrawPoint+0x5a>
 80015e2:	79bb      	ldrb	r3, [r7, #6]
 80015e4:	2b3f      	cmp	r3, #63	@ 0x3f
 80015e6:	d81c      	bhi.n	8001622 <OLED_DrawPoint+0x5a>

    uint8_t page = y / 8; // 计算页号（每页 8 行）
 80015e8:	79bb      	ldrb	r3, [r7, #6]
 80015ea:	08db      	lsrs	r3, r3, #3
 80015ec:	73fb      	strb	r3, [r7, #15]
    uint8_t bit = y % 8;  // 计算该点在页内的具体位
 80015ee:	79bb      	ldrb	r3, [r7, #6]
 80015f0:	f003 0307 	and.w	r3, r3, #7
 80015f4:	73bb      	strb	r3, [r7, #14]

    oled_buffer[page * 128 + x] |= (1 << bit); // 点亮
 80015f6:	7bfb      	ldrb	r3, [r7, #15]
 80015f8:	01da      	lsls	r2, r3, #7
 80015fa:	79fb      	ldrb	r3, [r7, #7]
 80015fc:	4413      	add	r3, r2
 80015fe:	4a0c      	ldr	r2, [pc, #48]	@ (8001630 <OLED_DrawPoint+0x68>)
 8001600:	5cd3      	ldrb	r3, [r2, r3]
 8001602:	b25a      	sxtb	r2, r3
 8001604:	7bbb      	ldrb	r3, [r7, #14]
 8001606:	2101      	movs	r1, #1
 8001608:	fa01 f303 	lsl.w	r3, r1, r3
 800160c:	b25b      	sxtb	r3, r3
 800160e:	4313      	orrs	r3, r2
 8001610:	b259      	sxtb	r1, r3
 8001612:	7bfb      	ldrb	r3, [r7, #15]
 8001614:	01da      	lsls	r2, r3, #7
 8001616:	79fb      	ldrb	r3, [r7, #7]
 8001618:	4413      	add	r3, r2
 800161a:	b2c9      	uxtb	r1, r1
 800161c:	4a04      	ldr	r2, [pc, #16]	@ (8001630 <OLED_DrawPoint+0x68>)
 800161e:	54d1      	strb	r1, [r2, r3]
 8001620:	e000      	b.n	8001624 <OLED_DrawPoint+0x5c>
    if (x >= 128 || y >= 64) return; // 边界检查，防止越界访问
 8001622:	bf00      	nop

}
 8001624:	3714      	adds	r7, #20
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	200001e0 	.word	0x200001e0

08001634 <OLED_DrawLine>:

void OLED_DrawLine(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t color) {
 8001634:	b590      	push	{r4, r7, lr}
 8001636:	b089      	sub	sp, #36	@ 0x24
 8001638:	af00      	add	r7, sp, #0
 800163a:	4604      	mov	r4, r0
 800163c:	4608      	mov	r0, r1
 800163e:	4611      	mov	r1, r2
 8001640:	461a      	mov	r2, r3
 8001642:	4623      	mov	r3, r4
 8001644:	71fb      	strb	r3, [r7, #7]
 8001646:	4603      	mov	r3, r0
 8001648:	71bb      	strb	r3, [r7, #6]
 800164a:	460b      	mov	r3, r1
 800164c:	717b      	strb	r3, [r7, #5]
 800164e:	4613      	mov	r3, r2
 8001650:	713b      	strb	r3, [r7, #4]
    if (x0 >= 128 || y0 >= 64 || x1 >= 128 || y1 >= 64) return; // 边界检查
 8001652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001656:	2b00      	cmp	r3, #0
 8001658:	f2c0 80b9 	blt.w	80017ce <OLED_DrawLine+0x19a>
 800165c:	79bb      	ldrb	r3, [r7, #6]
 800165e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001660:	f200 80b5 	bhi.w	80017ce <OLED_DrawLine+0x19a>
 8001664:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001668:	2b00      	cmp	r3, #0
 800166a:	f2c0 80b0 	blt.w	80017ce <OLED_DrawLine+0x19a>
 800166e:	793b      	ldrb	r3, [r7, #4]
 8001670:	2b3f      	cmp	r3, #63	@ 0x3f
 8001672:	f200 80ac 	bhi.w	80017ce <OLED_DrawLine+0x19a>

    if (x0 == x1) { // 垂直线
 8001676:	79fa      	ldrb	r2, [r7, #7]
 8001678:	797b      	ldrb	r3, [r7, #5]
 800167a:	429a      	cmp	r2, r3
 800167c:	d124      	bne.n	80016c8 <OLED_DrawLine+0x94>
        int16_t sy = (y0 < y1) ? 1 : -1;
 800167e:	79ba      	ldrb	r2, [r7, #6]
 8001680:	793b      	ldrb	r3, [r7, #4]
 8001682:	429a      	cmp	r2, r3
 8001684:	d201      	bcs.n	800168a <OLED_DrawLine+0x56>
 8001686:	2301      	movs	r3, #1
 8001688:	e001      	b.n	800168e <OLED_DrawLine+0x5a>
 800168a:	f04f 33ff 	mov.w	r3, #4294967295
 800168e:	813b      	strh	r3, [r7, #8]
        for (int y = y0; y != y1; y += sy) OLED_DrawPoint(x0, y, color);
 8001690:	79bb      	ldrb	r3, [r7, #6]
 8001692:	61fb      	str	r3, [r7, #28]
 8001694:	e00c      	b.n	80016b0 <OLED_DrawLine+0x7c>
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	b2d9      	uxtb	r1, r3
 800169a:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff ff91 	bl	80015c8 <OLED_DrawPoint>
 80016a6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80016aa:	69fa      	ldr	r2, [r7, #28]
 80016ac:	4413      	add	r3, r2
 80016ae:	61fb      	str	r3, [r7, #28]
 80016b0:	793b      	ldrb	r3, [r7, #4]
 80016b2:	69fa      	ldr	r2, [r7, #28]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d1ee      	bne.n	8001696 <OLED_DrawLine+0x62>
        OLED_DrawPoint(x1, y1, color);
 80016b8:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80016bc:	7939      	ldrb	r1, [r7, #4]
 80016be:	797b      	ldrb	r3, [r7, #5]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff ff81 	bl	80015c8 <OLED_DrawPoint>
        return;
 80016c6:	e085      	b.n	80017d4 <OLED_DrawLine+0x1a0>
    }

    if (y0 == y1) { // 水平线
 80016c8:	79ba      	ldrb	r2, [r7, #6]
 80016ca:	793b      	ldrb	r3, [r7, #4]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d124      	bne.n	800171a <OLED_DrawLine+0xe6>
        int16_t sx = (x0 < x1) ? 1 : -1;
 80016d0:	79fa      	ldrb	r2, [r7, #7]
 80016d2:	797b      	ldrb	r3, [r7, #5]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d201      	bcs.n	80016dc <OLED_DrawLine+0xa8>
 80016d8:	2301      	movs	r3, #1
 80016da:	e001      	b.n	80016e0 <OLED_DrawLine+0xac>
 80016dc:	f04f 33ff 	mov.w	r3, #4294967295
 80016e0:	817b      	strh	r3, [r7, #10]
        for (int x = x0; x != x1; x += sx) OLED_DrawPoint(x, y0, color);
 80016e2:	79fb      	ldrb	r3, [r7, #7]
 80016e4:	61bb      	str	r3, [r7, #24]
 80016e6:	e00c      	b.n	8001702 <OLED_DrawLine+0xce>
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80016f0:	79b9      	ldrb	r1, [r7, #6]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff ff68 	bl	80015c8 <OLED_DrawPoint>
 80016f8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	4413      	add	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
 8001702:	797b      	ldrb	r3, [r7, #5]
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	429a      	cmp	r2, r3
 8001708:	d1ee      	bne.n	80016e8 <OLED_DrawLine+0xb4>
        OLED_DrawPoint(x1, y1, color);
 800170a:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800170e:	7939      	ldrb	r1, [r7, #4]
 8001710:	797b      	ldrb	r3, [r7, #5]
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff ff58 	bl	80015c8 <OLED_DrawPoint>
        return;
 8001718:	e05c      	b.n	80017d4 <OLED_DrawLine+0x1a0>
    }

    int16_t dx = abs(x1 - x0), dy = abs(y1 - y0);
 800171a:	797a      	ldrb	r2, [r7, #5]
 800171c:	79fb      	ldrb	r3, [r7, #7]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	2b00      	cmp	r3, #0
 8001722:	bfb8      	it	lt
 8001724:	425b      	neglt	r3, r3
 8001726:	82bb      	strh	r3, [r7, #20]
 8001728:	793a      	ldrb	r2, [r7, #4]
 800172a:	79bb      	ldrb	r3, [r7, #6]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b00      	cmp	r3, #0
 8001730:	bfb8      	it	lt
 8001732:	425b      	neglt	r3, r3
 8001734:	827b      	strh	r3, [r7, #18]
    int16_t sx = (x0 < x1) ? 1 : -1, sy = (y0 < y1) ? 1 : -1;
 8001736:	79fa      	ldrb	r2, [r7, #7]
 8001738:	797b      	ldrb	r3, [r7, #5]
 800173a:	429a      	cmp	r2, r3
 800173c:	d201      	bcs.n	8001742 <OLED_DrawLine+0x10e>
 800173e:	2301      	movs	r3, #1
 8001740:	e001      	b.n	8001746 <OLED_DrawLine+0x112>
 8001742:	f04f 33ff 	mov.w	r3, #4294967295
 8001746:	823b      	strh	r3, [r7, #16]
 8001748:	79ba      	ldrb	r2, [r7, #6]
 800174a:	793b      	ldrb	r3, [r7, #4]
 800174c:	429a      	cmp	r2, r3
 800174e:	d201      	bcs.n	8001754 <OLED_DrawLine+0x120>
 8001750:	2301      	movs	r3, #1
 8001752:	e001      	b.n	8001758 <OLED_DrawLine+0x124>
 8001754:	f04f 33ff 	mov.w	r3, #4294967295
 8001758:	81fb      	strh	r3, [r7, #14]
    int16_t err = dx - dy;
 800175a:	8aba      	ldrh	r2, [r7, #20]
 800175c:	8a7b      	ldrh	r3, [r7, #18]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	b29b      	uxth	r3, r3
 8001762:	82fb      	strh	r3, [r7, #22]

    while (1) {
        OLED_DrawPoint(x0, y0, color);
 8001764:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001768:	79b9      	ldrb	r1, [r7, #6]
 800176a:	79fb      	ldrb	r3, [r7, #7]
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff ff2b 	bl	80015c8 <OLED_DrawPoint>

        if (x0 == x1 && y0 == y1) break;
 8001772:	79fa      	ldrb	r2, [r7, #7]
 8001774:	797b      	ldrb	r3, [r7, #5]
 8001776:	429a      	cmp	r2, r3
 8001778:	d103      	bne.n	8001782 <OLED_DrawLine+0x14e>
 800177a:	79ba      	ldrb	r2, [r7, #6]
 800177c:	793b      	ldrb	r3, [r7, #4]
 800177e:	429a      	cmp	r2, r3
 8001780:	d027      	beq.n	80017d2 <OLED_DrawLine+0x19e>

        int16_t e2 = 2 * err;
 8001782:	8afb      	ldrh	r3, [r7, #22]
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	b29b      	uxth	r3, r3
 8001788:	81bb      	strh	r3, [r7, #12]
        if (e2 > -dy) { err -= dy; x0 += sx; }
 800178a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800178e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001792:	425b      	negs	r3, r3
 8001794:	429a      	cmp	r2, r3
 8001796:	dd09      	ble.n	80017ac <OLED_DrawLine+0x178>
 8001798:	8afa      	ldrh	r2, [r7, #22]
 800179a:	8a7b      	ldrh	r3, [r7, #18]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	b29b      	uxth	r3, r3
 80017a0:	82fb      	strh	r3, [r7, #22]
 80017a2:	8a3b      	ldrh	r3, [r7, #16]
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	4413      	add	r3, r2
 80017aa:	71fb      	strb	r3, [r7, #7]
        if (e2 < dx) { err += dx; y0 += sy; }
 80017ac:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80017b0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	dad5      	bge.n	8001764 <OLED_DrawLine+0x130>
 80017b8:	8afa      	ldrh	r2, [r7, #22]
 80017ba:	8abb      	ldrh	r3, [r7, #20]
 80017bc:	4413      	add	r3, r2
 80017be:	b29b      	uxth	r3, r3
 80017c0:	82fb      	strh	r3, [r7, #22]
 80017c2:	89fb      	ldrh	r3, [r7, #14]
 80017c4:	b2da      	uxtb	r2, r3
 80017c6:	79bb      	ldrb	r3, [r7, #6]
 80017c8:	4413      	add	r3, r2
 80017ca:	71bb      	strb	r3, [r7, #6]
    while (1) {
 80017cc:	e7ca      	b.n	8001764 <OLED_DrawLine+0x130>
    if (x0 >= 128 || y0 >= 64 || x1 >= 128 || y1 >= 64) return; // 边界检查
 80017ce:	bf00      	nop
 80017d0:	e000      	b.n	80017d4 <OLED_DrawLine+0x1a0>
        if (x0 == x1 && y0 == y1) break;
 80017d2:	bf00      	nop
    }
}
 80017d4:	3724      	adds	r7, #36	@ 0x24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd90      	pop	{r4, r7, pc}
	...

080017dc <OLED_Update_Screen>:


void OLED_Update_Screen(void) {
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
    for (uint8_t page = 0; page < 8; page++) {
 80017e2:	2300      	movs	r3, #0
 80017e4:	71fb      	strb	r3, [r7, #7]
 80017e6:	e01a      	b.n	800181e <OLED_Update_Screen+0x42>
        OLED_Set_Pos(0, page); // 设置页地址
 80017e8:	79fb      	ldrb	r3, [r7, #7]
 80017ea:	4619      	mov	r1, r3
 80017ec:	2000      	movs	r0, #0
 80017ee:	f7ff fbed 	bl	8000fcc <OLED_Set_Pos>
        for (uint8_t col = 0; col < 128; col++) {
 80017f2:	2300      	movs	r3, #0
 80017f4:	71bb      	strb	r3, [r7, #6]
 80017f6:	e00b      	b.n	8001810 <OLED_Update_Screen+0x34>
            OLED_Write_Dat(oled_buffer[page * 128 + col]); // 逐列写入数据
 80017f8:	79fb      	ldrb	r3, [r7, #7]
 80017fa:	01da      	lsls	r2, r3, #7
 80017fc:	79bb      	ldrb	r3, [r7, #6]
 80017fe:	4413      	add	r3, r2
 8001800:	4a0b      	ldr	r2, [pc, #44]	@ (8001830 <OLED_Update_Screen+0x54>)
 8001802:	5cd3      	ldrb	r3, [r2, r3]
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff fbc7 	bl	8000f98 <OLED_Write_Dat>
        for (uint8_t col = 0; col < 128; col++) {
 800180a:	79bb      	ldrb	r3, [r7, #6]
 800180c:	3301      	adds	r3, #1
 800180e:	71bb      	strb	r3, [r7, #6]
 8001810:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001814:	2b00      	cmp	r3, #0
 8001816:	daef      	bge.n	80017f8 <OLED_Update_Screen+0x1c>
    for (uint8_t page = 0; page < 8; page++) {
 8001818:	79fb      	ldrb	r3, [r7, #7]
 800181a:	3301      	adds	r3, #1
 800181c:	71fb      	strb	r3, [r7, #7]
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	2b07      	cmp	r3, #7
 8001822:	d9e1      	bls.n	80017e8 <OLED_Update_Screen+0xc>
        }
    }
}
 8001824:	bf00      	nop
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	200001e0 	.word	0x200001e0

08001834 <OLED_Clear_wave>:
    }
}



void OLED_Clear_wave(void) {
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
    for (uint8_t page = 0; page < 8; page++) {
 800183a:	2300      	movs	r3, #0
 800183c:	71fb      	strb	r3, [r7, #7]
 800183e:	e017      	b.n	8001870 <OLED_Clear_wave+0x3c>
        OLED_Set_Pos(0, page); // 设置页地址
 8001840:	79fb      	ldrb	r3, [r7, #7]
 8001842:	4619      	mov	r1, r3
 8001844:	2000      	movs	r0, #0
 8001846:	f7ff fbc1 	bl	8000fcc <OLED_Set_Pos>
        for (uint8_t col = 0; col < 92; col++) {
 800184a:	2300      	movs	r3, #0
 800184c:	71bb      	strb	r3, [r7, #6]
 800184e:	e009      	b.n	8001864 <OLED_Clear_wave+0x30>
        	oled_buffer[page * 128 + col]=0;
 8001850:	79fb      	ldrb	r3, [r7, #7]
 8001852:	01da      	lsls	r2, r3, #7
 8001854:	79bb      	ldrb	r3, [r7, #6]
 8001856:	4413      	add	r3, r2
 8001858:	4a09      	ldr	r2, [pc, #36]	@ (8001880 <OLED_Clear_wave+0x4c>)
 800185a:	2100      	movs	r1, #0
 800185c:	54d1      	strb	r1, [r2, r3]
        for (uint8_t col = 0; col < 92; col++) {
 800185e:	79bb      	ldrb	r3, [r7, #6]
 8001860:	3301      	adds	r3, #1
 8001862:	71bb      	strb	r3, [r7, #6]
 8001864:	79bb      	ldrb	r3, [r7, #6]
 8001866:	2b5b      	cmp	r3, #91	@ 0x5b
 8001868:	d9f2      	bls.n	8001850 <OLED_Clear_wave+0x1c>
    for (uint8_t page = 0; page < 8; page++) {
 800186a:	79fb      	ldrb	r3, [r7, #7]
 800186c:	3301      	adds	r3, #1
 800186e:	71fb      	strb	r3, [r7, #7]
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	2b07      	cmp	r3, #7
 8001874:	d9e4      	bls.n	8001840 <OLED_Clear_wave+0xc>
        }
    }
}
 8001876:	bf00      	nop
 8001878:	bf00      	nop
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	200001e0 	.word	0x200001e0

08001884 <OLED_Clear_num_1>:
        for (uint8_t col = 93; col < 128; col++) {
            OLED_Write_Dat(oled_buffer[page * 128 + col]);
        }
    }
}
void OLED_Clear_num_1(void) {
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
	    uint8_t page=1;
 800188a:	2301      	movs	r3, #1
 800188c:	71bb      	strb	r3, [r7, #6]
        OLED_Set_Pos(93, page);
 800188e:	79bb      	ldrb	r3, [r7, #6]
 8001890:	4619      	mov	r1, r3
 8001892:	205d      	movs	r0, #93	@ 0x5d
 8001894:	f7ff fb9a 	bl	8000fcc <OLED_Set_Pos>
        for (uint8_t col = 93; col < 128; col++)
 8001898:	235d      	movs	r3, #93	@ 0x5d
 800189a:	71fb      	strb	r3, [r7, #7]
 800189c:	e009      	b.n	80018b2 <OLED_Clear_num_1+0x2e>
        {
        	oled_buffer[page * 128 + col]=0;
 800189e:	79bb      	ldrb	r3, [r7, #6]
 80018a0:	01da      	lsls	r2, r3, #7
 80018a2:	79fb      	ldrb	r3, [r7, #7]
 80018a4:	4413      	add	r3, r2
 80018a6:	4a07      	ldr	r2, [pc, #28]	@ (80018c4 <OLED_Clear_num_1+0x40>)
 80018a8:	2100      	movs	r1, #0
 80018aa:	54d1      	strb	r1, [r2, r3]
        for (uint8_t col = 93; col < 128; col++)
 80018ac:	79fb      	ldrb	r3, [r7, #7]
 80018ae:	3301      	adds	r3, #1
 80018b0:	71fb      	strb	r3, [r7, #7]
 80018b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	daf1      	bge.n	800189e <OLED_Clear_num_1+0x1a>
        }
}
 80018ba:	bf00      	nop
 80018bc:	bf00      	nop
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	200001e0 	.word	0x200001e0

080018c8 <OLED_Clear_num_2>:
void OLED_Clear_num_2(void) {
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
	    uint8_t page=2;
 80018ce:	2302      	movs	r3, #2
 80018d0:	71bb      	strb	r3, [r7, #6]
        OLED_Set_Pos(93, page);
 80018d2:	79bb      	ldrb	r3, [r7, #6]
 80018d4:	4619      	mov	r1, r3
 80018d6:	205d      	movs	r0, #93	@ 0x5d
 80018d8:	f7ff fb78 	bl	8000fcc <OLED_Set_Pos>
        for (uint8_t col = 93; col < 128; col++)
 80018dc:	235d      	movs	r3, #93	@ 0x5d
 80018de:	71fb      	strb	r3, [r7, #7]
 80018e0:	e009      	b.n	80018f6 <OLED_Clear_num_2+0x2e>
        {
        	oled_buffer[page * 128 + col]=0;
 80018e2:	79bb      	ldrb	r3, [r7, #6]
 80018e4:	01da      	lsls	r2, r3, #7
 80018e6:	79fb      	ldrb	r3, [r7, #7]
 80018e8:	4413      	add	r3, r2
 80018ea:	4a07      	ldr	r2, [pc, #28]	@ (8001908 <OLED_Clear_num_2+0x40>)
 80018ec:	2100      	movs	r1, #0
 80018ee:	54d1      	strb	r1, [r2, r3]
        for (uint8_t col = 93; col < 128; col++)
 80018f0:	79fb      	ldrb	r3, [r7, #7]
 80018f2:	3301      	adds	r3, #1
 80018f4:	71fb      	strb	r3, [r7, #7]
 80018f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	daf1      	bge.n	80018e2 <OLED_Clear_num_2+0x1a>
        }
}
 80018fe:	bf00      	nop
 8001900:	bf00      	nop
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	200001e0 	.word	0x200001e0

0800190c <OLED_Clear_num_3>:
void OLED_Clear_num_3(void) {
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
	    uint8_t page=6;
 8001912:	2306      	movs	r3, #6
 8001914:	71bb      	strb	r3, [r7, #6]
        OLED_Set_Pos(93, page);
 8001916:	79bb      	ldrb	r3, [r7, #6]
 8001918:	4619      	mov	r1, r3
 800191a:	205d      	movs	r0, #93	@ 0x5d
 800191c:	f7ff fb56 	bl	8000fcc <OLED_Set_Pos>
        for (uint8_t col = 93; col < 128; col++)
 8001920:	235d      	movs	r3, #93	@ 0x5d
 8001922:	71fb      	strb	r3, [r7, #7]
 8001924:	e009      	b.n	800193a <OLED_Clear_num_3+0x2e>
        {
        	oled_buffer[page * 128 + col]=0;
 8001926:	79bb      	ldrb	r3, [r7, #6]
 8001928:	01da      	lsls	r2, r3, #7
 800192a:	79fb      	ldrb	r3, [r7, #7]
 800192c:	4413      	add	r3, r2
 800192e:	4a07      	ldr	r2, [pc, #28]	@ (800194c <OLED_Clear_num_3+0x40>)
 8001930:	2100      	movs	r1, #0
 8001932:	54d1      	strb	r1, [r2, r3]
        for (uint8_t col = 93; col < 128; col++)
 8001934:	79fb      	ldrb	r3, [r7, #7]
 8001936:	3301      	adds	r3, #1
 8001938:	71fb      	strb	r3, [r7, #7]
 800193a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193e:	2b00      	cmp	r3, #0
 8001940:	daf1      	bge.n	8001926 <OLED_Clear_num_3+0x1a>
        }
}
 8001942:	bf00      	nop
 8001944:	bf00      	nop
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	200001e0 	.word	0x200001e0

08001950 <OLED_Clear_num_4>:

void OLED_Clear_num_4(void) {
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
	    uint8_t page=7;
 8001956:	2307      	movs	r3, #7
 8001958:	71bb      	strb	r3, [r7, #6]
        OLED_Set_Pos(93, page);
 800195a:	79bb      	ldrb	r3, [r7, #6]
 800195c:	4619      	mov	r1, r3
 800195e:	205d      	movs	r0, #93	@ 0x5d
 8001960:	f7ff fb34 	bl	8000fcc <OLED_Set_Pos>
        for (uint8_t col = 93; col < 128; col++)
 8001964:	235d      	movs	r3, #93	@ 0x5d
 8001966:	71fb      	strb	r3, [r7, #7]
 8001968:	e009      	b.n	800197e <OLED_Clear_num_4+0x2e>
        {
        	oled_buffer[page * 128 + col]=0;
 800196a:	79bb      	ldrb	r3, [r7, #6]
 800196c:	01da      	lsls	r2, r3, #7
 800196e:	79fb      	ldrb	r3, [r7, #7]
 8001970:	4413      	add	r3, r2
 8001972:	4a07      	ldr	r2, [pc, #28]	@ (8001990 <OLED_Clear_num_4+0x40>)
 8001974:	2100      	movs	r1, #0
 8001976:	54d1      	strb	r1, [r2, r3]
        for (uint8_t col = 93; col < 128; col++)
 8001978:	79fb      	ldrb	r3, [r7, #7]
 800197a:	3301      	adds	r3, #1
 800197c:	71fb      	strb	r3, [r7, #7]
 800197e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001982:	2b00      	cmp	r3, #0
 8001984:	daf1      	bge.n	800196a <OLED_Clear_num_4+0x1a>
        }
}
 8001986:	bf00      	nop
 8001988:	bf00      	nop
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	200001e0 	.word	0x200001e0

08001994 <OLED_Init>:


void OLED_Init(void) {
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
    HAL_Delay(500);
 8001998:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800199c:	f002 f808 	bl	80039b0 <HAL_Delay>

    OLED_Write_Cmd(0xAE); // display off
 80019a0:	20ae      	movs	r0, #174	@ 0xae
 80019a2:	f7ff fadf 	bl	8000f64 <OLED_Write_Cmd>
    OLED_Write_Cmd(0x00); // set low column address
 80019a6:	2000      	movs	r0, #0
 80019a8:	f7ff fadc 	bl	8000f64 <OLED_Write_Cmd>
    OLED_Write_Cmd(0x10); // set high column address
 80019ac:	2010      	movs	r0, #16
 80019ae:	f7ff fad9 	bl	8000f64 <OLED_Write_Cmd>
    OLED_Write_Cmd(0x40); // set start line address
 80019b2:	2040      	movs	r0, #64	@ 0x40
 80019b4:	f7ff fad6 	bl	8000f64 <OLED_Write_Cmd>
    OLED_Write_Cmd(0x81); // contract control
 80019b8:	2081      	movs	r0, #129	@ 0x81
 80019ba:	f7ff fad3 	bl	8000f64 <OLED_Write_Cmd>
    OLED_Write_Cmd(0xFF); // contrast level
 80019be:	20ff      	movs	r0, #255	@ 0xff
 80019c0:	f7ff fad0 	bl	8000f64 <OLED_Write_Cmd>
    OLED_Write_Cmd(0xA1); // set segment remap
 80019c4:	20a1      	movs	r0, #161	@ 0xa1
 80019c6:	f7ff facd 	bl	8000f64 <OLED_Write_Cmd>
    OLED_Write_Cmd(0xC8); // Com scan direction
 80019ca:	20c8      	movs	r0, #200	@ 0xc8
 80019cc:	f7ff faca 	bl	8000f64 <OLED_Write_Cmd>
    OLED_Write_Cmd(0xA6); // normal / reverse
 80019d0:	20a6      	movs	r0, #166	@ 0xa6
 80019d2:	f7ff fac7 	bl	8000f64 <OLED_Write_Cmd>
    OLED_Write_Cmd(0xA8); // set multiplex ratio
 80019d6:	20a8      	movs	r0, #168	@ 0xa8
 80019d8:	f7ff fac4 	bl	8000f64 <OLED_Write_Cmd>
    OLED_Write_Cmd(0x3F); // duty = 1/64
 80019dc:	203f      	movs	r0, #63	@ 0x3f
 80019de:	f7ff fac1 	bl	8000f64 <OLED_Write_Cmd>
    OLED_Write_Cmd(0xD3); // set display offset
 80019e2:	20d3      	movs	r0, #211	@ 0xd3
 80019e4:	f7ff fabe 	bl	8000f64 <OLED_Write_Cmd>
    OLED_Write_Cmd(0x00);
 80019e8:	2000      	movs	r0, #0
 80019ea:	f7ff fabb 	bl	8000f64 <OLED_Write_Cmd>
    OLED_Write_Cmd(0xD5); // set osc division
 80019ee:	20d5      	movs	r0, #213	@ 0xd5
 80019f0:	f7ff fab8 	bl	8000f64 <OLED_Write_Cmd>
    OLED_Write_Cmd(0x80);
 80019f4:	2080      	movs	r0, #128	@ 0x80
 80019f6:	f7ff fab5 	bl	8000f64 <OLED_Write_Cmd>
    OLED_Write_Cmd(0xD9); // Set Pre-Charge Period
 80019fa:	20d9      	movs	r0, #217	@ 0xd9
 80019fc:	f7ff fab2 	bl	8000f64 <OLED_Write_Cmd>
    OLED_Write_Cmd(0xF1);
 8001a00:	20f1      	movs	r0, #241	@ 0xf1
 8001a02:	f7ff faaf 	bl	8000f64 <OLED_Write_Cmd>
    OLED_Write_Cmd(0xDA); // set com pin configuartion
 8001a06:	20da      	movs	r0, #218	@ 0xda
 8001a08:	f7ff faac 	bl	8000f64 <OLED_Write_Cmd>
    OLED_Write_Cmd(0x12);
 8001a0c:	2012      	movs	r0, #18
 8001a0e:	f7ff faa9 	bl	8000f64 <OLED_Write_Cmd>
    OLED_Write_Cmd(0xDB); // set Vcomh
 8001a12:	20db      	movs	r0, #219	@ 0xdb
 8001a14:	f7ff faa6 	bl	8000f64 <OLED_Write_Cmd>
    OLED_Write_Cmd(0x40);
 8001a18:	2040      	movs	r0, #64	@ 0x40
 8001a1a:	f7ff faa3 	bl	8000f64 <OLED_Write_Cmd>
    OLED_Write_Cmd(0x20);
 8001a1e:	2020      	movs	r0, #32
 8001a20:	f7ff faa0 	bl	8000f64 <OLED_Write_Cmd>
    OLED_Write_Cmd(0x02);
 8001a24:	2002      	movs	r0, #2
 8001a26:	f7ff fa9d 	bl	8000f64 <OLED_Write_Cmd>
    OLED_Write_Cmd(0x8D); // set charge pump enable
 8001a2a:	208d      	movs	r0, #141	@ 0x8d
 8001a2c:	f7ff fa9a 	bl	8000f64 <OLED_Write_Cmd>
    OLED_Write_Cmd(0x14);
 8001a30:	2014      	movs	r0, #20
 8001a32:	f7ff fa97 	bl	8000f64 <OLED_Write_Cmd>
    OLED_Write_Cmd(0xA4);
 8001a36:	20a4      	movs	r0, #164	@ 0xa4
 8001a38:	f7ff fa94 	bl	8000f64 <OLED_Write_Cmd>
    OLED_Write_Cmd(0xA6);
 8001a3c:	20a6      	movs	r0, #166	@ 0xa6
 8001a3e:	f7ff fa91 	bl	8000f64 <OLED_Write_Cmd>
    OLED_Write_Cmd(0xAF); // turn on oled panel
 8001a42:	20af      	movs	r0, #175	@ 0xaf
 8001a44:	f7ff fa8e 	bl	8000f64 <OLED_Write_Cmd>

    OLED_Clear();
 8001a48:	f7ff fae8 	bl	800101c <OLED_Clear>
    OLED_Set_Pos(0, 0);
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	2000      	movs	r0, #0
 8001a50:	f7ff fabc 	bl	8000fcc <OLED_Set_Pos>
}
 8001a54:	bf00      	nop
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <OLED_ShowCHinese>:

void OLED_ShowCHinese(uint8_t x, uint8_t y, uint8_t no)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	71fb      	strb	r3, [r7, #7]
 8001a62:	460b      	mov	r3, r1
 8001a64:	71bb      	strb	r3, [r7, #6]
 8001a66:	4613      	mov	r3, r2
 8001a68:	717b      	strb	r3, [r7, #5]
    uint8_t t;
    // 汉字占两页（16x16像素）
    for (t = 0; t < 16; t++) {
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	73fb      	strb	r3, [r7, #15]
 8001a6e:	e02c      	b.n	8001aca <OLED_ShowCHinese+0x72>
        if (x + t < 128) {
 8001a70:	79fa      	ldrb	r2, [r7, #7]
 8001a72:	7bfb      	ldrb	r3, [r7, #15]
 8001a74:	4413      	add	r3, r2
 8001a76:	2b7f      	cmp	r3, #127	@ 0x7f
 8001a78:	dc24      	bgt.n	8001ac4 <OLED_ShowCHinese+0x6c>
            // 写入上半部分（页y）
            oled_buffer[y * 128 + x + t] = Hzk[2 * no][t];
 8001a7a:	797b      	ldrb	r3, [r7, #5]
 8001a7c:	0059      	lsls	r1, r3, #1
 8001a7e:	7bfa      	ldrb	r2, [r7, #15]
 8001a80:	79bb      	ldrb	r3, [r7, #6]
 8001a82:	01d8      	lsls	r0, r3, #7
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	4418      	add	r0, r3
 8001a88:	7bfb      	ldrb	r3, [r7, #15]
 8001a8a:	4403      	add	r3, r0
 8001a8c:	4814      	ldr	r0, [pc, #80]	@ (8001ae0 <OLED_ShowCHinese+0x88>)
 8001a8e:	0109      	lsls	r1, r1, #4
 8001a90:	4401      	add	r1, r0
 8001a92:	440a      	add	r2, r1
 8001a94:	7811      	ldrb	r1, [r2, #0]
 8001a96:	4a13      	ldr	r2, [pc, #76]	@ (8001ae4 <OLED_ShowCHinese+0x8c>)
 8001a98:	54d1      	strb	r1, [r2, r3]
            // 写入下半部分（页y+1）
            if (y + 1 < 8) {
 8001a9a:	79bb      	ldrb	r3, [r7, #6]
 8001a9c:	2b06      	cmp	r3, #6
 8001a9e:	d811      	bhi.n	8001ac4 <OLED_ShowCHinese+0x6c>
                oled_buffer[(y + 1) * 128 + x + t] = Hzk[2 * no + 1][t];
 8001aa0:	797b      	ldrb	r3, [r7, #5]
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	1c59      	adds	r1, r3, #1
 8001aa6:	7bfa      	ldrb	r2, [r7, #15]
 8001aa8:	79bb      	ldrb	r3, [r7, #6]
 8001aaa:	3301      	adds	r3, #1
 8001aac:	01d8      	lsls	r0, r3, #7
 8001aae:	79fb      	ldrb	r3, [r7, #7]
 8001ab0:	4418      	add	r0, r3
 8001ab2:	7bfb      	ldrb	r3, [r7, #15]
 8001ab4:	4403      	add	r3, r0
 8001ab6:	480a      	ldr	r0, [pc, #40]	@ (8001ae0 <OLED_ShowCHinese+0x88>)
 8001ab8:	0109      	lsls	r1, r1, #4
 8001aba:	4401      	add	r1, r0
 8001abc:	440a      	add	r2, r1
 8001abe:	7811      	ldrb	r1, [r2, #0]
 8001ac0:	4a08      	ldr	r2, [pc, #32]	@ (8001ae4 <OLED_ShowCHinese+0x8c>)
 8001ac2:	54d1      	strb	r1, [r2, r3]
    for (t = 0; t < 16; t++) {
 8001ac4:	7bfb      	ldrb	r3, [r7, #15]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	73fb      	strb	r3, [r7, #15]
 8001aca:	7bfb      	ldrb	r3, [r7, #15]
 8001acc:	2b0f      	cmp	r3, #15
 8001ace:	d9cf      	bls.n	8001a70 <OLED_ShowCHinese+0x18>
            }
        }
    }
}
 8001ad0:	bf00      	nop
 8001ad2:	bf00      	nop
 8001ad4:	3714      	adds	r7, #20
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	20000000 	.word	0x20000000
 8001ae4:	200001e0 	.word	0x200001e0

08001ae8 <OLED_Load>:

void OLED_Load()
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0

  OLED_ShowCHinese(0, 0, 3);
 8001aec:	2203      	movs	r2, #3
 8001aee:	2100      	movs	r1, #0
 8001af0:	2000      	movs	r0, #0
 8001af2:	f7ff ffb1 	bl	8001a58 <OLED_ShowCHinese>
  OLED_ShowCHinese(17, 0, 4);
 8001af6:	2204      	movs	r2, #4
 8001af8:	2100      	movs	r1, #0
 8001afa:	2011      	movs	r0, #17
 8001afc:	f7ff ffac 	bl	8001a58 <OLED_ShowCHinese>
  OLED_ShowCHinese(33, 0, 5);
 8001b00:	2205      	movs	r2, #5
 8001b02:	2100      	movs	r1, #0
 8001b04:	2021      	movs	r0, #33	@ 0x21
 8001b06:	f7ff ffa7 	bl	8001a58 <OLED_ShowCHinese>
  OLED_ShowCHinese(49, 0, 6);
 8001b0a:	2206      	movs	r2, #6
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	2031      	movs	r0, #49	@ 0x31
 8001b10:	f7ff ffa2 	bl	8001a58 <OLED_ShowCHinese>


  OLED_ShowCHinese(0, 2, 0);
 8001b14:	2200      	movs	r2, #0
 8001b16:	2102      	movs	r1, #2
 8001b18:	2000      	movs	r0, #0
 8001b1a:	f7ff ff9d 	bl	8001a58 <OLED_ShowCHinese>
  OLED_ShowCHinese(17, 2, 1);
 8001b1e:	2201      	movs	r2, #1
 8001b20:	2102      	movs	r1, #2
 8001b22:	2011      	movs	r0, #17
 8001b24:	f7ff ff98 	bl	8001a58 <OLED_ShowCHinese>
  OLED_ShowCHinese(33, 2, 2);
 8001b28:	2202      	movs	r2, #2
 8001b2a:	2102      	movs	r1, #2
 8001b2c:	2021      	movs	r0, #33	@ 0x21
 8001b2e:	f7ff ff93 	bl	8001a58 <OLED_ShowCHinese>

  OLED_ShowString(0, 4, "23211165", 16);
 8001b32:	2310      	movs	r3, #16
 8001b34:	4a10      	ldr	r2, [pc, #64]	@ (8001b78 <OLED_Load+0x90>)
 8001b36:	2104      	movs	r1, #4
 8001b38:	2000      	movs	r0, #0
 8001b3a:	f7ff fb35 	bl	80011a8 <OLED_ShowString>

  OLED_ShowCHinese(0, 6, 7);
 8001b3e:	2207      	movs	r2, #7
 8001b40:	2106      	movs	r1, #6
 8001b42:	2000      	movs	r0, #0
 8001b44:	f7ff ff88 	bl	8001a58 <OLED_ShowCHinese>
  OLED_ShowCHinese(17, 6, 8);
 8001b48:	2208      	movs	r2, #8
 8001b4a:	2106      	movs	r1, #6
 8001b4c:	2011      	movs	r0, #17
 8001b4e:	f7ff ff83 	bl	8001a58 <OLED_ShowCHinese>
  OLED_ShowCHinese(33, 6, 8);
 8001b52:	2208      	movs	r2, #8
 8001b54:	2106      	movs	r1, #6
 8001b56:	2021      	movs	r0, #33	@ 0x21
 8001b58:	f7ff ff7e 	bl	8001a58 <OLED_ShowCHinese>
  OLED_ShowCHinese(49, 6, 9);
 8001b5c:	2209      	movs	r2, #9
 8001b5e:	2106      	movs	r1, #6
 8001b60:	2031      	movs	r0, #49	@ 0x31
 8001b62:	f7ff ff79 	bl	8001a58 <OLED_ShowCHinese>
  OLED_ShowString(65, 6, "2302", 16);
 8001b66:	2310      	movs	r3, #16
 8001b68:	4a04      	ldr	r2, [pc, #16]	@ (8001b7c <OLED_Load+0x94>)
 8001b6a:	2106      	movs	r1, #6
 8001b6c:	2041      	movs	r0, #65	@ 0x41
 8001b6e:	f7ff fb1b 	bl	80011a8 <OLED_ShowString>



}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	08009588 	.word	0x08009588
 8001b7c:	08009594 	.word	0x08009594

08001b80 <OLED_grid>:

void OLED_grid()
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af02      	add	r7, sp, #8
	OLED_DrawLine(0, 26, 93, 26, 1);
 8001b86:	2301      	movs	r3, #1
 8001b88:	9300      	str	r3, [sp, #0]
 8001b8a:	231a      	movs	r3, #26
 8001b8c:	225d      	movs	r2, #93	@ 0x5d
 8001b8e:	211a      	movs	r1, #26
 8001b90:	2000      	movs	r0, #0
 8001b92:	f7ff fd4f 	bl	8001634 <OLED_DrawLine>

	OLED_DrawLine(93, 0, 93, 3, 1);
 8001b96:	2301      	movs	r3, #1
 8001b98:	9300      	str	r3, [sp, #0]
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	225d      	movs	r2, #93	@ 0x5d
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	205d      	movs	r0, #93	@ 0x5d
 8001ba2:	f7ff fd47 	bl	8001634 <OLED_DrawLine>
	OLED_DrawLine(93, 11, 93, 14, 1);
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	9300      	str	r3, [sp, #0]
 8001baa:	230e      	movs	r3, #14
 8001bac:	225d      	movs	r2, #93	@ 0x5d
 8001bae:	210b      	movs	r1, #11
 8001bb0:	205d      	movs	r0, #93	@ 0x5d
 8001bb2:	f7ff fd3f 	bl	8001634 <OLED_DrawLine>
	OLED_DrawLine(93, 24, 93, 27, 1);
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	9300      	str	r3, [sp, #0]
 8001bba:	231b      	movs	r3, #27
 8001bbc:	225d      	movs	r2, #93	@ 0x5d
 8001bbe:	2118      	movs	r1, #24
 8001bc0:	205d      	movs	r0, #93	@ 0x5d
 8001bc2:	f7ff fd37 	bl	8001634 <OLED_DrawLine>
	OLED_DrawLine(93, 37, 93, 40, 1);
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	9300      	str	r3, [sp, #0]
 8001bca:	2328      	movs	r3, #40	@ 0x28
 8001bcc:	225d      	movs	r2, #93	@ 0x5d
 8001bce:	2125      	movs	r1, #37	@ 0x25
 8001bd0:	205d      	movs	r0, #93	@ 0x5d
 8001bd2:	f7ff fd2f 	bl	8001634 <OLED_DrawLine>
	OLED_DrawLine(93, 49, 93, 52, 1);
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	9300      	str	r3, [sp, #0]
 8001bda:	2334      	movs	r3, #52	@ 0x34
 8001bdc:	225d      	movs	r2, #93	@ 0x5d
 8001bde:	2131      	movs	r1, #49	@ 0x31
 8001be0:	205d      	movs	r0, #93	@ 0x5d
 8001be2:	f7ff fd27 	bl	8001634 <OLED_DrawLine>

	OLED_DrawLine(90, 0, 93, 0, 1);
 8001be6:	2301      	movs	r3, #1
 8001be8:	9300      	str	r3, [sp, #0]
 8001bea:	2300      	movs	r3, #0
 8001bec:	225d      	movs	r2, #93	@ 0x5d
 8001bee:	2100      	movs	r1, #0
 8001bf0:	205a      	movs	r0, #90	@ 0x5a
 8001bf2:	f7ff fd1f 	bl	8001634 <OLED_DrawLine>
	OLED_DrawLine(90, 52, 93, 52, 1);
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	9300      	str	r3, [sp, #0]
 8001bfa:	2334      	movs	r3, #52	@ 0x34
 8001bfc:	225d      	movs	r2, #93	@ 0x5d
 8001bfe:	2134      	movs	r1, #52	@ 0x34
 8001c00:	205a      	movs	r0, #90	@ 0x5a
 8001c02:	f7ff fd17 	bl	8001634 <OLED_DrawLine>

	OLED_DrawLine(0, 11, 0, 14, 1);
 8001c06:	2301      	movs	r3, #1
 8001c08:	9300      	str	r3, [sp, #0]
 8001c0a:	230e      	movs	r3, #14
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	210b      	movs	r1, #11
 8001c10:	2000      	movs	r0, #0
 8001c12:	f7ff fd0f 	bl	8001634 <OLED_DrawLine>
	OLED_DrawLine(0, 24, 0, 27, 1);
 8001c16:	2301      	movs	r3, #1
 8001c18:	9300      	str	r3, [sp, #0]
 8001c1a:	231b      	movs	r3, #27
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	2118      	movs	r1, #24
 8001c20:	2000      	movs	r0, #0
 8001c22:	f7ff fd07 	bl	8001634 <OLED_DrawLine>
	OLED_DrawLine(0, 37, 0, 40, 1);
 8001c26:	2301      	movs	r3, #1
 8001c28:	9300      	str	r3, [sp, #0]
 8001c2a:	2328      	movs	r3, #40	@ 0x28
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	2125      	movs	r1, #37	@ 0x25
 8001c30:	2000      	movs	r0, #0
 8001c32:	f7ff fcff 	bl	8001634 <OLED_DrawLine>
	OLED_DrawLine(0, 49, 0, 52, 1);
 8001c36:	2301      	movs	r3, #1
 8001c38:	9300      	str	r3, [sp, #0]
 8001c3a:	2334      	movs	r3, #52	@ 0x34
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	2131      	movs	r1, #49	@ 0x31
 8001c40:	2000      	movs	r0, #0
 8001c42:	f7ff fcf7 	bl	8001634 <OLED_DrawLine>
	OLED_DrawLine(3, 0, 0, 0, 1);
 8001c46:	2301      	movs	r3, #1
 8001c48:	9300      	str	r3, [sp, #0]
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	2100      	movs	r1, #0
 8001c50:	2003      	movs	r0, #3
 8001c52:	f7ff fcef 	bl	8001634 <OLED_DrawLine>
	OLED_DrawLine(3, 52,0, 52, 1);
 8001c56:	2301      	movs	r3, #1
 8001c58:	9300      	str	r3, [sp, #0]
 8001c5a:	2334      	movs	r3, #52	@ 0x34
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	2134      	movs	r1, #52	@ 0x34
 8001c60:	2003      	movs	r0, #3
 8001c62:	f7ff fce7 	bl	8001634 <OLED_DrawLine>



	OLED_DrawLine(34, 0, 34, 3, 1);
 8001c66:	2301      	movs	r3, #1
 8001c68:	9300      	str	r3, [sp, #0]
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	2222      	movs	r2, #34	@ 0x22
 8001c6e:	2100      	movs	r1, #0
 8001c70:	2022      	movs	r0, #34	@ 0x22
 8001c72:	f7ff fcdf 	bl	8001634 <OLED_DrawLine>
	OLED_DrawLine(34, 11, 34, 14, 1);
 8001c76:	2301      	movs	r3, #1
 8001c78:	9300      	str	r3, [sp, #0]
 8001c7a:	230e      	movs	r3, #14
 8001c7c:	2222      	movs	r2, #34	@ 0x22
 8001c7e:	210b      	movs	r1, #11
 8001c80:	2022      	movs	r0, #34	@ 0x22
 8001c82:	f7ff fcd7 	bl	8001634 <OLED_DrawLine>
	OLED_DrawLine(34, 24, 34, 27, 1);
 8001c86:	2301      	movs	r3, #1
 8001c88:	9300      	str	r3, [sp, #0]
 8001c8a:	231b      	movs	r3, #27
 8001c8c:	2222      	movs	r2, #34	@ 0x22
 8001c8e:	2118      	movs	r1, #24
 8001c90:	2022      	movs	r0, #34	@ 0x22
 8001c92:	f7ff fccf 	bl	8001634 <OLED_DrawLine>
	OLED_DrawLine(34, 37, 34, 40, 1);
 8001c96:	2301      	movs	r3, #1
 8001c98:	9300      	str	r3, [sp, #0]
 8001c9a:	2328      	movs	r3, #40	@ 0x28
 8001c9c:	2222      	movs	r2, #34	@ 0x22
 8001c9e:	2125      	movs	r1, #37	@ 0x25
 8001ca0:	2022      	movs	r0, #34	@ 0x22
 8001ca2:	f7ff fcc7 	bl	8001634 <OLED_DrawLine>
	OLED_DrawLine(34, 49, 34, 52, 1);
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	9300      	str	r3, [sp, #0]
 8001caa:	2334      	movs	r3, #52	@ 0x34
 8001cac:	2222      	movs	r2, #34	@ 0x22
 8001cae:	2131      	movs	r1, #49	@ 0x31
 8001cb0:	2022      	movs	r0, #34	@ 0x22
 8001cb2:	f7ff fcbf 	bl	8001634 <OLED_DrawLine>


	OLED_DrawLine(65, 0, 65, 3, 1);
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	9300      	str	r3, [sp, #0]
 8001cba:	2303      	movs	r3, #3
 8001cbc:	2241      	movs	r2, #65	@ 0x41
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	2041      	movs	r0, #65	@ 0x41
 8001cc2:	f7ff fcb7 	bl	8001634 <OLED_DrawLine>
	OLED_DrawLine(65, 11, 65, 14, 1);
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	9300      	str	r3, [sp, #0]
 8001cca:	230e      	movs	r3, #14
 8001ccc:	2241      	movs	r2, #65	@ 0x41
 8001cce:	210b      	movs	r1, #11
 8001cd0:	2041      	movs	r0, #65	@ 0x41
 8001cd2:	f7ff fcaf 	bl	8001634 <OLED_DrawLine>
	OLED_DrawLine(65, 24, 65, 27, 1);
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	9300      	str	r3, [sp, #0]
 8001cda:	231b      	movs	r3, #27
 8001cdc:	2241      	movs	r2, #65	@ 0x41
 8001cde:	2118      	movs	r1, #24
 8001ce0:	2041      	movs	r0, #65	@ 0x41
 8001ce2:	f7ff fca7 	bl	8001634 <OLED_DrawLine>
	OLED_DrawLine(65, 37, 65, 40, 1);
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	9300      	str	r3, [sp, #0]
 8001cea:	2328      	movs	r3, #40	@ 0x28
 8001cec:	2241      	movs	r2, #65	@ 0x41
 8001cee:	2125      	movs	r1, #37	@ 0x25
 8001cf0:	2041      	movs	r0, #65	@ 0x41
 8001cf2:	f7ff fc9f 	bl	8001634 <OLED_DrawLine>
	OLED_DrawLine(65, 49, 65, 52, 1);
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	9300      	str	r3, [sp, #0]
 8001cfa:	2334      	movs	r3, #52	@ 0x34
 8001cfc:	2241      	movs	r2, #65	@ 0x41
 8001cfe:	2131      	movs	r1, #49	@ 0x31
 8001d00:	2041      	movs	r0, #65	@ 0x41
 8001d02:	f7ff fc97 	bl	8001634 <OLED_DrawLine>
}
 8001d06:	bf00      	nop
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d12:	463b      	mov	r3, r7
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
 8001d1c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001d1e:	4b22      	ldr	r3, [pc, #136]	@ (8001da8 <MX_ADC1_Init+0x9c>)
 8001d20:	4a22      	ldr	r2, [pc, #136]	@ (8001dac <MX_ADC1_Init+0xa0>)
 8001d22:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001d24:	4b20      	ldr	r3, [pc, #128]	@ (8001da8 <MX_ADC1_Init+0x9c>)
 8001d26:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001d2a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d2c:	4b1e      	ldr	r3, [pc, #120]	@ (8001da8 <MX_ADC1_Init+0x9c>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001d32:	4b1d      	ldr	r3, [pc, #116]	@ (8001da8 <MX_ADC1_Init+0x9c>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001d38:	4b1b      	ldr	r3, [pc, #108]	@ (8001da8 <MX_ADC1_Init+0x9c>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d3e:	4b1a      	ldr	r3, [pc, #104]	@ (8001da8 <MX_ADC1_Init+0x9c>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001d46:	4b18      	ldr	r3, [pc, #96]	@ (8001da8 <MX_ADC1_Init+0x9c>)
 8001d48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001d4c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_CC2;
 8001d4e:	4b16      	ldr	r3, [pc, #88]	@ (8001da8 <MX_ADC1_Init+0x9c>)
 8001d50:	f04f 7240 	mov.w	r2, #50331648	@ 0x3000000
 8001d54:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d56:	4b14      	ldr	r3, [pc, #80]	@ (8001da8 <MX_ADC1_Init+0x9c>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001d5c:	4b12      	ldr	r3, [pc, #72]	@ (8001da8 <MX_ADC1_Init+0x9c>)
 8001d5e:	2201      	movs	r2, #1
 8001d60:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001d62:	4b11      	ldr	r3, [pc, #68]	@ (8001da8 <MX_ADC1_Init+0x9c>)
 8001d64:	2201      	movs	r2, #1
 8001d66:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d6a:	4b0f      	ldr	r3, [pc, #60]	@ (8001da8 <MX_ADC1_Init+0x9c>)
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d70:	480d      	ldr	r0, [pc, #52]	@ (8001da8 <MX_ADC1_Init+0x9c>)
 8001d72:	f001 fe41 	bl	80039f8 <HAL_ADC_Init>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001d7c:	f001 f894 	bl	8002ea8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001d80:	2308      	movs	r3, #8
 8001d82:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001d84:	2301      	movs	r3, #1
 8001d86:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d8c:	463b      	mov	r3, r7
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4805      	ldr	r0, [pc, #20]	@ (8001da8 <MX_ADC1_Init+0x9c>)
 8001d92:	f001 ff87 	bl	8003ca4 <HAL_ADC_ConfigChannel>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001d9c:	f001 f884 	bl	8002ea8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001da0:	bf00      	nop
 8001da2:	3710      	adds	r7, #16
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	200005e0 	.word	0x200005e0
 8001dac:	40012000 	.word	0x40012000

08001db0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b08a      	sub	sp, #40	@ 0x28
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db8:	f107 0314 	add.w	r3, r7, #20
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	605a      	str	r2, [r3, #4]
 8001dc2:	609a      	str	r2, [r3, #8]
 8001dc4:	60da      	str	r2, [r3, #12]
 8001dc6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a2f      	ldr	r2, [pc, #188]	@ (8001e8c <HAL_ADC_MspInit+0xdc>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d158      	bne.n	8001e84 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	613b      	str	r3, [r7, #16]
 8001dd6:	4b2e      	ldr	r3, [pc, #184]	@ (8001e90 <HAL_ADC_MspInit+0xe0>)
 8001dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dda:	4a2d      	ldr	r2, [pc, #180]	@ (8001e90 <HAL_ADC_MspInit+0xe0>)
 8001ddc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001de0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001de2:	4b2b      	ldr	r3, [pc, #172]	@ (8001e90 <HAL_ADC_MspInit+0xe0>)
 8001de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001de6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dea:	613b      	str	r3, [r7, #16]
 8001dec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dee:	2300      	movs	r3, #0
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	4b27      	ldr	r3, [pc, #156]	@ (8001e90 <HAL_ADC_MspInit+0xe0>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df6:	4a26      	ldr	r2, [pc, #152]	@ (8001e90 <HAL_ADC_MspInit+0xe0>)
 8001df8:	f043 0302 	orr.w	r3, r3, #2
 8001dfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dfe:	4b24      	ldr	r3, [pc, #144]	@ (8001e90 <HAL_ADC_MspInit+0xe0>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e12:	2300      	movs	r3, #0
 8001e14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e16:	f107 0314 	add.w	r3, r7, #20
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	481d      	ldr	r0, [pc, #116]	@ (8001e94 <HAL_ADC_MspInit+0xe4>)
 8001e1e:	f002 ff1f 	bl	8004c60 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001e22:	4b1d      	ldr	r3, [pc, #116]	@ (8001e98 <HAL_ADC_MspInit+0xe8>)
 8001e24:	4a1d      	ldr	r2, [pc, #116]	@ (8001e9c <HAL_ADC_MspInit+0xec>)
 8001e26:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001e28:	4b1b      	ldr	r3, [pc, #108]	@ (8001e98 <HAL_ADC_MspInit+0xe8>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e2e:	4b1a      	ldr	r3, [pc, #104]	@ (8001e98 <HAL_ADC_MspInit+0xe8>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e34:	4b18      	ldr	r3, [pc, #96]	@ (8001e98 <HAL_ADC_MspInit+0xe8>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e3a:	4b17      	ldr	r3, [pc, #92]	@ (8001e98 <HAL_ADC_MspInit+0xe8>)
 8001e3c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e40:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e42:	4b15      	ldr	r3, [pc, #84]	@ (8001e98 <HAL_ADC_MspInit+0xe8>)
 8001e44:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001e48:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e4a:	4b13      	ldr	r3, [pc, #76]	@ (8001e98 <HAL_ADC_MspInit+0xe8>)
 8001e4c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e50:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001e52:	4b11      	ldr	r3, [pc, #68]	@ (8001e98 <HAL_ADC_MspInit+0xe8>)
 8001e54:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e58:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001e5a:	4b0f      	ldr	r3, [pc, #60]	@ (8001e98 <HAL_ADC_MspInit+0xe8>)
 8001e5c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001e60:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e62:	4b0d      	ldr	r3, [pc, #52]	@ (8001e98 <HAL_ADC_MspInit+0xe8>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e68:	480b      	ldr	r0, [pc, #44]	@ (8001e98 <HAL_ADC_MspInit+0xe8>)
 8001e6a:	f002 fadd 	bl	8004428 <HAL_DMA_Init>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001e74:	f001 f818 	bl	8002ea8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4a07      	ldr	r2, [pc, #28]	@ (8001e98 <HAL_ADC_MspInit+0xe8>)
 8001e7c:	639a      	str	r2, [r3, #56]	@ 0x38
 8001e7e:	4a06      	ldr	r2, [pc, #24]	@ (8001e98 <HAL_ADC_MspInit+0xe8>)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001e84:	bf00      	nop
 8001e86:	3728      	adds	r7, #40	@ 0x28
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40012000 	.word	0x40012000
 8001e90:	40023800 	.word	0x40023800
 8001e94:	40020400 	.word	0x40020400
 8001e98:	20000628 	.word	0x20000628
 8001e9c:	40026410 	.word	0x40026410

08001ea0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	607b      	str	r3, [r7, #4]
 8001eaa:	4b10      	ldr	r3, [pc, #64]	@ (8001eec <MX_DMA_Init+0x4c>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eae:	4a0f      	ldr	r2, [pc, #60]	@ (8001eec <MX_DMA_Init+0x4c>)
 8001eb0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001eb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8001eec <MX_DMA_Init+0x4c>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ebe:	607b      	str	r3, [r7, #4]
 8001ec0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 2, 0);
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	2102      	movs	r1, #2
 8001ec6:	2038      	movs	r0, #56	@ 0x38
 8001ec8:	f002 fa77 	bl	80043ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001ecc:	2038      	movs	r0, #56	@ 0x38
 8001ece:	f002 fa90 	bl	80043f2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 1, 0);
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	2044      	movs	r0, #68	@ 0x44
 8001ed8:	f002 fa6f 	bl	80043ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8001edc:	2044      	movs	r0, #68	@ 0x44
 8001ede:	f002 fa88 	bl	80043f2 <HAL_NVIC_EnableIRQ>

}
 8001ee2:	bf00      	nop
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40023800 	.word	0x40023800

08001ef0 <Generate_Sine_Wave>:
extern uint16_t dc_wavedata[WAVE_LENGTH];


// 生成正弦波数据表
void Generate_Sine_Wave(float amplitude)
{
 8001ef0:	b5b0      	push	{r4, r5, r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	ed87 0a01 	vstr	s0, [r7, #4]
    for (int i=0;i<WAVE_LENGTH;i++)
 8001efa:	2300      	movs	r3, #0
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	e05d      	b.n	8001fbc <Generate_Sine_Wave+0xcc>
    {
        float x = 2 * 3.14 * i / WAVE_LENGTH;
 8001f00:	68f8      	ldr	r0, [r7, #12]
 8001f02:	f7fe fb1b 	bl	800053c <__aeabi_i2d>
 8001f06:	a33a      	add	r3, pc, #232	@ (adr r3, 8001ff0 <Generate_Sine_Wave+0x100>)
 8001f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0c:	f7fe fb80 	bl	8000610 <__aeabi_dmul>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4610      	mov	r0, r2
 8001f16:	4619      	mov	r1, r3
 8001f18:	f04f 0200 	mov.w	r2, #0
 8001f1c:	4b32      	ldr	r3, [pc, #200]	@ (8001fe8 <Generate_Sine_Wave+0xf8>)
 8001f1e:	f7fe fca1 	bl	8000864 <__aeabi_ddiv>
 8001f22:	4602      	mov	r2, r0
 8001f24:	460b      	mov	r3, r1
 8001f26:	4610      	mov	r0, r2
 8001f28:	4619      	mov	r1, r3
 8001f2a:	f7fe fe53 	bl	8000bd4 <__aeabi_d2f>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	60bb      	str	r3, [r7, #8]
        sin_wavedata[i] = ((amplitude/2)*sin(x)+1.65)*255/3.3;
 8001f32:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f36:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001f3a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001f3e:	ee16 0a90 	vmov	r0, s13
 8001f42:	f7fe fb0d 	bl	8000560 <__aeabi_f2d>
 8001f46:	4604      	mov	r4, r0
 8001f48:	460d      	mov	r5, r1
 8001f4a:	68b8      	ldr	r0, [r7, #8]
 8001f4c:	f7fe fb08 	bl	8000560 <__aeabi_f2d>
 8001f50:	4602      	mov	r2, r0
 8001f52:	460b      	mov	r3, r1
 8001f54:	ec43 2b10 	vmov	d0, r2, r3
 8001f58:	f006 fab6 	bl	80084c8 <sin>
 8001f5c:	ec53 2b10 	vmov	r2, r3, d0
 8001f60:	4620      	mov	r0, r4
 8001f62:	4629      	mov	r1, r5
 8001f64:	f7fe fb54 	bl	8000610 <__aeabi_dmul>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	4610      	mov	r0, r2
 8001f6e:	4619      	mov	r1, r3
 8001f70:	a317      	add	r3, pc, #92	@ (adr r3, 8001fd0 <Generate_Sine_Wave+0xe0>)
 8001f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f76:	f7fe f995 	bl	80002a4 <__adddf3>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	4610      	mov	r0, r2
 8001f80:	4619      	mov	r1, r3
 8001f82:	a315      	add	r3, pc, #84	@ (adr r3, 8001fd8 <Generate_Sine_Wave+0xe8>)
 8001f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f88:	f7fe fb42 	bl	8000610 <__aeabi_dmul>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	460b      	mov	r3, r1
 8001f90:	4610      	mov	r0, r2
 8001f92:	4619      	mov	r1, r3
 8001f94:	a312      	add	r3, pc, #72	@ (adr r3, 8001fe0 <Generate_Sine_Wave+0xf0>)
 8001f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f9a:	f7fe fc63 	bl	8000864 <__aeabi_ddiv>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	4610      	mov	r0, r2
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	f7fe fdf5 	bl	8000b94 <__aeabi_d2uiz>
 8001faa:	4603      	mov	r3, r0
 8001fac:	b299      	uxth	r1, r3
 8001fae:	4a0f      	ldr	r2, [pc, #60]	@ (8001fec <Generate_Sine_Wave+0xfc>)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i=0;i<WAVE_LENGTH;i++)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	60fb      	str	r3, [r7, #12]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2bff      	cmp	r3, #255	@ 0xff
 8001fc0:	dd9e      	ble.n	8001f00 <Generate_Sine_Wave+0x10>
    }
}
 8001fc2:	bf00      	nop
 8001fc4:	bf00      	nop
 8001fc6:	3710      	adds	r7, #16
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bdb0      	pop	{r4, r5, r7, pc}
 8001fcc:	f3af 8000 	nop.w
 8001fd0:	66666666 	.word	0x66666666
 8001fd4:	3ffa6666 	.word	0x3ffa6666
 8001fd8:	00000000 	.word	0x00000000
 8001fdc:	406fe000 	.word	0x406fe000
 8001fe0:	66666666 	.word	0x66666666
 8001fe4:	400a6666 	.word	0x400a6666
 8001fe8:	40700000 	.word	0x40700000
 8001fec:	20001e58 	.word	0x20001e58
 8001ff0:	51eb851f 	.word	0x51eb851f
 8001ff4:	40191eb8 	.word	0x40191eb8

08001ff8 <Generate_Square_Wave>:

// 生成方波数据表
void Generate_Square_Wave(float amplitude)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	ed87 0a01 	vstr	s0, [r7, #4]
   uint16_t high=(3.3/2+amplitude/2)*255.0/3.3;
 8002002:	edd7 7a01 	vldr	s15, [r7, #4]
 8002006:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800200a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800200e:	ee16 0a90 	vmov	r0, s13
 8002012:	f7fe faa5 	bl	8000560 <__aeabi_f2d>
 8002016:	a337      	add	r3, pc, #220	@ (adr r3, 80020f4 <Generate_Square_Wave+0xfc>)
 8002018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800201c:	f7fe f942 	bl	80002a4 <__adddf3>
 8002020:	4602      	mov	r2, r0
 8002022:	460b      	mov	r3, r1
 8002024:	4610      	mov	r0, r2
 8002026:	4619      	mov	r1, r3
 8002028:	a334      	add	r3, pc, #208	@ (adr r3, 80020fc <Generate_Square_Wave+0x104>)
 800202a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800202e:	f7fe faef 	bl	8000610 <__aeabi_dmul>
 8002032:	4602      	mov	r2, r0
 8002034:	460b      	mov	r3, r1
 8002036:	4610      	mov	r0, r2
 8002038:	4619      	mov	r1, r3
 800203a:	a332      	add	r3, pc, #200	@ (adr r3, 8002104 <Generate_Square_Wave+0x10c>)
 800203c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002040:	f7fe fc10 	bl	8000864 <__aeabi_ddiv>
 8002044:	4602      	mov	r2, r0
 8002046:	460b      	mov	r3, r1
 8002048:	4610      	mov	r0, r2
 800204a:	4619      	mov	r1, r3
 800204c:	f7fe fda2 	bl	8000b94 <__aeabi_d2uiz>
 8002050:	4603      	mov	r3, r0
 8002052:	81fb      	strh	r3, [r7, #14]
   uint16_t low=(3.3/2-amplitude/2)*255.0/3.3;
 8002054:	edd7 7a01 	vldr	s15, [r7, #4]
 8002058:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800205c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002060:	ee16 0a90 	vmov	r0, s13
 8002064:	f7fe fa7c 	bl	8000560 <__aeabi_f2d>
 8002068:	4602      	mov	r2, r0
 800206a:	460b      	mov	r3, r1
 800206c:	a121      	add	r1, pc, #132	@ (adr r1, 80020f4 <Generate_Square_Wave+0xfc>)
 800206e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002072:	f7fe f915 	bl	80002a0 <__aeabi_dsub>
 8002076:	4602      	mov	r2, r0
 8002078:	460b      	mov	r3, r1
 800207a:	4610      	mov	r0, r2
 800207c:	4619      	mov	r1, r3
 800207e:	a31f      	add	r3, pc, #124	@ (adr r3, 80020fc <Generate_Square_Wave+0x104>)
 8002080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002084:	f7fe fac4 	bl	8000610 <__aeabi_dmul>
 8002088:	4602      	mov	r2, r0
 800208a:	460b      	mov	r3, r1
 800208c:	4610      	mov	r0, r2
 800208e:	4619      	mov	r1, r3
 8002090:	a31c      	add	r3, pc, #112	@ (adr r3, 8002104 <Generate_Square_Wave+0x10c>)
 8002092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002096:	f7fe fbe5 	bl	8000864 <__aeabi_ddiv>
 800209a:	4602      	mov	r2, r0
 800209c:	460b      	mov	r3, r1
 800209e:	4610      	mov	r0, r2
 80020a0:	4619      	mov	r1, r3
 80020a2:	f7fe fd77 	bl	8000b94 <__aeabi_d2uiz>
 80020a6:	4603      	mov	r3, r0
 80020a8:	81bb      	strh	r3, [r7, #12]
    for(int i=0;i<WAVE_LENGTH/2;i++)
 80020aa:	2300      	movs	r3, #0
 80020ac:	617b      	str	r3, [r7, #20]
 80020ae:	e007      	b.n	80020c0 <Generate_Square_Wave+0xc8>
    {
    	sq_wavedata[i]=high;
 80020b0:	490f      	ldr	r1, [pc, #60]	@ (80020f0 <Generate_Square_Wave+0xf8>)
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	89fa      	ldrh	r2, [r7, #14]
 80020b6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for(int i=0;i<WAVE_LENGTH/2;i++)
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	3301      	adds	r3, #1
 80020be:	617b      	str	r3, [r7, #20]
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	2b7f      	cmp	r3, #127	@ 0x7f
 80020c4:	ddf4      	ble.n	80020b0 <Generate_Square_Wave+0xb8>
    }
    for(int i=WAVE_LENGTH/2;i<WAVE_LENGTH;i++)
 80020c6:	2380      	movs	r3, #128	@ 0x80
 80020c8:	613b      	str	r3, [r7, #16]
 80020ca:	e007      	b.n	80020dc <Generate_Square_Wave+0xe4>
    {
    	sq_wavedata[i]=low;
 80020cc:	4908      	ldr	r1, [pc, #32]	@ (80020f0 <Generate_Square_Wave+0xf8>)
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	89ba      	ldrh	r2, [r7, #12]
 80020d2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for(int i=WAVE_LENGTH/2;i<WAVE_LENGTH;i++)
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	3301      	adds	r3, #1
 80020da:	613b      	str	r3, [r7, #16]
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	2bff      	cmp	r3, #255	@ 0xff
 80020e0:	ddf4      	ble.n	80020cc <Generate_Square_Wave+0xd4>
    }
}
 80020e2:	bf00      	nop
 80020e4:	bf00      	nop
 80020e6:	3718      	adds	r7, #24
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	f3af 8000 	nop.w
 80020f0:	20002058 	.word	0x20002058
 80020f4:	66666666 	.word	0x66666666
 80020f8:	3ffa6666 	.word	0x3ffa6666
 80020fc:	00000000 	.word	0x00000000
 8002100:	406fe000 	.word	0x406fe000
 8002104:	66666666 	.word	0x66666666
 8002108:	400a6666 	.word	0x400a6666
 800210c:	00000000 	.word	0x00000000

08002110 <Generate_Triangle_Wave>:

// 生成三角波数据表
void Generate_Triangle_Wave(float amplitude)
{
 8002110:	b5b0      	push	{r4, r5, r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0
 8002116:	ed87 0a01 	vstr	s0, [r7, #4]
    float mid=amplitude/2;
 800211a:	ed97 7a01 	vldr	s14, [r7, #4]
 800211e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002122:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002126:	edc7 7a03 	vstr	s15, [r7, #12]
    for(int i=0;i<WAVE_LENGTH/2;i++)
 800212a:	2300      	movs	r3, #0
 800212c:	617b      	str	r3, [r7, #20]
 800212e:	e04b      	b.n	80021c8 <Generate_Triangle_Wave+0xb8>
    {
    	tang_wavedata[i]=((amplitude/127.0)*i+1.65-mid)*255.0/3.3;
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f7fe fa15 	bl	8000560 <__aeabi_f2d>
 8002136:	a35c      	add	r3, pc, #368	@ (adr r3, 80022a8 <Generate_Triangle_Wave+0x198>)
 8002138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800213c:	f7fe fb92 	bl	8000864 <__aeabi_ddiv>
 8002140:	4602      	mov	r2, r0
 8002142:	460b      	mov	r3, r1
 8002144:	4614      	mov	r4, r2
 8002146:	461d      	mov	r5, r3
 8002148:	6978      	ldr	r0, [r7, #20]
 800214a:	f7fe f9f7 	bl	800053c <__aeabi_i2d>
 800214e:	4602      	mov	r2, r0
 8002150:	460b      	mov	r3, r1
 8002152:	4620      	mov	r0, r4
 8002154:	4629      	mov	r1, r5
 8002156:	f7fe fa5b 	bl	8000610 <__aeabi_dmul>
 800215a:	4602      	mov	r2, r0
 800215c:	460b      	mov	r3, r1
 800215e:	4610      	mov	r0, r2
 8002160:	4619      	mov	r1, r3
 8002162:	a353      	add	r3, pc, #332	@ (adr r3, 80022b0 <Generate_Triangle_Wave+0x1a0>)
 8002164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002168:	f7fe f89c 	bl	80002a4 <__adddf3>
 800216c:	4602      	mov	r2, r0
 800216e:	460b      	mov	r3, r1
 8002170:	4614      	mov	r4, r2
 8002172:	461d      	mov	r5, r3
 8002174:	68f8      	ldr	r0, [r7, #12]
 8002176:	f7fe f9f3 	bl	8000560 <__aeabi_f2d>
 800217a:	4602      	mov	r2, r0
 800217c:	460b      	mov	r3, r1
 800217e:	4620      	mov	r0, r4
 8002180:	4629      	mov	r1, r5
 8002182:	f7fe f88d 	bl	80002a0 <__aeabi_dsub>
 8002186:	4602      	mov	r2, r0
 8002188:	460b      	mov	r3, r1
 800218a:	4610      	mov	r0, r2
 800218c:	4619      	mov	r1, r3
 800218e:	a34a      	add	r3, pc, #296	@ (adr r3, 80022b8 <Generate_Triangle_Wave+0x1a8>)
 8002190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002194:	f7fe fa3c 	bl	8000610 <__aeabi_dmul>
 8002198:	4602      	mov	r2, r0
 800219a:	460b      	mov	r3, r1
 800219c:	4610      	mov	r0, r2
 800219e:	4619      	mov	r1, r3
 80021a0:	a347      	add	r3, pc, #284	@ (adr r3, 80022c0 <Generate_Triangle_Wave+0x1b0>)
 80021a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021a6:	f7fe fb5d 	bl	8000864 <__aeabi_ddiv>
 80021aa:	4602      	mov	r2, r0
 80021ac:	460b      	mov	r3, r1
 80021ae:	4610      	mov	r0, r2
 80021b0:	4619      	mov	r1, r3
 80021b2:	f7fe fcef 	bl	8000b94 <__aeabi_d2uiz>
 80021b6:	4603      	mov	r3, r0
 80021b8:	b299      	uxth	r1, r3
 80021ba:	4a43      	ldr	r2, [pc, #268]	@ (80022c8 <Generate_Triangle_Wave+0x1b8>)
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(int i=0;i<WAVE_LENGTH/2;i++)
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	3301      	adds	r3, #1
 80021c6:	617b      	str	r3, [r7, #20]
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80021cc:	ddb0      	ble.n	8002130 <Generate_Triangle_Wave+0x20>
    }
    for(int i=WAVE_LENGTH/2;i<WAVE_LENGTH;i++)
 80021ce:	2380      	movs	r3, #128	@ 0x80
 80021d0:	613b      	str	r3, [r7, #16]
 80021d2:	e060      	b.n	8002296 <Generate_Triangle_Wave+0x186>
    {
    	tang_wavedata[i]=((-amplitude/127.0)*(i-128)+1.65-mid+amplitude)*255.0/3.3;
 80021d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80021d8:	eef1 7a67 	vneg.f32	s15, s15
 80021dc:	ee17 3a90 	vmov	r3, s15
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7fe f9bd 	bl	8000560 <__aeabi_f2d>
 80021e6:	a330      	add	r3, pc, #192	@ (adr r3, 80022a8 <Generate_Triangle_Wave+0x198>)
 80021e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ec:	f7fe fb3a 	bl	8000864 <__aeabi_ddiv>
 80021f0:	4602      	mov	r2, r0
 80021f2:	460b      	mov	r3, r1
 80021f4:	4614      	mov	r4, r2
 80021f6:	461d      	mov	r5, r3
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	3b80      	subs	r3, #128	@ 0x80
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7fe f99d 	bl	800053c <__aeabi_i2d>
 8002202:	4602      	mov	r2, r0
 8002204:	460b      	mov	r3, r1
 8002206:	4620      	mov	r0, r4
 8002208:	4629      	mov	r1, r5
 800220a:	f7fe fa01 	bl	8000610 <__aeabi_dmul>
 800220e:	4602      	mov	r2, r0
 8002210:	460b      	mov	r3, r1
 8002212:	4610      	mov	r0, r2
 8002214:	4619      	mov	r1, r3
 8002216:	a326      	add	r3, pc, #152	@ (adr r3, 80022b0 <Generate_Triangle_Wave+0x1a0>)
 8002218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800221c:	f7fe f842 	bl	80002a4 <__adddf3>
 8002220:	4602      	mov	r2, r0
 8002222:	460b      	mov	r3, r1
 8002224:	4614      	mov	r4, r2
 8002226:	461d      	mov	r5, r3
 8002228:	68f8      	ldr	r0, [r7, #12]
 800222a:	f7fe f999 	bl	8000560 <__aeabi_f2d>
 800222e:	4602      	mov	r2, r0
 8002230:	460b      	mov	r3, r1
 8002232:	4620      	mov	r0, r4
 8002234:	4629      	mov	r1, r5
 8002236:	f7fe f833 	bl	80002a0 <__aeabi_dsub>
 800223a:	4602      	mov	r2, r0
 800223c:	460b      	mov	r3, r1
 800223e:	4614      	mov	r4, r2
 8002240:	461d      	mov	r5, r3
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f7fe f98c 	bl	8000560 <__aeabi_f2d>
 8002248:	4602      	mov	r2, r0
 800224a:	460b      	mov	r3, r1
 800224c:	4620      	mov	r0, r4
 800224e:	4629      	mov	r1, r5
 8002250:	f7fe f828 	bl	80002a4 <__adddf3>
 8002254:	4602      	mov	r2, r0
 8002256:	460b      	mov	r3, r1
 8002258:	4610      	mov	r0, r2
 800225a:	4619      	mov	r1, r3
 800225c:	a316      	add	r3, pc, #88	@ (adr r3, 80022b8 <Generate_Triangle_Wave+0x1a8>)
 800225e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002262:	f7fe f9d5 	bl	8000610 <__aeabi_dmul>
 8002266:	4602      	mov	r2, r0
 8002268:	460b      	mov	r3, r1
 800226a:	4610      	mov	r0, r2
 800226c:	4619      	mov	r1, r3
 800226e:	a314      	add	r3, pc, #80	@ (adr r3, 80022c0 <Generate_Triangle_Wave+0x1b0>)
 8002270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002274:	f7fe faf6 	bl	8000864 <__aeabi_ddiv>
 8002278:	4602      	mov	r2, r0
 800227a:	460b      	mov	r3, r1
 800227c:	4610      	mov	r0, r2
 800227e:	4619      	mov	r1, r3
 8002280:	f7fe fc88 	bl	8000b94 <__aeabi_d2uiz>
 8002284:	4603      	mov	r3, r0
 8002286:	b299      	uxth	r1, r3
 8002288:	4a0f      	ldr	r2, [pc, #60]	@ (80022c8 <Generate_Triangle_Wave+0x1b8>)
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(int i=WAVE_LENGTH/2;i<WAVE_LENGTH;i++)
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	3301      	adds	r3, #1
 8002294:	613b      	str	r3, [r7, #16]
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	2bff      	cmp	r3, #255	@ 0xff
 800229a:	dd9b      	ble.n	80021d4 <Generate_Triangle_Wave+0xc4>
    }
}
 800229c:	bf00      	nop
 800229e:	bf00      	nop
 80022a0:	3718      	adds	r7, #24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bdb0      	pop	{r4, r5, r7, pc}
 80022a6:	bf00      	nop
 80022a8:	00000000 	.word	0x00000000
 80022ac:	405fc000 	.word	0x405fc000
 80022b0:	66666666 	.word	0x66666666
 80022b4:	3ffa6666 	.word	0x3ffa6666
 80022b8:	00000000 	.word	0x00000000
 80022bc:	406fe000 	.word	0x406fe000
 80022c0:	66666666 	.word	0x66666666
 80022c4:	400a6666 	.word	0x400a6666
 80022c8:	20002258 	.word	0x20002258
 80022cc:	00000000 	.word	0x00000000

080022d0 <Generate_DC_Wave>:

// 生成直流数据表
void Generate_DC_Wave(float amplitude)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	ed87 0a01 	vstr	s0, [r7, #4]
    uint16_t dc_value = (amplitude*255.0)/3.3 ;
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f7fe f940 	bl	8000560 <__aeabi_f2d>
 80022e0:	a316      	add	r3, pc, #88	@ (adr r3, 800233c <Generate_DC_Wave+0x6c>)
 80022e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e6:	f7fe f993 	bl	8000610 <__aeabi_dmul>
 80022ea:	4602      	mov	r2, r0
 80022ec:	460b      	mov	r3, r1
 80022ee:	4610      	mov	r0, r2
 80022f0:	4619      	mov	r1, r3
 80022f2:	a314      	add	r3, pc, #80	@ (adr r3, 8002344 <Generate_DC_Wave+0x74>)
 80022f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f8:	f7fe fab4 	bl	8000864 <__aeabi_ddiv>
 80022fc:	4602      	mov	r2, r0
 80022fe:	460b      	mov	r3, r1
 8002300:	4610      	mov	r0, r2
 8002302:	4619      	mov	r1, r3
 8002304:	f7fe fc46 	bl	8000b94 <__aeabi_d2uiz>
 8002308:	4603      	mov	r3, r0
 800230a:	817b      	strh	r3, [r7, #10]
    for (int i = 0; i < WAVE_LENGTH; i++)
 800230c:	2300      	movs	r3, #0
 800230e:	60fb      	str	r3, [r7, #12]
 8002310:	e007      	b.n	8002322 <Generate_DC_Wave+0x52>
    {
        dc_wavedata[i] = dc_value;
 8002312:	4909      	ldr	r1, [pc, #36]	@ (8002338 <Generate_DC_Wave+0x68>)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	897a      	ldrh	r2, [r7, #10]
 8002318:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for (int i = 0; i < WAVE_LENGTH; i++)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	3301      	adds	r3, #1
 8002320:	60fb      	str	r3, [r7, #12]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2bff      	cmp	r3, #255	@ 0xff
 8002326:	ddf4      	ble.n	8002312 <Generate_DC_Wave+0x42>
    }
}
 8002328:	bf00      	nop
 800232a:	bf00      	nop
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	f3af 8000 	nop.w
 8002338:	20002458 	.word	0x20002458
 800233c:	00000000 	.word	0x00000000
 8002340:	406fe000 	.word	0x406fe000
 8002344:	66666666 	.word	0x66666666
 8002348:	400a6666 	.word	0x400a6666

0800234c <Generate_init>:


//初始化
void Generate_init(float amplitude)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	ed87 0a01 	vstr	s0, [r7, #4]
	   Generate_Sine_Wave(amplitude);
 8002356:	ed97 0a01 	vldr	s0, [r7, #4]
 800235a:	f7ff fdc9 	bl	8001ef0 <Generate_Sine_Wave>
	   Generate_Square_Wave(amplitude);
 800235e:	ed97 0a01 	vldr	s0, [r7, #4]
 8002362:	f7ff fe49 	bl	8001ff8 <Generate_Square_Wave>
	   Generate_Triangle_Wave(amplitude);
 8002366:	ed97 0a01 	vldr	s0, [r7, #4]
 800236a:	f7ff fed1 	bl	8002110 <Generate_Triangle_Wave>
	   Generate_DC_Wave(amplitude);
 800236e:	ed97 0a01 	vldr	s0, [r7, #4]
 8002372:	f7ff ffad 	bl	80022d0 <Generate_DC_Wave>
}
 8002376:	bf00      	nop
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
	...

08002380 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b08a      	sub	sp, #40	@ 0x28
 8002384:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002386:	f107 0314 	add.w	r3, r7, #20
 800238a:	2200      	movs	r2, #0
 800238c:	601a      	str	r2, [r3, #0]
 800238e:	605a      	str	r2, [r3, #4]
 8002390:	609a      	str	r2, [r3, #8]
 8002392:	60da      	str	r2, [r3, #12]
 8002394:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002396:	2300      	movs	r3, #0
 8002398:	613b      	str	r3, [r7, #16]
 800239a:	4b35      	ldr	r3, [pc, #212]	@ (8002470 <MX_GPIO_Init+0xf0>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239e:	4a34      	ldr	r2, [pc, #208]	@ (8002470 <MX_GPIO_Init+0xf0>)
 80023a0:	f043 0304 	orr.w	r3, r3, #4
 80023a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80023a6:	4b32      	ldr	r3, [pc, #200]	@ (8002470 <MX_GPIO_Init+0xf0>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023aa:	f003 0304 	and.w	r3, r3, #4
 80023ae:	613b      	str	r3, [r7, #16]
 80023b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023b2:	2300      	movs	r3, #0
 80023b4:	60fb      	str	r3, [r7, #12]
 80023b6:	4b2e      	ldr	r3, [pc, #184]	@ (8002470 <MX_GPIO_Init+0xf0>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ba:	4a2d      	ldr	r2, [pc, #180]	@ (8002470 <MX_GPIO_Init+0xf0>)
 80023bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80023c2:	4b2b      	ldr	r3, [pc, #172]	@ (8002470 <MX_GPIO_Init+0xf0>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ce:	2300      	movs	r3, #0
 80023d0:	60bb      	str	r3, [r7, #8]
 80023d2:	4b27      	ldr	r3, [pc, #156]	@ (8002470 <MX_GPIO_Init+0xf0>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d6:	4a26      	ldr	r2, [pc, #152]	@ (8002470 <MX_GPIO_Init+0xf0>)
 80023d8:	f043 0301 	orr.w	r3, r3, #1
 80023dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80023de:	4b24      	ldr	r3, [pc, #144]	@ (8002470 <MX_GPIO_Init+0xf0>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	60bb      	str	r3, [r7, #8]
 80023e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	607b      	str	r3, [r7, #4]
 80023ee:	4b20      	ldr	r3, [pc, #128]	@ (8002470 <MX_GPIO_Init+0xf0>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f2:	4a1f      	ldr	r2, [pc, #124]	@ (8002470 <MX_GPIO_Init+0xf0>)
 80023f4:	f043 0302 	orr.w	r3, r3, #2
 80023f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80023fa:	4b1d      	ldr	r3, [pc, #116]	@ (8002470 <MX_GPIO_Init+0xf0>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	607b      	str	r3, [r7, #4]
 8002404:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002406:	2200      	movs	r2, #0
 8002408:	21ff      	movs	r1, #255	@ 0xff
 800240a:	481a      	ldr	r0, [pc, #104]	@ (8002474 <MX_GPIO_Init+0xf4>)
 800240c:	f002 fdac 	bl	8004f68 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002410:	23ff      	movs	r3, #255	@ 0xff
 8002412:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002414:	2301      	movs	r3, #1
 8002416:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002418:	2300      	movs	r3, #0
 800241a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800241c:	2302      	movs	r3, #2
 800241e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002420:	f107 0314 	add.w	r3, r7, #20
 8002424:	4619      	mov	r1, r3
 8002426:	4813      	ldr	r0, [pc, #76]	@ (8002474 <MX_GPIO_Init+0xf4>)
 8002428:	f002 fc1a 	bl	8004c60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_8
 800242c:	f44f 43e6 	mov.w	r3, #29440	@ 0x7300
 8002430:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002432:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002436:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002438:	2301      	movs	r3, #1
 800243a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800243c:	f107 0314 	add.w	r3, r7, #20
 8002440:	4619      	mov	r1, r3
 8002442:	480d      	ldr	r0, [pc, #52]	@ (8002478 <MX_GPIO_Init+0xf8>)
 8002444:	f002 fc0c 	bl	8004c60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8002448:	2200      	movs	r2, #0
 800244a:	2101      	movs	r1, #1
 800244c:	2017      	movs	r0, #23
 800244e:	f001 ffb4 	bl	80043ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002452:	2017      	movs	r0, #23
 8002454:	f001 ffcd 	bl	80043f2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8002458:	2200      	movs	r2, #0
 800245a:	2101      	movs	r1, #1
 800245c:	2028      	movs	r0, #40	@ 0x28
 800245e:	f001 ffac 	bl	80043ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002462:	2028      	movs	r0, #40	@ 0x28
 8002464:	f001 ffc5 	bl	80043f2 <HAL_NVIC_EnableIRQ>

}
 8002468:	bf00      	nop
 800246a:	3728      	adds	r7, #40	@ 0x28
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	40023800 	.word	0x40023800
 8002474:	40020000 	.word	0x40020000
 8002478:	40020400 	.word	0x40020400

0800247c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002480:	4b12      	ldr	r3, [pc, #72]	@ (80024cc <MX_I2C1_Init+0x50>)
 8002482:	4a13      	ldr	r2, [pc, #76]	@ (80024d0 <MX_I2C1_Init+0x54>)
 8002484:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002486:	4b11      	ldr	r3, [pc, #68]	@ (80024cc <MX_I2C1_Init+0x50>)
 8002488:	4a12      	ldr	r2, [pc, #72]	@ (80024d4 <MX_I2C1_Init+0x58>)
 800248a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800248c:	4b0f      	ldr	r3, [pc, #60]	@ (80024cc <MX_I2C1_Init+0x50>)
 800248e:	2200      	movs	r2, #0
 8002490:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002492:	4b0e      	ldr	r3, [pc, #56]	@ (80024cc <MX_I2C1_Init+0x50>)
 8002494:	2200      	movs	r2, #0
 8002496:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002498:	4b0c      	ldr	r3, [pc, #48]	@ (80024cc <MX_I2C1_Init+0x50>)
 800249a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800249e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024a0:	4b0a      	ldr	r3, [pc, #40]	@ (80024cc <MX_I2C1_Init+0x50>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80024a6:	4b09      	ldr	r3, [pc, #36]	@ (80024cc <MX_I2C1_Init+0x50>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024ac:	4b07      	ldr	r3, [pc, #28]	@ (80024cc <MX_I2C1_Init+0x50>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024b2:	4b06      	ldr	r3, [pc, #24]	@ (80024cc <MX_I2C1_Init+0x50>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80024b8:	4804      	ldr	r0, [pc, #16]	@ (80024cc <MX_I2C1_Init+0x50>)
 80024ba:	f002 fd87 	bl	8004fcc <HAL_I2C_Init>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80024c4:	f000 fcf0 	bl	8002ea8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80024c8:	bf00      	nop
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	20000688 	.word	0x20000688
 80024d0:	40005400 	.word	0x40005400
 80024d4:	00061a80 	.word	0x00061a80

080024d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b08a      	sub	sp, #40	@ 0x28
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e0:	f107 0314 	add.w	r3, r7, #20
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	605a      	str	r2, [r3, #4]
 80024ea:	609a      	str	r2, [r3, #8]
 80024ec:	60da      	str	r2, [r3, #12]
 80024ee:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a19      	ldr	r2, [pc, #100]	@ (800255c <HAL_I2C_MspInit+0x84>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d12b      	bne.n	8002552 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	613b      	str	r3, [r7, #16]
 80024fe:	4b18      	ldr	r3, [pc, #96]	@ (8002560 <HAL_I2C_MspInit+0x88>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002502:	4a17      	ldr	r2, [pc, #92]	@ (8002560 <HAL_I2C_MspInit+0x88>)
 8002504:	f043 0302 	orr.w	r3, r3, #2
 8002508:	6313      	str	r3, [r2, #48]	@ 0x30
 800250a:	4b15      	ldr	r3, [pc, #84]	@ (8002560 <HAL_I2C_MspInit+0x88>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	613b      	str	r3, [r7, #16]
 8002514:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002516:	23c0      	movs	r3, #192	@ 0xc0
 8002518:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800251a:	2312      	movs	r3, #18
 800251c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251e:	2300      	movs	r3, #0
 8002520:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002522:	2303      	movs	r3, #3
 8002524:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002526:	2304      	movs	r3, #4
 8002528:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800252a:	f107 0314 	add.w	r3, r7, #20
 800252e:	4619      	mov	r1, r3
 8002530:	480c      	ldr	r0, [pc, #48]	@ (8002564 <HAL_I2C_MspInit+0x8c>)
 8002532:	f002 fb95 	bl	8004c60 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002536:	2300      	movs	r3, #0
 8002538:	60fb      	str	r3, [r7, #12]
 800253a:	4b09      	ldr	r3, [pc, #36]	@ (8002560 <HAL_I2C_MspInit+0x88>)
 800253c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253e:	4a08      	ldr	r2, [pc, #32]	@ (8002560 <HAL_I2C_MspInit+0x88>)
 8002540:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002544:	6413      	str	r3, [r2, #64]	@ 0x40
 8002546:	4b06      	ldr	r3, [pc, #24]	@ (8002560 <HAL_I2C_MspInit+0x88>)
 8002548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800254a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800254e:	60fb      	str	r3, [r7, #12]
 8002550:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002552:	bf00      	nop
 8002554:	3728      	adds	r7, #40	@ 0x28
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	40005400 	.word	0x40005400
 8002560:	40023800 	.word	0x40023800
 8002564:	40020400 	.word	0x40020400

08002568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002568:	b5b0      	push	{r4, r5, r7, lr}
 800256a:	b08a      	sub	sp, #40	@ 0x28
 800256c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800256e:	f001 f9ad 	bl	80038cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002572:	f000 fb95 	bl	8002ca0 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002576:	f7ff ff03 	bl	8002380 <MX_GPIO_Init>
  MX_DMA_Init();
 800257a:	f7ff fc91 	bl	8001ea0 <MX_DMA_Init>
  MX_ADC1_Init();
 800257e:	f7ff fbc5 	bl	8001d0c <MX_ADC1_Init>
  MX_I2C1_Init();
 8002582:	f7ff ff7b 	bl	800247c <MX_I2C1_Init>
  MX_TIM1_Init();
 8002586:	f000 ff21 	bl	80033cc <MX_TIM1_Init>
  MX_TIM3_Init();
 800258a:	f000 ffc7 	bl	800351c <MX_TIM3_Init>
  MX_TIM2_Init();
 800258e:	f000 ff6d 	bl	800346c <MX_TIM2_Init>
  MX_TIM4_Init();
 8002592:	f001 f817 	bl	80035c4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */


  OLED_Init();
 8002596:	f7ff f9fd 	bl	8001994 <OLED_Init>

  //开机
  OLED_Load();
 800259a:	f7ff faa5 	bl	8001ae8 <OLED_Load>
  OLED_Update_Screen();
 800259e:	f7ff f91d 	bl	80017dc <OLED_Update_Screen>
  HAL_Delay(2000);
 80025a2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80025a6:	f001 fa03 	bl	80039b0 <HAL_Delay>
  OLED_Clear();
 80025aa:	f7fe fd37 	bl	800101c <OLED_Clear>

 Generate_init(generate_voltage);//峰峰值初始化
 80025ae:	4bac      	ldr	r3, [pc, #688]	@ (8002860 <main+0x2f8>)
 80025b0:	edd3 7a00 	vldr	s15, [r3]
 80025b4:	eeb0 0a67 	vmov.f32	s0, s15
 80025b8:	f7ff fec8 	bl	800234c <Generate_init>


 HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcvalue, 3000);
 80025bc:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80025c0:	49a8      	ldr	r1, [pc, #672]	@ (8002864 <main+0x2fc>)
 80025c2:	48a9      	ldr	r0, [pc, #676]	@ (8002868 <main+0x300>)
 80025c4:	f001 fa5c 	bl	8003a80 <HAL_ADC_Start_DMA>
 HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);//TIM2pwm触发adc
 80025c8:	2104      	movs	r1, #4
 80025ca:	48a8      	ldr	r0, [pc, #672]	@ (800286c <main+0x304>)
 80025cc:	f003 ff00 	bl	80063d0 <HAL_TIM_PWM_Start>

 HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);//TIM3编码器模式
 80025d0:	213c      	movs	r1, #60	@ 0x3c
 80025d2:	48a7      	ldr	r0, [pc, #668]	@ (8002870 <main+0x308>)
 80025d4:	f004 f8b6 	bl	8006744 <HAL_TIM_Encoder_Start>


 HAL_DMA_Start(&hdma_tim1_up, (uint32_t*)pwave, (uint32_t)&GPIOA->ODR, 256);
 80025d8:	4ba6      	ldr	r3, [pc, #664]	@ (8002874 <main+0x30c>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4619      	mov	r1, r3
 80025de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80025e2:	4aa5      	ldr	r2, [pc, #660]	@ (8002878 <main+0x310>)
 80025e4:	48a5      	ldr	r0, [pc, #660]	@ (800287c <main+0x314>)
 80025e6:	f001 ffcd 	bl	8004584 <HAL_DMA_Start>
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_UPDATE); // TIM1触发DMA
 80025ea:	4ba5      	ldr	r3, [pc, #660]	@ (8002880 <main+0x318>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68da      	ldr	r2, [r3, #12]
 80025f0:	4ba3      	ldr	r3, [pc, #652]	@ (8002880 <main+0x318>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025f8:	60da      	str	r2, [r3, #12]
  HAL_TIM_Base_Start(&htim1);
 80025fa:	48a1      	ldr	r0, [pc, #644]	@ (8002880 <main+0x318>)
 80025fc:	f003 fe18 	bl	8006230 <HAL_TIM_Base_Start>

  uint8_t x=1;
 8002600:	2301      	movs	r3, #1
 8002602:	77fb      	strb	r3, [r7, #31]
  uint8_t y=20;
 8002604:	2314      	movs	r3, #20
 8002606:	77bb      	strb	r3, [r7, #30]
  uint8_t tgv=26;
 8002608:	231a      	movs	r3, #26
 800260a:	777b      	strb	r3, [r7, #29]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	uint8_t count =__HAL_TIM_GET_COUNTER(&htim3);
 800260c:	4b98      	ldr	r3, [pc, #608]	@ (8002870 <main+0x308>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002612:	773b      	strb	r3, [r7, #28]


 if(exitflag==1)
 8002614:	4b9b      	ldr	r3, [pc, #620]	@ (8002884 <main+0x31c>)
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	2b01      	cmp	r3, #1
 800261a:	f040 8174 	bne.w	8002906 <main+0x39e>
 {	switch(keynum)
 800261e:	4b9a      	ldr	r3, [pc, #616]	@ (8002888 <main+0x320>)
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	3b01      	subs	r3, #1
 8002624:	2b04      	cmp	r3, #4
 8002626:	f200 8168 	bhi.w	80028fa <main+0x392>
 800262a:	a201      	add	r2, pc, #4	@ (adr r2, 8002630 <main+0xc8>)
 800262c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002630:	08002645 	.word	0x08002645
 8002634:	080026af 	.word	0x080026af
 8002638:	080026e1 	.word	0x080026e1
 800263c:	0800275b 	.word	0x0800275b
 8002640:	08002797 	.word	0x08002797
	{
	case 1:
		switch(key1_state)//采样频率
 8002644:	4b91      	ldr	r3, [pc, #580]	@ (800288c <main+0x324>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	2b03      	cmp	r3, #3
 800264a:	d022      	beq.n	8002692 <main+0x12a>
 800264c:	2b03      	cmp	r3, #3
 800264e:	f300 814d 	bgt.w	80028ec <main+0x384>
 8002652:	2b01      	cmp	r3, #1
 8002654:	d002      	beq.n	800265c <main+0xf4>
 8002656:	2b02      	cmp	r3, #2
 8002658:	d00e      	beq.n	8002678 <main+0x110>
				HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
				HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
				break;
		}

		break;
 800265a:	e147      	b.n	80028ec <main+0x384>
				__HAL_TIM_SET_PRESCALER(&htim2,2999);
 800265c:	4b83      	ldr	r3, [pc, #524]	@ (800286c <main+0x304>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8002664:	629a      	str	r2, [r3, #40]	@ 0x28
				HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8002666:	2104      	movs	r1, #4
 8002668:	4880      	ldr	r0, [pc, #512]	@ (800286c <main+0x304>)
 800266a:	f003 ff61 	bl	8006530 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800266e:	2104      	movs	r1, #4
 8002670:	487e      	ldr	r0, [pc, #504]	@ (800286c <main+0x304>)
 8002672:	f003 fead 	bl	80063d0 <HAL_TIM_PWM_Start>
				break;
 8002676:	e019      	b.n	80026ac <main+0x144>
				__HAL_TIM_SET_PRESCALER(&htim2,19);
 8002678:	4b7c      	ldr	r3, [pc, #496]	@ (800286c <main+0x304>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2213      	movs	r2, #19
 800267e:	629a      	str	r2, [r3, #40]	@ 0x28
				HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8002680:	2104      	movs	r1, #4
 8002682:	487a      	ldr	r0, [pc, #488]	@ (800286c <main+0x304>)
 8002684:	f003 ff54 	bl	8006530 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8002688:	2104      	movs	r1, #4
 800268a:	4878      	ldr	r0, [pc, #480]	@ (800286c <main+0x304>)
 800268c:	f003 fea0 	bl	80063d0 <HAL_TIM_PWM_Start>
				break;
 8002690:	e00c      	b.n	80026ac <main+0x144>
				__HAL_TIM_SET_PRESCALER(&htim2,49);
 8002692:	4b76      	ldr	r3, [pc, #472]	@ (800286c <main+0x304>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2231      	movs	r2, #49	@ 0x31
 8002698:	629a      	str	r2, [r3, #40]	@ 0x28
				HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 800269a:	2104      	movs	r1, #4
 800269c:	4873      	ldr	r0, [pc, #460]	@ (800286c <main+0x304>)
 800269e:	f003 ff47 	bl	8006530 <HAL_TIM_PWM_Stop>
				HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80026a2:	2104      	movs	r1, #4
 80026a4:	4871      	ldr	r0, [pc, #452]	@ (800286c <main+0x304>)
 80026a6:	f003 fe93 	bl	80063d0 <HAL_TIM_PWM_Start>
				break;
 80026aa:	bf00      	nop
		break;
 80026ac:	e11e      	b.n	80028ec <main+0x384>
	case 2:
		switch(key2_state)//水平,垂直,触发
 80026ae:	4b78      	ldr	r3, [pc, #480]	@ (8002890 <main+0x328>)
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	2b03      	cmp	r3, #3
 80026b4:	d00f      	beq.n	80026d6 <main+0x16e>
 80026b6:	2b03      	cmp	r3, #3
 80026b8:	f300 811a 	bgt.w	80028f0 <main+0x388>
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d002      	beq.n	80026c6 <main+0x15e>
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d004      	beq.n	80026ce <main+0x166>
			case 2:enflag=2;
				   break;
			case 3:enflag=3;
				   break;
		}
	     break;
 80026c4:	e114      	b.n	80028f0 <main+0x388>
			case 1:enflag=1;
 80026c6:	4b73      	ldr	r3, [pc, #460]	@ (8002894 <main+0x32c>)
 80026c8:	2201      	movs	r2, #1
 80026ca:	701a      	strb	r2, [r3, #0]
				   break;
 80026cc:	e007      	b.n	80026de <main+0x176>
			case 2:enflag=2;
 80026ce:	4b71      	ldr	r3, [pc, #452]	@ (8002894 <main+0x32c>)
 80026d0:	2202      	movs	r2, #2
 80026d2:	701a      	strb	r2, [r3, #0]
				   break;
 80026d4:	e003      	b.n	80026de <main+0x176>
			case 3:enflag=3;
 80026d6:	4b6f      	ldr	r3, [pc, #444]	@ (8002894 <main+0x32c>)
 80026d8:	2203      	movs	r2, #3
 80026da:	701a      	strb	r2, [r3, #0]
				   break;
 80026dc:	bf00      	nop
	     break;
 80026de:	e107      	b.n	80028f0 <main+0x388>
	 case 3://幅度
	 {
		 HAL_TIM_Base_Stop(&htim1);
 80026e0:	4867      	ldr	r0, [pc, #412]	@ (8002880 <main+0x318>)
 80026e2:	f003 fdff 	bl	80062e4 <HAL_TIM_Base_Stop>
		 HAL_DMA_Abort(&hdma_tim1_up);
 80026e6:	4865      	ldr	r0, [pc, #404]	@ (800287c <main+0x314>)
 80026e8:	f001 ffdf 	bl	80046aa <HAL_DMA_Abort>
		 generate_voltage-=0.3;
 80026ec:	4b5c      	ldr	r3, [pc, #368]	@ (8002860 <main+0x2f8>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7fd ff35 	bl	8000560 <__aeabi_f2d>
 80026f6:	a356      	add	r3, pc, #344	@ (adr r3, 8002850 <main+0x2e8>)
 80026f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026fc:	f7fd fdd0 	bl	80002a0 <__aeabi_dsub>
 8002700:	4602      	mov	r2, r0
 8002702:	460b      	mov	r3, r1
 8002704:	4610      	mov	r0, r2
 8002706:	4619      	mov	r1, r3
 8002708:	f7fe fa64 	bl	8000bd4 <__aeabi_d2f>
 800270c:	4603      	mov	r3, r0
 800270e:	4a54      	ldr	r2, [pc, #336]	@ (8002860 <main+0x2f8>)
 8002710:	6013      	str	r3, [r2, #0]
		 if(generate_voltage<0.9)
 8002712:	4b53      	ldr	r3, [pc, #332]	@ (8002860 <main+0x2f8>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4618      	mov	r0, r3
 8002718:	f7fd ff22 	bl	8000560 <__aeabi_f2d>
 800271c:	a34e      	add	r3, pc, #312	@ (adr r3, 8002858 <main+0x2f0>)
 800271e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002722:	f7fe f9e7 	bl	8000af4 <__aeabi_dcmplt>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d002      	beq.n	8002732 <main+0x1ca>
		 {
			 generate_voltage=3.3;
 800272c:	4b4c      	ldr	r3, [pc, #304]	@ (8002860 <main+0x2f8>)
 800272e:	4a5a      	ldr	r2, [pc, #360]	@ (8002898 <main+0x330>)
 8002730:	601a      	str	r2, [r3, #0]
		 }
		 Generate_init(generate_voltage);
 8002732:	4b4b      	ldr	r3, [pc, #300]	@ (8002860 <main+0x2f8>)
 8002734:	edd3 7a00 	vldr	s15, [r3]
 8002738:	eeb0 0a67 	vmov.f32	s0, s15
 800273c:	f7ff fe06 	bl	800234c <Generate_init>
		 HAL_DMA_Start(&hdma_tim1_up, (uint32_t*)pwave, (uint32_t)&GPIOA->ODR, 256);
 8002740:	4b4c      	ldr	r3, [pc, #304]	@ (8002874 <main+0x30c>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4619      	mov	r1, r3
 8002746:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800274a:	4a4b      	ldr	r2, [pc, #300]	@ (8002878 <main+0x310>)
 800274c:	484b      	ldr	r0, [pc, #300]	@ (800287c <main+0x314>)
 800274e:	f001 ff19 	bl	8004584 <HAL_DMA_Start>
		 HAL_TIM_Base_Start(&htim1);
 8002752:	484b      	ldr	r0, [pc, #300]	@ (8002880 <main+0x318>)
 8002754:	f003 fd6c 	bl	8006230 <HAL_TIM_Base_Start>
	 }
	     break;
 8002758:	e0cf      	b.n	80028fa <main+0x392>
	 case 4://频率
	 {

		  HAL_TIM_Base_Stop(&htim1);
 800275a:	4849      	ldr	r0, [pc, #292]	@ (8002880 <main+0x318>)
 800275c:	f003 fdc2 	bl	80062e4 <HAL_TIM_Base_Stop>
		  htim1.Instance->PSC=freq[freqpos];
 8002760:	4b4e      	ldr	r3, [pc, #312]	@ (800289c <main+0x334>)
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	461a      	mov	r2, r3
 8002766:	4b4e      	ldr	r3, [pc, #312]	@ (80028a0 <main+0x338>)
 8002768:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800276c:	4b44      	ldr	r3, [pc, #272]	@ (8002880 <main+0x318>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	629a      	str	r2, [r3, #40]	@ 0x28
		  HAL_TIM_Base_Start(&htim1);
 8002772:	4843      	ldr	r0, [pc, #268]	@ (8002880 <main+0x318>)
 8002774:	f003 fd5c 	bl	8006230 <HAL_TIM_Base_Start>
		  freqpos++;
 8002778:	4b48      	ldr	r3, [pc, #288]	@ (800289c <main+0x334>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	3301      	adds	r3, #1
 800277e:	b2da      	uxtb	r2, r3
 8002780:	4b46      	ldr	r3, [pc, #280]	@ (800289c <main+0x334>)
 8002782:	701a      	strb	r2, [r3, #0]
		  if(freqpos>10)
 8002784:	4b45      	ldr	r3, [pc, #276]	@ (800289c <main+0x334>)
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	2b0a      	cmp	r3, #10
 800278a:	f240 80b3 	bls.w	80028f4 <main+0x38c>
		  {
			  freqpos=0;
 800278e:	4b43      	ldr	r3, [pc, #268]	@ (800289c <main+0x334>)
 8002790:	2200      	movs	r2, #0
 8002792:	701a      	strb	r2, [r3, #0]
		  }

	 }
	     break;
 8002794:	e0ae      	b.n	80028f4 <main+0x38c>
	 case 5://波形指针
		 switch(key5_state)
 8002796:	4b43      	ldr	r3, [pc, #268]	@ (80028a4 <main+0x33c>)
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	3b01      	subs	r3, #1
 800279c:	2b03      	cmp	r3, #3
 800279e:	f200 80ab 	bhi.w	80028f8 <main+0x390>
 80027a2:	a201      	add	r2, pc, #4	@ (adr r2, 80027a8 <main+0x240>)
 80027a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027a8:	080027b9 	.word	0x080027b9
 80027ac:	080027eb 	.word	0x080027eb
 80027b0:	0800281d 	.word	0x0800281d
 80027b4:	080028b9 	.word	0x080028b9
			 {
      	 	 case 1://方波

					HAL_TIM_Base_Stop(&htim1);
 80027b8:	4831      	ldr	r0, [pc, #196]	@ (8002880 <main+0x318>)
 80027ba:	f003 fd93 	bl	80062e4 <HAL_TIM_Base_Stop>
					HAL_DMA_Abort(&hdma_tim1_up);
 80027be:	482f      	ldr	r0, [pc, #188]	@ (800287c <main+0x314>)
 80027c0:	f001 ff73 	bl	80046aa <HAL_DMA_Abort>
					pwave=sq_wavedata;
 80027c4:	4b2b      	ldr	r3, [pc, #172]	@ (8002874 <main+0x30c>)
 80027c6:	4a38      	ldr	r2, [pc, #224]	@ (80028a8 <main+0x340>)
 80027c8:	601a      	str	r2, [r3, #0]
					HAL_DMA_Start(&hdma_tim1_up, (uint32_t*)pwave, (uint32_t)&GPIOA->ODR, 256);
 80027ca:	4b2a      	ldr	r3, [pc, #168]	@ (8002874 <main+0x30c>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4619      	mov	r1, r3
 80027d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80027d4:	4a28      	ldr	r2, [pc, #160]	@ (8002878 <main+0x310>)
 80027d6:	4829      	ldr	r0, [pc, #164]	@ (800287c <main+0x314>)
 80027d8:	f001 fed4 	bl	8004584 <HAL_DMA_Start>
					HAL_TIM_Base_Start(&htim1);
 80027dc:	4828      	ldr	r0, [pc, #160]	@ (8002880 <main+0x318>)
 80027de:	f003 fd27 	bl	8006230 <HAL_TIM_Base_Start>
					oledwaveflag=2;
 80027e2:	4b32      	ldr	r3, [pc, #200]	@ (80028ac <main+0x344>)
 80027e4:	2202      	movs	r2, #2
 80027e6:	701a      	strb	r2, [r3, #0]
					break;
 80027e8:	e07f      	b.n	80028ea <main+0x382>
			 case 2://三角
					HAL_TIM_Base_Stop(&htim1);
 80027ea:	4825      	ldr	r0, [pc, #148]	@ (8002880 <main+0x318>)
 80027ec:	f003 fd7a 	bl	80062e4 <HAL_TIM_Base_Stop>
					HAL_DMA_Abort(&hdma_tim1_up);
 80027f0:	4822      	ldr	r0, [pc, #136]	@ (800287c <main+0x314>)
 80027f2:	f001 ff5a 	bl	80046aa <HAL_DMA_Abort>
				    pwave=tang_wavedata;
 80027f6:	4b1f      	ldr	r3, [pc, #124]	@ (8002874 <main+0x30c>)
 80027f8:	4a2d      	ldr	r2, [pc, #180]	@ (80028b0 <main+0x348>)
 80027fa:	601a      	str	r2, [r3, #0]
					HAL_DMA_Start(&hdma_tim1_up, (uint32_t*)pwave, (uint32_t)&GPIOA->ODR, 256);
 80027fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002874 <main+0x30c>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4619      	mov	r1, r3
 8002802:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002806:	4a1c      	ldr	r2, [pc, #112]	@ (8002878 <main+0x310>)
 8002808:	481c      	ldr	r0, [pc, #112]	@ (800287c <main+0x314>)
 800280a:	f001 febb 	bl	8004584 <HAL_DMA_Start>
					HAL_TIM_Base_Start(&htim1);
 800280e:	481c      	ldr	r0, [pc, #112]	@ (8002880 <main+0x318>)
 8002810:	f003 fd0e 	bl	8006230 <HAL_TIM_Base_Start>
					oledwaveflag=3;
 8002814:	4b25      	ldr	r3, [pc, #148]	@ (80028ac <main+0x344>)
 8002816:	2203      	movs	r2, #3
 8002818:	701a      	strb	r2, [r3, #0]
					   break;
 800281a:	e066      	b.n	80028ea <main+0x382>
			 case 3://DC
					HAL_TIM_Base_Stop(&htim1);
 800281c:	4818      	ldr	r0, [pc, #96]	@ (8002880 <main+0x318>)
 800281e:	f003 fd61 	bl	80062e4 <HAL_TIM_Base_Stop>
					HAL_DMA_Abort(&hdma_tim1_up);
 8002822:	4816      	ldr	r0, [pc, #88]	@ (800287c <main+0x314>)
 8002824:	f001 ff41 	bl	80046aa <HAL_DMA_Abort>
					pwave=dc_wavedata;
 8002828:	4b12      	ldr	r3, [pc, #72]	@ (8002874 <main+0x30c>)
 800282a:	4a22      	ldr	r2, [pc, #136]	@ (80028b4 <main+0x34c>)
 800282c:	601a      	str	r2, [r3, #0]
					HAL_DMA_Start(&hdma_tim1_up, (uint32_t*)pwave, (uint32_t)&GPIOA->ODR, 256);
 800282e:	4b11      	ldr	r3, [pc, #68]	@ (8002874 <main+0x30c>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4619      	mov	r1, r3
 8002834:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002838:	4a0f      	ldr	r2, [pc, #60]	@ (8002878 <main+0x310>)
 800283a:	4810      	ldr	r0, [pc, #64]	@ (800287c <main+0x314>)
 800283c:	f001 fea2 	bl	8004584 <HAL_DMA_Start>
					HAL_TIM_Base_Start(&htim1);
 8002840:	480f      	ldr	r0, [pc, #60]	@ (8002880 <main+0x318>)
 8002842:	f003 fcf5 	bl	8006230 <HAL_TIM_Base_Start>
					oledwaveflag=4;
 8002846:	4b19      	ldr	r3, [pc, #100]	@ (80028ac <main+0x344>)
 8002848:	2204      	movs	r2, #4
 800284a:	701a      	strb	r2, [r3, #0]
					break;
 800284c:	e04d      	b.n	80028ea <main+0x382>
 800284e:	bf00      	nop
 8002850:	33333333 	.word	0x33333333
 8002854:	3fd33333 	.word	0x3fd33333
 8002858:	cccccccd 	.word	0xcccccccd
 800285c:	3feccccc 	.word	0x3feccccc
 8002860:	20000144 	.word	0x20000144
 8002864:	200006dc 	.word	0x200006dc
 8002868:	200005e0 	.word	0x200005e0
 800286c:	200057cc 	.word	0x200057cc
 8002870:	20005814 	.word	0x20005814
 8002874:	20000164 	.word	0x20000164
 8002878:	40020014 	.word	0x40020014
 800287c:	200058a4 	.word	0x200058a4
 8002880:	20005784 	.word	0x20005784
 8002884:	20001e4c 	.word	0x20001e4c
 8002888:	20001e4e 	.word	0x20001e4e
 800288c:	20001e4f 	.word	0x20001e4f
 8002890:	20000162 	.word	0x20000162
 8002894:	20000140 	.word	0x20000140
 8002898:	40533333 	.word	0x40533333
 800289c:	20000148 	.word	0x20000148
 80028a0:	2000014c 	.word	0x2000014c
 80028a4:	20001e50 	.word	0x20001e50
 80028a8:	20002058 	.word	0x20002058
 80028ac:	20000141 	.word	0x20000141
 80028b0:	20002258 	.word	0x20002258
 80028b4:	20002458 	.word	0x20002458
			 case 4://正弦
					 HAL_TIM_Base_Stop(&htim1);
 80028b8:	48b5      	ldr	r0, [pc, #724]	@ (8002b90 <main+0x628>)
 80028ba:	f003 fd13 	bl	80062e4 <HAL_TIM_Base_Stop>
					 HAL_DMA_Abort(&hdma_tim1_up);
 80028be:	48b5      	ldr	r0, [pc, #724]	@ (8002b94 <main+0x62c>)
 80028c0:	f001 fef3 	bl	80046aa <HAL_DMA_Abort>
					 pwave=sin_wavedata;
 80028c4:	4bb4      	ldr	r3, [pc, #720]	@ (8002b98 <main+0x630>)
 80028c6:	4ab5      	ldr	r2, [pc, #724]	@ (8002b9c <main+0x634>)
 80028c8:	601a      	str	r2, [r3, #0]
					 HAL_DMA_Start(&hdma_tim1_up, (uint32_t*)pwave, (uint32_t)&GPIOA->ODR, 256);
 80028ca:	4bb3      	ldr	r3, [pc, #716]	@ (8002b98 <main+0x630>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4619      	mov	r1, r3
 80028d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80028d4:	4ab2      	ldr	r2, [pc, #712]	@ (8002ba0 <main+0x638>)
 80028d6:	48af      	ldr	r0, [pc, #700]	@ (8002b94 <main+0x62c>)
 80028d8:	f001 fe54 	bl	8004584 <HAL_DMA_Start>
					 HAL_TIM_Base_Start(&htim1);
 80028dc:	48ac      	ldr	r0, [pc, #688]	@ (8002b90 <main+0x628>)
 80028de:	f003 fca7 	bl	8006230 <HAL_TIM_Base_Start>
					 oledwaveflag=1;
 80028e2:	4bb0      	ldr	r3, [pc, #704]	@ (8002ba4 <main+0x63c>)
 80028e4:	2201      	movs	r2, #1
 80028e6:	701a      	strb	r2, [r3, #0]
					 break;
 80028e8:	bf00      	nop
			 }
	     break;
 80028ea:	e005      	b.n	80028f8 <main+0x390>
		break;
 80028ec:	bf00      	nop
 80028ee:	e004      	b.n	80028fa <main+0x392>
	     break;
 80028f0:	bf00      	nop
 80028f2:	e002      	b.n	80028fa <main+0x392>
	     break;
 80028f4:	bf00      	nop
 80028f6:	e000      	b.n	80028fa <main+0x392>
	     break;
 80028f8:	bf00      	nop
	}
		 keynum=0;
 80028fa:	4bab      	ldr	r3, [pc, #684]	@ (8002ba8 <main+0x640>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	701a      	strb	r2, [r3, #0]
		 exitflag=0;
 8002900:	4baa      	ldr	r3, [pc, #680]	@ (8002bac <main+0x644>)
 8002902:	2200      	movs	r2, #0
 8002904:	701a      	strb	r2, [r3, #0]
 }


	switch(enflag)//获取水平,垂直,触发
 8002906:	4baa      	ldr	r3, [pc, #680]	@ (8002bb0 <main+0x648>)
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	2b03      	cmp	r3, #3
 800290c:	d022      	beq.n	8002954 <main+0x3ec>
 800290e:	2b03      	cmp	r3, #3
 8002910:	f300 808e 	bgt.w	8002a30 <main+0x4c8>
 8002914:	2b01      	cmp	r3, #1
 8002916:	d002      	beq.n	800291e <main+0x3b6>
 8002918:	2b02      	cmp	r3, #2
 800291a:	d00f      	beq.n	800293c <main+0x3d4>
 800291c:	e088      	b.n	8002a30 <main+0x4c8>
	{
	case 1: x=count>20?20:count;
 800291e:	7f3b      	ldrb	r3, [r7, #28]
 8002920:	2b14      	cmp	r3, #20
 8002922:	bf28      	it	cs
 8002924:	2314      	movcs	r3, #20
 8002926:	77fb      	strb	r3, [r7, #31]
            OLED_ShowString(100, 7, "X", 12);
 8002928:	230c      	movs	r3, #12
 800292a:	4aa2      	ldr	r2, [pc, #648]	@ (8002bb4 <main+0x64c>)
 800292c:	2107      	movs	r1, #7
 800292e:	2064      	movs	r0, #100	@ 0x64
 8002930:	f7fe fc3a 	bl	80011a8 <OLED_ShowString>
			numflag=3;
 8002934:	4ba0      	ldr	r3, [pc, #640]	@ (8002bb8 <main+0x650>)
 8002936:	2203      	movs	r2, #3
 8002938:	701a      	strb	r2, [r3, #0]
	         break;
 800293a:	e079      	b.n	8002a30 <main+0x4c8>
	case 2: y=count;
 800293c:	7f3b      	ldrb	r3, [r7, #28]
 800293e:	77bb      	strb	r3, [r7, #30]
	        OLED_ShowString(100, 7, "Y", 12);
 8002940:	230c      	movs	r3, #12
 8002942:	4a9e      	ldr	r2, [pc, #632]	@ (8002bbc <main+0x654>)
 8002944:	2107      	movs	r1, #7
 8002946:	2064      	movs	r0, #100	@ 0x64
 8002948:	f7fe fc2e 	bl	80011a8 <OLED_ShowString>
			numflag=3;
 800294c:	4b9a      	ldr	r3, [pc, #616]	@ (8002bb8 <main+0x650>)
 800294e:	2203      	movs	r2, #3
 8002950:	701a      	strb	r2, [r3, #0]
            break;
 8002952:	e06d      	b.n	8002a30 <main+0x4c8>
	case 3: tgv=count;
 8002954:	7f3b      	ldrb	r3, [r7, #28]
 8002956:	777b      	strb	r3, [r7, #29]
	        OLED_ShowString(100, 7, "TGV", 12);
 8002958:	230c      	movs	r3, #12
 800295a:	4a99      	ldr	r2, [pc, #612]	@ (8002bc0 <main+0x658>)
 800295c:	2107      	movs	r1, #7
 800295e:	2064      	movs	r0, #100	@ 0x64
 8002960:	f7fe fc22 	bl	80011a8 <OLED_ShowString>
	        float realtgv=(tgv-26)*1.27/y+1.65;
 8002964:	7f7b      	ldrb	r3, [r7, #29]
 8002966:	3b1a      	subs	r3, #26
 8002968:	4618      	mov	r0, r3
 800296a:	f7fd fde7 	bl	800053c <__aeabi_i2d>
 800296e:	a380      	add	r3, pc, #512	@ (adr r3, 8002b70 <main+0x608>)
 8002970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002974:	f7fd fe4c 	bl	8000610 <__aeabi_dmul>
 8002978:	4602      	mov	r2, r0
 800297a:	460b      	mov	r3, r1
 800297c:	4614      	mov	r4, r2
 800297e:	461d      	mov	r5, r3
 8002980:	7fbb      	ldrb	r3, [r7, #30]
 8002982:	4618      	mov	r0, r3
 8002984:	f7fd fdda 	bl	800053c <__aeabi_i2d>
 8002988:	4602      	mov	r2, r0
 800298a:	460b      	mov	r3, r1
 800298c:	4620      	mov	r0, r4
 800298e:	4629      	mov	r1, r5
 8002990:	f7fd ff68 	bl	8000864 <__aeabi_ddiv>
 8002994:	4602      	mov	r2, r0
 8002996:	460b      	mov	r3, r1
 8002998:	4610      	mov	r0, r2
 800299a:	4619      	mov	r1, r3
 800299c:	a376      	add	r3, pc, #472	@ (adr r3, 8002b78 <main+0x610>)
 800299e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029a2:	f7fd fc7f 	bl	80002a4 <__adddf3>
 80029a6:	4602      	mov	r2, r0
 80029a8:	460b      	mov	r3, r1
 80029aa:	4610      	mov	r0, r2
 80029ac:	4619      	mov	r1, r3
 80029ae:	f7fe f911 	bl	8000bd4 <__aeabi_d2f>
 80029b2:	4603      	mov	r3, r0
 80029b4:	61bb      	str	r3, [r7, #24]
	        if(realtgv>=3.3||realtgv<=0)
 80029b6:	69b8      	ldr	r0, [r7, #24]
 80029b8:	f7fd fdd2 	bl	8000560 <__aeabi_f2d>
 80029bc:	a370      	add	r3, pc, #448	@ (adr r3, 8002b80 <main+0x618>)
 80029be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c2:	f7fe f8ab 	bl	8000b1c <__aeabi_dcmpge>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d106      	bne.n	80029da <main+0x472>
 80029cc:	edd7 7a06 	vldr	s15, [r7, #24]
 80029d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80029d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029d8:	d810      	bhi.n	80029fc <main+0x494>
	        {
	        	realtgv=0;
 80029da:	f04f 0300 	mov.w	r3, #0
 80029de:	61bb      	str	r3, [r7, #24]
	        	OLED_ShowNum(100, 6, realtgv, 1, 12);
 80029e0:	edd7 7a06 	vldr	s15, [r7, #24]
 80029e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029e8:	230c      	movs	r3, #12
 80029ea:	9300      	str	r3, [sp, #0]
 80029ec:	2301      	movs	r3, #1
 80029ee:	ee17 2a90 	vmov	r2, s15
 80029f2:	2106      	movs	r1, #6
 80029f4:	2064      	movs	r0, #100	@ 0x64
 80029f6:	f7fe fc17 	bl	8001228 <OLED_ShowNum>
 80029fa:	e007      	b.n	8002a0c <main+0x4a4>
	        }
	        else
	        {
		        OLED_ShowFloat(100, 6, realtgv, 1, 12);//触发电压
 80029fc:	230c      	movs	r3, #12
 80029fe:	2201      	movs	r2, #1
 8002a00:	ed97 0a06 	vldr	s0, [r7, #24]
 8002a04:	2106      	movs	r1, #6
 8002a06:	2064      	movs	r0, #100	@ 0x64
 8002a08:	f7fe fc7a 	bl	8001300 <OLED_ShowFloat>
	        }
	        OLED_DrawLine(88, 52-tgv, 91, 52-tgv, 1);//触发小短线
 8002a0c:	7f7b      	ldrb	r3, [r7, #29]
 8002a0e:	f1c3 0334 	rsb	r3, r3, #52	@ 0x34
 8002a12:	b2d9      	uxtb	r1, r3
 8002a14:	7f7b      	ldrb	r3, [r7, #29]
 8002a16:	f1c3 0334 	rsb	r3, r3, #52	@ 0x34
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	9200      	str	r2, [sp, #0]
 8002a20:	225b      	movs	r2, #91	@ 0x5b
 8002a22:	2058      	movs	r0, #88	@ 0x58
 8002a24:	f7fe fe06 	bl	8001634 <OLED_DrawLine>
	        numflag=3;
 8002a28:	4b63      	ldr	r3, [pc, #396]	@ (8002bb8 <main+0x650>)
 8002a2a:	2203      	movs	r2, #3
 8002a2c:	701a      	strb	r2, [r3, #0]
	        break;
 8002a2e:	bf00      	nop
	}


    switch(oledwaveflag)//显示当前波形
 8002a30:	4b5c      	ldr	r3, [pc, #368]	@ (8002ba4 <main+0x63c>)
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	3b01      	subs	r3, #1
 8002a36:	2b03      	cmp	r3, #3
 8002a38:	d826      	bhi.n	8002a88 <main+0x520>
 8002a3a:	a201      	add	r2, pc, #4	@ (adr r2, 8002a40 <main+0x4d8>)
 8002a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a40:	08002a51 	.word	0x08002a51
 8002a44:	08002a5f 	.word	0x08002a5f
 8002a48:	08002a6d 	.word	0x08002a6d
 8002a4c:	08002a7b 	.word	0x08002a7b
    {
    case 1: OLED_ShowString(100, 1, "sin", 12);break;
 8002a50:	230c      	movs	r3, #12
 8002a52:	4a5c      	ldr	r2, [pc, #368]	@ (8002bc4 <main+0x65c>)
 8002a54:	2101      	movs	r1, #1
 8002a56:	2064      	movs	r0, #100	@ 0x64
 8002a58:	f7fe fba6 	bl	80011a8 <OLED_ShowString>
 8002a5c:	e014      	b.n	8002a88 <main+0x520>
    case 2:	OLED_ShowString(100, 1, "sq", 12);break;
 8002a5e:	230c      	movs	r3, #12
 8002a60:	4a59      	ldr	r2, [pc, #356]	@ (8002bc8 <main+0x660>)
 8002a62:	2101      	movs	r1, #1
 8002a64:	2064      	movs	r0, #100	@ 0x64
 8002a66:	f7fe fb9f 	bl	80011a8 <OLED_ShowString>
 8002a6a:	e00d      	b.n	8002a88 <main+0x520>
    case 3: OLED_ShowString(100, 1, "tang", 12);break;
 8002a6c:	230c      	movs	r3, #12
 8002a6e:	4a57      	ldr	r2, [pc, #348]	@ (8002bcc <main+0x664>)
 8002a70:	2101      	movs	r1, #1
 8002a72:	2064      	movs	r0, #100	@ 0x64
 8002a74:	f7fe fb98 	bl	80011a8 <OLED_ShowString>
 8002a78:	e006      	b.n	8002a88 <main+0x520>
    case 4: OLED_ShowString(100, 1, "dc", 12);break;
 8002a7a:	230c      	movs	r3, #12
 8002a7c:	4a54      	ldr	r2, [pc, #336]	@ (8002bd0 <main+0x668>)
 8002a7e:	2101      	movs	r1, #1
 8002a80:	2064      	movs	r0, #100	@ 0x64
 8002a82:	f7fe fb91 	bl	80011a8 <OLED_ShowString>
 8002a86:	bf00      	nop
    }

    uint16_t sample=htim2.Instance->PSC;//显示采样率模式
 8002a88:	4b52      	ldr	r3, [pc, #328]	@ (8002bd4 <main+0x66c>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a8e:	82fb      	strh	r3, [r7, #22]
	switch(sample)
 8002a90:	8afb      	ldrh	r3, [r7, #22]
 8002a92:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d016      	beq.n	8002ac8 <main+0x560>
 8002a9a:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	dc19      	bgt.n	8002ad6 <main+0x56e>
 8002aa2:	2b13      	cmp	r3, #19
 8002aa4:	d002      	beq.n	8002aac <main+0x544>
 8002aa6:	2b31      	cmp	r3, #49	@ 0x31
 8002aa8:	d007      	beq.n	8002aba <main+0x552>
 8002aaa:	e014      	b.n	8002ad6 <main+0x56e>
    {
	   case 19:OLED_ShowString(100, 2, "High", 12);break;
 8002aac:	230c      	movs	r3, #12
 8002aae:	4a4a      	ldr	r2, [pc, #296]	@ (8002bd8 <main+0x670>)
 8002ab0:	2102      	movs	r1, #2
 8002ab2:	2064      	movs	r0, #100	@ 0x64
 8002ab4:	f7fe fb78 	bl	80011a8 <OLED_ShowString>
 8002ab8:	e00d      	b.n	8002ad6 <main+0x56e>
	   case 49:OLED_ShowString(100, 2, "Mid", 12);break;
 8002aba:	230c      	movs	r3, #12
 8002abc:	4a47      	ldr	r2, [pc, #284]	@ (8002bdc <main+0x674>)
 8002abe:	2102      	movs	r1, #2
 8002ac0:	2064      	movs	r0, #100	@ 0x64
 8002ac2:	f7fe fb71 	bl	80011a8 <OLED_ShowString>
 8002ac6:	e006      	b.n	8002ad6 <main+0x56e>
	   case 2999:OLED_ShowString(100, 2 , "Low", 12);break;
 8002ac8:	230c      	movs	r3, #12
 8002aca:	4a45      	ldr	r2, [pc, #276]	@ (8002be0 <main+0x678>)
 8002acc:	2102      	movs	r1, #2
 8002ace:	2064      	movs	r0, #100	@ 0x64
 8002ad0:	f7fe fb6a 	bl	80011a8 <OLED_ShowString>
 8002ad4:	bf00      	nop
	}


    if(oledwaveflag==4)//更新测量幅度
 8002ad6:	4b33      	ldr	r3, [pc, #204]	@ (8002ba4 <main+0x63c>)
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	2b04      	cmp	r3, #4
 8002adc:	d127      	bne.n	8002b2e <main+0x5c6>
    {
    	uint16_t nowadcvalue=HAL_ADC_GetValue(&hadc1);
 8002ade:	4841      	ldr	r0, [pc, #260]	@ (8002be4 <main+0x67c>)
 8002ae0:	f001 f8be 	bl	8003c60 <HAL_ADC_GetValue>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	81fb      	strh	r3, [r7, #14]
    	float getdcvoltage= nowadcvalue/4094.9*3.3;
 8002ae8:	89fb      	ldrh	r3, [r7, #14]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7fd fd26 	bl	800053c <__aeabi_i2d>
 8002af0:	a325      	add	r3, pc, #148	@ (adr r3, 8002b88 <main+0x620>)
 8002af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002af6:	f7fd feb5 	bl	8000864 <__aeabi_ddiv>
 8002afa:	4602      	mov	r2, r0
 8002afc:	460b      	mov	r3, r1
 8002afe:	4610      	mov	r0, r2
 8002b00:	4619      	mov	r1, r3
 8002b02:	a31f      	add	r3, pc, #124	@ (adr r3, 8002b80 <main+0x618>)
 8002b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b08:	f7fd fd82 	bl	8000610 <__aeabi_dmul>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	460b      	mov	r3, r1
 8002b10:	4610      	mov	r0, r2
 8002b12:	4619      	mov	r1, r3
 8002b14:	f7fe f85e 	bl	8000bd4 <__aeabi_d2f>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	60bb      	str	r3, [r7, #8]
    	OLED_ShowFloat(0, 7, getdcvoltage, 1, 12);
 8002b1c:	230c      	movs	r3, #12
 8002b1e:	2201      	movs	r2, #1
 8002b20:	ed97 0a02 	vldr	s0, [r7, #8]
 8002b24:	2107      	movs	r1, #7
 8002b26:	2000      	movs	r0, #0
 8002b28:	f7fe fbea 	bl	8001300 <OLED_ShowFloat>
 8002b2c:	e00b      	b.n	8002b46 <main+0x5de>
    }
    else
    {
    	float getvoltage=get_amplitude();
 8002b2e:	f000 fa97 	bl	8003060 <get_amplitude>
 8002b32:	ed87 0a04 	vstr	s0, [r7, #16]
    	OLED_ShowFloat(0, 7, getvoltage, 1, 12);
 8002b36:	230c      	movs	r3, #12
 8002b38:	2201      	movs	r2, #1
 8002b3a:	ed97 0a04 	vldr	s0, [r7, #16]
 8002b3e:	2107      	movs	r1, #7
 8002b40:	2000      	movs	r0, #0
 8002b42:	f7fe fbdd 	bl	8001300 <OLED_ShowFloat>
	}
    OLED_ShowChar(23, 7, 'V', 12);
 8002b46:	230c      	movs	r3, #12
 8002b48:	2256      	movs	r2, #86	@ 0x56
 8002b4a:	2107      	movs	r1, #7
 8002b4c:	2017      	movs	r0, #23
 8002b4e:	f7fe fa8f 	bl	8001070 <OLED_ShowChar>


    if(oledwaveflag==4)//更新频率
 8002b52:	4b14      	ldr	r3, [pc, #80]	@ (8002ba4 <main+0x63c>)
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	2b04      	cmp	r3, #4
 8002b58:	d146      	bne.n	8002be8 <main+0x680>
    {
        OLED_ShowNum(37, 7, 0, 4, 12);
 8002b5a:	230c      	movs	r3, #12
 8002b5c:	9300      	str	r3, [sp, #0]
 8002b5e:	2304      	movs	r3, #4
 8002b60:	2200      	movs	r2, #0
 8002b62:	2107      	movs	r1, #7
 8002b64:	2025      	movs	r0, #37	@ 0x25
 8002b66:	f7fe fb5f 	bl	8001228 <OLED_ShowNum>
 8002b6a:	e04f      	b.n	8002c0c <main+0x6a4>
 8002b6c:	f3af 8000 	nop.w
 8002b70:	851eb852 	.word	0x851eb852
 8002b74:	3ff451eb 	.word	0x3ff451eb
 8002b78:	66666666 	.word	0x66666666
 8002b7c:	3ffa6666 	.word	0x3ffa6666
 8002b80:	66666666 	.word	0x66666666
 8002b84:	400a6666 	.word	0x400a6666
 8002b88:	cccccccd 	.word	0xcccccccd
 8002b8c:	40affdcc 	.word	0x40affdcc
 8002b90:	20005784 	.word	0x20005784
 8002b94:	200058a4 	.word	0x200058a4
 8002b98:	20000164 	.word	0x20000164
 8002b9c:	20001e58 	.word	0x20001e58
 8002ba0:	40020014 	.word	0x40020014
 8002ba4:	20000141 	.word	0x20000141
 8002ba8:	20001e4e 	.word	0x20001e4e
 8002bac:	20001e4c 	.word	0x20001e4c
 8002bb0:	20000140 	.word	0x20000140
 8002bb4:	0800959c 	.word	0x0800959c
 8002bb8:	20001e4d 	.word	0x20001e4d
 8002bbc:	080095a0 	.word	0x080095a0
 8002bc0:	080095a4 	.word	0x080095a4
 8002bc4:	080095a8 	.word	0x080095a8
 8002bc8:	080095ac 	.word	0x080095ac
 8002bcc:	080095b0 	.word	0x080095b0
 8002bd0:	080095b8 	.word	0x080095b8
 8002bd4:	200057cc 	.word	0x200057cc
 8002bd8:	080095bc 	.word	0x080095bc
 8002bdc:	080095c4 	.word	0x080095c4
 8002be0:	080095c8 	.word	0x080095c8
 8002be4:	200005e0 	.word	0x200005e0
    }
    else
    {
       OLED_ShowNum(37, 7,nowfreq+1, 4, 12);
 8002be8:	4b29      	ldr	r3, [pc, #164]	@ (8002c90 <main+0x728>)
 8002bea:	edd3 7a00 	vldr	s15, [r3]
 8002bee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002bf2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002bf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bfa:	230c      	movs	r3, #12
 8002bfc:	9300      	str	r3, [sp, #0]
 8002bfe:	2304      	movs	r3, #4
 8002c00:	ee17 2a90 	vmov	r2, s15
 8002c04:	2107      	movs	r1, #7
 8002c06:	2025      	movs	r0, #37	@ 0x25
 8002c08:	f7fe fb0e 	bl	8001228 <OLED_ShowNum>
    }
    OLED_ShowString(61, 7, "Hz", 12);
 8002c0c:	230c      	movs	r3, #12
 8002c0e:	4a21      	ldr	r2, [pc, #132]	@ (8002c94 <main+0x72c>)
 8002c10:	2107      	movs	r1, #7
 8002c12:	203d      	movs	r0, #61	@ 0x3d
 8002c14:	f7fe fac8 	bl	80011a8 <OLED_ShowString>



	OLED_ShowString(100, 0, "Y-T", 12);
 8002c18:	230c      	movs	r3, #12
 8002c1a:	4a1f      	ldr	r2, [pc, #124]	@ (8002c98 <main+0x730>)
 8002c1c:	2100      	movs	r1, #0
 8002c1e:	2064      	movs	r0, #100	@ 0x64
 8002c20:	f7fe fac2 	bl	80011a8 <OLED_ShowString>
    OLED_grid();
 8002c24:	f7fe ffac 	bl	8001b80 <OLED_grid>



	adcvalue_change_waveform(x,y);// 将 ADC 数据转换为波形数据
 8002c28:	7fba      	ldrb	r2, [r7, #30]
 8002c2a:	7ffb      	ldrb	r3, [r7, #31]
 8002c2c:	4611      	mov	r1, r2
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f000 fa4e 	bl	80030d0 <adcvalue_change_waveform>
	uint8_t tgpos = get_triggervoltage_pos(tgv);// 获取触发位置
 8002c34:	7f7b      	ldrb	r3, [r7, #29]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f000 faba 	bl	80031b0 <get_triggervoltage_pos>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	71fb      	strb	r3, [r7, #7]
	oledshow_waveform(tgpos);//画波形
 8002c40:	79fb      	ldrb	r3, [r7, #7]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f000 faf6 	bl	8003234 <oledshow_waveform>



	OLED_Update_Screen();
 8002c48:	f7fe fdc8 	bl	80017dc <OLED_Update_Screen>

	 //参数局部刷新
	 switch(numflag)
 8002c4c:	4b13      	ldr	r3, [pc, #76]	@ (8002c9c <main+0x734>)
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	2b03      	cmp	r3, #3
 8002c52:	d012      	beq.n	8002c7a <main+0x712>
 8002c54:	2b03      	cmp	r3, #3
 8002c56:	dc18      	bgt.n	8002c8a <main+0x722>
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d002      	beq.n	8002c62 <main+0x6fa>
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d006      	beq.n	8002c6e <main+0x706>
 8002c60:	e013      	b.n	8002c8a <main+0x722>
	{
		case 1:OLED_Clear_num_1();
 8002c62:	f7fe fe0f 	bl	8001884 <OLED_Clear_num_1>
			   numflag=0;
 8002c66:	4b0d      	ldr	r3, [pc, #52]	@ (8002c9c <main+0x734>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	701a      	strb	r2, [r3, #0]
			   break;
 8002c6c:	e00d      	b.n	8002c8a <main+0x722>
		case 2:OLED_Clear_num_2();
 8002c6e:	f7fe fe2b 	bl	80018c8 <OLED_Clear_num_2>
			   numflag=0;
 8002c72:	4b0a      	ldr	r3, [pc, #40]	@ (8002c9c <main+0x734>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	701a      	strb	r2, [r3, #0]
			   break;
 8002c78:	e007      	b.n	8002c8a <main+0x722>
		case 3:OLED_Clear_num_3();
 8002c7a:	f7fe fe47 	bl	800190c <OLED_Clear_num_3>
			   OLED_Clear_num_4();
 8002c7e:	f7fe fe67 	bl	8001950 <OLED_Clear_num_4>
			   numflag=0;
 8002c82:	4b06      	ldr	r3, [pc, #24]	@ (8002c9c <main+0x734>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	701a      	strb	r2, [r3, #0]
			   break;
 8002c88:	bf00      	nop
	}
    //波形刷新
	OLED_Clear_wave();
 8002c8a:	f7fe fdd3 	bl	8001834 <OLED_Clear_wave>
  {
 8002c8e:	e4bd      	b.n	800260c <main+0xa4>
 8002c90:	20001e54 	.word	0x20001e54
 8002c94:	080095cc 	.word	0x080095cc
 8002c98:	080095d0 	.word	0x080095d0
 8002c9c:	20001e4d 	.word	0x20001e4d

08002ca0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b094      	sub	sp, #80	@ 0x50
 8002ca4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ca6:	f107 0320 	add.w	r3, r7, #32
 8002caa:	2230      	movs	r2, #48	@ 0x30
 8002cac:	2100      	movs	r1, #0
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f005 fbd6 	bl	8008460 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002cb4:	f107 030c 	add.w	r3, r7, #12
 8002cb8:	2200      	movs	r2, #0
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	605a      	str	r2, [r3, #4]
 8002cbe:	609a      	str	r2, [r3, #8]
 8002cc0:	60da      	str	r2, [r3, #12]
 8002cc2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	60bb      	str	r3, [r7, #8]
 8002cc8:	4b27      	ldr	r3, [pc, #156]	@ (8002d68 <SystemClock_Config+0xc8>)
 8002cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ccc:	4a26      	ldr	r2, [pc, #152]	@ (8002d68 <SystemClock_Config+0xc8>)
 8002cce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cd2:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cd4:	4b24      	ldr	r3, [pc, #144]	@ (8002d68 <SystemClock_Config+0xc8>)
 8002cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cdc:	60bb      	str	r3, [r7, #8]
 8002cde:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	607b      	str	r3, [r7, #4]
 8002ce4:	4b21      	ldr	r3, [pc, #132]	@ (8002d6c <SystemClock_Config+0xcc>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a20      	ldr	r2, [pc, #128]	@ (8002d6c <SystemClock_Config+0xcc>)
 8002cea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002cee:	6013      	str	r3, [r2, #0]
 8002cf0:	4b1e      	ldr	r3, [pc, #120]	@ (8002d6c <SystemClock_Config+0xcc>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002cf8:	607b      	str	r3, [r7, #4]
 8002cfa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d00:	2301      	movs	r3, #1
 8002d02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002d04:	2310      	movs	r3, #16
 8002d06:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d08:	2302      	movs	r3, #2
 8002d0a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002d10:	2308      	movs	r3, #8
 8002d12:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002d14:	2364      	movs	r3, #100	@ 0x64
 8002d16:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002d18:	2302      	movs	r3, #2
 8002d1a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002d1c:	2304      	movs	r3, #4
 8002d1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d20:	f107 0320 	add.w	r3, r7, #32
 8002d24:	4618      	mov	r0, r3
 8002d26:	f002 fdef 	bl	8005908 <HAL_RCC_OscConfig>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002d30:	f000 f8ba 	bl	8002ea8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d34:	230f      	movs	r3, #15
 8002d36:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d38:	2302      	movs	r3, #2
 8002d3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002d40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d44:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d46:	2300      	movs	r3, #0
 8002d48:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002d4a:	f107 030c 	add.w	r3, r7, #12
 8002d4e:	2103      	movs	r1, #3
 8002d50:	4618      	mov	r0, r3
 8002d52:	f003 f851 	bl	8005df8 <HAL_RCC_ClockConfig>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002d5c:	f000 f8a4 	bl	8002ea8 <Error_Handler>
  }
}
 8002d60:	bf00      	nop
 8002d62:	3750      	adds	r7, #80	@ 0x50
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	40023800 	.word	0x40023800
 8002d6c:	40007000 	.word	0x40007000

08002d70 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	4603      	mov	r3, r0
 8002d78:	80fb      	strh	r3, [r7, #6]

	exitflag=1;
 8002d7a:	4b35      	ldr	r3, [pc, #212]	@ (8002e50 <HAL_GPIO_EXTI_Callback+0xe0>)
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	701a      	strb	r2, [r3, #0]
	HAL_Delay(100);
 8002d80:	2064      	movs	r0, #100	@ 0x64
 8002d82:	f000 fe15 	bl	80039b0 <HAL_Delay>
if(keynum==0)
 8002d86:	4b33      	ldr	r3, [pc, #204]	@ (8002e54 <HAL_GPIO_EXTI_Callback+0xe4>)
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d15b      	bne.n	8002e46 <HAL_GPIO_EXTI_Callback+0xd6>
{
    switch (GPIO_Pin)
 8002d8e:	88fb      	ldrh	r3, [r7, #6]
 8002d90:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d94:	d042      	beq.n	8002e1c <HAL_GPIO_EXTI_Callback+0xac>
 8002d96:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d9a:	dc54      	bgt.n	8002e46 <HAL_GPIO_EXTI_Callback+0xd6>
 8002d9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002da0:	d038      	beq.n	8002e14 <HAL_GPIO_EXTI_Callback+0xa4>
 8002da2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002da6:	dc4e      	bgt.n	8002e46 <HAL_GPIO_EXTI_Callback+0xd6>
 8002da8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002dac:	d02e      	beq.n	8002e0c <HAL_GPIO_EXTI_Callback+0x9c>
 8002dae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002db2:	dc48      	bgt.n	8002e46 <HAL_GPIO_EXTI_Callback+0xd6>
 8002db4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002db8:	d003      	beq.n	8002dc2 <HAL_GPIO_EXTI_Callback+0x52>
 8002dba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002dbe:	d014      	beq.n	8002dea <HAL_GPIO_EXTI_Callback+0x7a>
			}
			numflag=1;
             break;
    }
 }
}
 8002dc0:	e041      	b.n	8002e46 <HAL_GPIO_EXTI_Callback+0xd6>
            keynum=1;
 8002dc2:	4b24      	ldr	r3, [pc, #144]	@ (8002e54 <HAL_GPIO_EXTI_Callback+0xe4>)
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	701a      	strb	r2, [r3, #0]
            key1_state++;
 8002dc8:	4b23      	ldr	r3, [pc, #140]	@ (8002e58 <HAL_GPIO_EXTI_Callback+0xe8>)
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	3301      	adds	r3, #1
 8002dce:	b2da      	uxtb	r2, r3
 8002dd0:	4b21      	ldr	r3, [pc, #132]	@ (8002e58 <HAL_GPIO_EXTI_Callback+0xe8>)
 8002dd2:	701a      	strb	r2, [r3, #0]
            if(key1_state>3)
 8002dd4:	4b20      	ldr	r3, [pc, #128]	@ (8002e58 <HAL_GPIO_EXTI_Callback+0xe8>)
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	2b03      	cmp	r3, #3
 8002dda:	d902      	bls.n	8002de2 <HAL_GPIO_EXTI_Callback+0x72>
				key1_state=1;
 8002ddc:	4b1e      	ldr	r3, [pc, #120]	@ (8002e58 <HAL_GPIO_EXTI_Callback+0xe8>)
 8002dde:	2201      	movs	r2, #1
 8002de0:	701a      	strb	r2, [r3, #0]
			numflag=2;
 8002de2:	4b1e      	ldr	r3, [pc, #120]	@ (8002e5c <HAL_GPIO_EXTI_Callback+0xec>)
 8002de4:	2202      	movs	r2, #2
 8002de6:	701a      	strb	r2, [r3, #0]
            break;
 8002de8:	e02d      	b.n	8002e46 <HAL_GPIO_EXTI_Callback+0xd6>
        	keynum=2;
 8002dea:	4b1a      	ldr	r3, [pc, #104]	@ (8002e54 <HAL_GPIO_EXTI_Callback+0xe4>)
 8002dec:	2202      	movs	r2, #2
 8002dee:	701a      	strb	r2, [r3, #0]
        	key2_state++;
 8002df0:	4b1b      	ldr	r3, [pc, #108]	@ (8002e60 <HAL_GPIO_EXTI_Callback+0xf0>)
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	3301      	adds	r3, #1
 8002df6:	b2da      	uxtb	r2, r3
 8002df8:	4b19      	ldr	r3, [pc, #100]	@ (8002e60 <HAL_GPIO_EXTI_Callback+0xf0>)
 8002dfa:	701a      	strb	r2, [r3, #0]
			if(key2_state>3)
 8002dfc:	4b18      	ldr	r3, [pc, #96]	@ (8002e60 <HAL_GPIO_EXTI_Callback+0xf0>)
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	2b03      	cmp	r3, #3
 8002e02:	d91f      	bls.n	8002e44 <HAL_GPIO_EXTI_Callback+0xd4>
				key2_state=1;
 8002e04:	4b16      	ldr	r3, [pc, #88]	@ (8002e60 <HAL_GPIO_EXTI_Callback+0xf0>)
 8002e06:	2201      	movs	r2, #1
 8002e08:	701a      	strb	r2, [r3, #0]
            break;
 8002e0a:	e01b      	b.n	8002e44 <HAL_GPIO_EXTI_Callback+0xd4>
        	keynum=3;
 8002e0c:	4b11      	ldr	r3, [pc, #68]	@ (8002e54 <HAL_GPIO_EXTI_Callback+0xe4>)
 8002e0e:	2203      	movs	r2, #3
 8002e10:	701a      	strb	r2, [r3, #0]
             break;
 8002e12:	e018      	b.n	8002e46 <HAL_GPIO_EXTI_Callback+0xd6>
        	keynum=4;
 8002e14:	4b0f      	ldr	r3, [pc, #60]	@ (8002e54 <HAL_GPIO_EXTI_Callback+0xe4>)
 8002e16:	2204      	movs	r2, #4
 8002e18:	701a      	strb	r2, [r3, #0]
             break;
 8002e1a:	e014      	b.n	8002e46 <HAL_GPIO_EXTI_Callback+0xd6>
        	keynum=5;
 8002e1c:	4b0d      	ldr	r3, [pc, #52]	@ (8002e54 <HAL_GPIO_EXTI_Callback+0xe4>)
 8002e1e:	2205      	movs	r2, #5
 8002e20:	701a      	strb	r2, [r3, #0]
        	key5_state++;
 8002e22:	4b10      	ldr	r3, [pc, #64]	@ (8002e64 <HAL_GPIO_EXTI_Callback+0xf4>)
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	3301      	adds	r3, #1
 8002e28:	b2da      	uxtb	r2, r3
 8002e2a:	4b0e      	ldr	r3, [pc, #56]	@ (8002e64 <HAL_GPIO_EXTI_Callback+0xf4>)
 8002e2c:	701a      	strb	r2, [r3, #0]
			if(key5_state>4)
 8002e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8002e64 <HAL_GPIO_EXTI_Callback+0xf4>)
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	2b04      	cmp	r3, #4
 8002e34:	d902      	bls.n	8002e3c <HAL_GPIO_EXTI_Callback+0xcc>
				key5_state=1;
 8002e36:	4b0b      	ldr	r3, [pc, #44]	@ (8002e64 <HAL_GPIO_EXTI_Callback+0xf4>)
 8002e38:	2201      	movs	r2, #1
 8002e3a:	701a      	strb	r2, [r3, #0]
			numflag=1;
 8002e3c:	4b07      	ldr	r3, [pc, #28]	@ (8002e5c <HAL_GPIO_EXTI_Callback+0xec>)
 8002e3e:	2201      	movs	r2, #1
 8002e40:	701a      	strb	r2, [r3, #0]
             break;
 8002e42:	e000      	b.n	8002e46 <HAL_GPIO_EXTI_Callback+0xd6>
            break;
 8002e44:	bf00      	nop
}
 8002e46:	bf00      	nop
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	20001e4c 	.word	0x20001e4c
 8002e54:	20001e4e 	.word	0x20001e4e
 8002e58:	20001e4f 	.word	0x20001e4f
 8002e5c:	20001e4d 	.word	0x20001e4d
 8002e60:	20000162 	.word	0x20000162
 8002e64:	20001e50 	.word	0x20001e50

08002e68 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)//ADC传输完成计算
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a08      	ldr	r2, [pc, #32]	@ (8002e98 <HAL_ADC_ConvCpltCallback+0x30>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d10a      	bne.n	8002e90 <HAL_ADC_ConvCpltCallback+0x28>
    {
        fftdata();
 8002e7a:	f000 f81b 	bl	8002eb4 <fftdata>
        getfrequency(&nowfreq);
 8002e7e:	4807      	ldr	r0, [pc, #28]	@ (8002e9c <HAL_ADC_ConvCpltCallback+0x34>)
 8002e80:	f000 f846 	bl	8002f10 <getfrequency>
        HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcvalue, 3000);
 8002e84:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002e88:	4905      	ldr	r1, [pc, #20]	@ (8002ea0 <HAL_ADC_ConvCpltCallback+0x38>)
 8002e8a:	4806      	ldr	r0, [pc, #24]	@ (8002ea4 <HAL_ADC_ConvCpltCallback+0x3c>)
 8002e8c:	f000 fdf8 	bl	8003a80 <HAL_ADC_Start_DMA>
    }
}
 8002e90:	bf00      	nop
 8002e92:	3708      	adds	r7, #8
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	40012000 	.word	0x40012000
 8002e9c:	20001e54 	.word	0x20001e54
 8002ea0:	200006dc 	.word	0x200006dc
 8002ea4:	200005e0 	.word	0x200005e0

08002ea8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002eac:	b672      	cpsid	i
}
 8002eae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002eb0:	bf00      	nop
 8002eb2:	e7fd      	b.n	8002eb0 <Error_Handler+0x8>

08002eb4 <fftdata>:
float32_t fft_input[2048];
float32_t fft_output[1024];

//减去直流
void fftdata(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
    for(int i=0; i<2048; i++)
 8002eba:	2300      	movs	r3, #0
 8002ebc:	607b      	str	r3, [r7, #4]
 8002ebe:	e014      	b.n	8002eea <fftdata+0x36>
    {
        fft_input[i] = (float32_t)adcvalue[i] - 2047.5;
 8002ec0:	4a0f      	ldr	r2, [pc, #60]	@ (8002f00 <fftdata+0x4c>)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ec8:	ee07 3a90 	vmov	s15, r3
 8002ecc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ed0:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8002f04 <fftdata+0x50>
 8002ed4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002ed8:	4a0b      	ldr	r2, [pc, #44]	@ (8002f08 <fftdata+0x54>)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	4413      	add	r3, r2
 8002ee0:	edc3 7a00 	vstr	s15, [r3]
    for(int i=0; i<2048; i++)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	607b      	str	r3, [r7, #4]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ef0:	dbe6      	blt.n	8002ec0 <fftdata+0xc>
    }
}
 8002ef2:	bf00      	nop
 8002ef4:	bf00      	nop
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr
 8002f00:	200006dc 	.word	0x200006dc
 8002f04:	44fff000 	.word	0x44fff000
 8002f08:	20002784 	.word	0x20002784
 8002f0c:	00000000 	.word	0x00000000

08002f10 <getfrequency>:

void getfrequency(float32_t* freq)
{
 8002f10:	b5b0      	push	{r4, r5, r7, lr}
 8002f12:	b08c      	sub	sp, #48	@ 0x30
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
    arm_rfft_fast_instance_f32 fft_inst;
    float32_t max_value;
    uint32_t max_pos;

    arm_rfft_fast_init_f32(&fft_inst, 1024);
 8002f18:	f107 0314 	add.w	r3, r7, #20
 8002f1c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002f20:	4618      	mov	r0, r3
 8002f22:	f004 f9d5 	bl	80072d0 <arm_rfft_fast_init_f32>

    arm_rfft_fast_f32(&fft_inst, fft_input, fft_output, 0);
 8002f26:	f107 0014 	add.w	r0, r7, #20
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	4a28      	ldr	r2, [pc, #160]	@ (8002fd0 <getfrequency+0xc0>)
 8002f2e:	4929      	ldr	r1, [pc, #164]	@ (8002fd4 <getfrequency+0xc4>)
 8002f30:	f004 fa50 	bl	80073d4 <arm_rfft_fast_f32>

    arm_cmplx_mag_f32(fft_output, fft_output, 512);
 8002f34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f38:	4925      	ldr	r1, [pc, #148]	@ (8002fd0 <getfrequency+0xc0>)
 8002f3a:	4825      	ldr	r0, [pc, #148]	@ (8002fd0 <getfrequency+0xc0>)
 8002f3c:	f004 feb6 	bl	8007cac <arm_cmplx_mag_f32>

    arm_max_f32(fft_output+1, 511, &max_value, &max_pos);
 8002f40:	4825      	ldr	r0, [pc, #148]	@ (8002fd8 <getfrequency+0xc8>)
 8002f42:	f107 030c 	add.w	r3, r7, #12
 8002f46:	f107 0210 	add.w	r2, r7, #16
 8002f4a:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8002f4e:	f004 f957 	bl	8007200 <arm_max_f32>

    max_pos++;  // 跳过直流分量
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	3301      	adds	r3, #1
 8002f56:	60fb      	str	r3, [r7, #12]

    // 计算实际频率
    float32_t sample=htim2.Instance->PSC;
 8002f58:	4b20      	ldr	r3, [pc, #128]	@ (8002fdc <getfrequency+0xcc>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f5e:	ee07 3a90 	vmov	s15, r3
 8002f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f66:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    *freq = (max_pos * 1000000.0) / 1024.0f/sample;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7fd fad5 	bl	800051c <__aeabi_ui2d>
 8002f72:	a315      	add	r3, pc, #84	@ (adr r3, 8002fc8 <getfrequency+0xb8>)
 8002f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f78:	f7fd fb4a 	bl	8000610 <__aeabi_dmul>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	460b      	mov	r3, r1
 8002f80:	4610      	mov	r0, r2
 8002f82:	4619      	mov	r1, r3
 8002f84:	f04f 0200 	mov.w	r2, #0
 8002f88:	4b15      	ldr	r3, [pc, #84]	@ (8002fe0 <getfrequency+0xd0>)
 8002f8a:	f7fd fc6b 	bl	8000864 <__aeabi_ddiv>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	460b      	mov	r3, r1
 8002f92:	4614      	mov	r4, r2
 8002f94:	461d      	mov	r5, r3
 8002f96:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002f98:	f7fd fae2 	bl	8000560 <__aeabi_f2d>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	4620      	mov	r0, r4
 8002fa2:	4629      	mov	r1, r5
 8002fa4:	f7fd fc5e 	bl	8000864 <__aeabi_ddiv>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	460b      	mov	r3, r1
 8002fac:	4610      	mov	r0, r2
 8002fae:	4619      	mov	r1, r3
 8002fb0:	f7fd fe10 	bl	8000bd4 <__aeabi_d2f>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	601a      	str	r2, [r3, #0]
}
 8002fba:	bf00      	nop
 8002fbc:	3730      	adds	r7, #48	@ 0x30
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bdb0      	pop	{r4, r5, r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	f3af 8000 	nop.w
 8002fc8:	00000000 	.word	0x00000000
 8002fcc:	412e8480 	.word	0x412e8480
 8002fd0:	20004784 	.word	0x20004784
 8002fd4:	20002784 	.word	0x20002784
 8002fd8:	20004788 	.word	0x20004788
 8002fdc:	200057cc 	.word	0x200057cc
 8002fe0:	40900000 	.word	0x40900000

08002fe4 <get_max_min>:

void get_max_min(uint16_t *max, uint16_t *min)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
    *max = 0;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	801a      	strh	r2, [r3, #0]
    *min = 5000;
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ffa:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < adcvaluelength; i++)
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	81fb      	strh	r3, [r7, #14]
 8003000:	e01e      	b.n	8003040 <get_max_min+0x5c>
    {
        if (adcvalue[i] > *max)
 8003002:	89fb      	ldrh	r3, [r7, #14]
 8003004:	4a14      	ldr	r2, [pc, #80]	@ (8003058 <get_max_min+0x74>)
 8003006:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	881b      	ldrh	r3, [r3, #0]
 800300e:	429a      	cmp	r2, r3
 8003010:	d905      	bls.n	800301e <get_max_min+0x3a>
            *max = adcvalue[i];
 8003012:	89fb      	ldrh	r3, [r7, #14]
 8003014:	4a10      	ldr	r2, [pc, #64]	@ (8003058 <get_max_min+0x74>)
 8003016:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	801a      	strh	r2, [r3, #0]
        if (adcvalue[i] < *min)
 800301e:	89fb      	ldrh	r3, [r7, #14]
 8003020:	4a0d      	ldr	r2, [pc, #52]	@ (8003058 <get_max_min+0x74>)
 8003022:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	881b      	ldrh	r3, [r3, #0]
 800302a:	429a      	cmp	r2, r3
 800302c:	d205      	bcs.n	800303a <get_max_min+0x56>
            *min = adcvalue[i];
 800302e:	89fb      	ldrh	r3, [r7, #14]
 8003030:	4a09      	ldr	r2, [pc, #36]	@ (8003058 <get_max_min+0x74>)
 8003032:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < adcvaluelength; i++)
 800303a:	89fb      	ldrh	r3, [r7, #14]
 800303c:	3301      	adds	r3, #1
 800303e:	81fb      	strh	r3, [r7, #14]
 8003040:	89fb      	ldrh	r3, [r7, #14]
 8003042:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8003046:	4293      	cmp	r3, r2
 8003048:	d9db      	bls.n	8003002 <get_max_min+0x1e>
    }
}
 800304a:	bf00      	nop
 800304c:	bf00      	nop
 800304e:	3714      	adds	r7, #20
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr
 8003058:	200006dc 	.word	0x200006dc
 800305c:	00000000 	.word	0x00000000

08003060 <get_amplitude>:

float get_amplitude()
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
    uint16_t maxvoltage, minvoltage;
    get_max_min(&maxvoltage, &minvoltage);
 8003066:	463a      	mov	r2, r7
 8003068:	1cbb      	adds	r3, r7, #2
 800306a:	4611      	mov	r1, r2
 800306c:	4618      	mov	r0, r3
 800306e:	f7ff ffb9 	bl	8002fe4 <get_max_min>
    float amp = (maxvoltage - minvoltage) / 4095.0 * 3.3;
 8003072:	887b      	ldrh	r3, [r7, #2]
 8003074:	461a      	mov	r2, r3
 8003076:	883b      	ldrh	r3, [r7, #0]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	4618      	mov	r0, r3
 800307c:	f7fd fa5e 	bl	800053c <__aeabi_i2d>
 8003080:	a30f      	add	r3, pc, #60	@ (adr r3, 80030c0 <get_amplitude+0x60>)
 8003082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003086:	f7fd fbed 	bl	8000864 <__aeabi_ddiv>
 800308a:	4602      	mov	r2, r0
 800308c:	460b      	mov	r3, r1
 800308e:	4610      	mov	r0, r2
 8003090:	4619      	mov	r1, r3
 8003092:	a30d      	add	r3, pc, #52	@ (adr r3, 80030c8 <get_amplitude+0x68>)
 8003094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003098:	f7fd faba 	bl	8000610 <__aeabi_dmul>
 800309c:	4602      	mov	r2, r0
 800309e:	460b      	mov	r3, r1
 80030a0:	4610      	mov	r0, r2
 80030a2:	4619      	mov	r1, r3
 80030a4:	f7fd fd96 	bl	8000bd4 <__aeabi_d2f>
 80030a8:	4603      	mov	r3, r0
 80030aa:	607b      	str	r3, [r7, #4]
    return amp;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	ee07 3a90 	vmov	s15, r3
}
 80030b2:	eeb0 0a67 	vmov.f32	s0, s15
 80030b6:	3708      	adds	r7, #8
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	f3af 8000 	nop.w
 80030c0:	00000000 	.word	0x00000000
 80030c4:	40affe00 	.word	0x40affe00
 80030c8:	66666666 	.word	0x66666666
 80030cc:	400a6666 	.word	0x400a6666

080030d0 <adcvalue_change_waveform>:



//数据适配oled
void adcvalue_change_waveform(uint8_t xpoint,uint8_t y)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b088      	sub	sp, #32
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	4603      	mov	r3, r0
 80030d8:	460a      	mov	r2, r1
 80030da:	71fb      	strb	r3, [r7, #7]
 80030dc:	4613      	mov	r3, r2
 80030de:	71bb      	strb	r3, [r7, #6]
	uint8_t ypoint=4095/26;
 80030e0:	239d      	movs	r3, #157	@ 0x9d
 80030e2:	75fb      	strb	r3, [r7, #23]
	for(uint16_t i=0, j=0;i<adcvaluelength&&j<waveformlength;i=i+xpoint)
 80030e4:	2300      	movs	r3, #0
 80030e6:	83fb      	strh	r3, [r7, #30]
 80030e8:	2300      	movs	r3, #0
 80030ea:	83bb      	strh	r3, [r7, #28]
 80030ec:	e049      	b.n	8003182 <adcvalue_change_waveform+0xb2>
	{
	    float off = (adcvalue[i]-2047) / ypoint;
 80030ee:	8bfb      	ldrh	r3, [r7, #30]
 80030f0:	4a2a      	ldr	r2, [pc, #168]	@ (800319c <adcvalue_change_waveform+0xcc>)
 80030f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030f6:	f2a3 72ff 	subw	r2, r3, #2047	@ 0x7ff
 80030fa:	7dfb      	ldrb	r3, [r7, #23]
 80030fc:	fb92 f3f3 	sdiv	r3, r2, r3
 8003100:	ee07 3a90 	vmov	s15, r3
 8003104:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003108:	edc7 7a04 	vstr	s15, [r7, #16]
	    float yf=y/10.0;
 800310c:	79bb      	ldrb	r3, [r7, #6]
 800310e:	4618      	mov	r0, r3
 8003110:	f7fd fa14 	bl	800053c <__aeabi_i2d>
 8003114:	f04f 0200 	mov.w	r2, #0
 8003118:	4b21      	ldr	r3, [pc, #132]	@ (80031a0 <adcvalue_change_waveform+0xd0>)
 800311a:	f7fd fba3 	bl	8000864 <__aeabi_ddiv>
 800311e:	4602      	mov	r2, r0
 8003120:	460b      	mov	r3, r1
 8003122:	4610      	mov	r0, r2
 8003124:	4619      	mov	r1, r3
 8003126:	f7fd fd55 	bl	8000bd4 <__aeabi_d2f>
 800312a:	4603      	mov	r3, r0
 800312c:	60fb      	str	r3, [r7, #12]
	    float temp=26+off*yf;
 800312e:	ed97 7a04 	vldr	s14, [r7, #16]
 8003132:	edd7 7a03 	vldr	s15, [r7, #12]
 8003136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800313a:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 800313e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003142:	edc7 7a06 	vstr	s15, [r7, #24]
		if (temp > 52) temp = 52;
 8003146:	edd7 7a06 	vldr	s15, [r7, #24]
 800314a:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80031a4 <adcvalue_change_waveform+0xd4>
 800314e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003156:	dd01      	ble.n	800315c <adcvalue_change_waveform+0x8c>
 8003158:	4b13      	ldr	r3, [pc, #76]	@ (80031a8 <adcvalue_change_waveform+0xd8>)
 800315a:	61bb      	str	r3, [r7, #24]
		waveform[j++] = temp;
 800315c:	8bbb      	ldrh	r3, [r7, #28]
 800315e:	1c5a      	adds	r2, r3, #1
 8003160:	83ba      	strh	r2, [r7, #28]
 8003162:	461a      	mov	r2, r3
 8003164:	edd7 7a06 	vldr	s15, [r7, #24]
 8003168:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800316c:	ee17 3a90 	vmov	r3, s15
 8003170:	b299      	uxth	r1, r3
 8003172:	4b0e      	ldr	r3, [pc, #56]	@ (80031ac <adcvalue_change_waveform+0xdc>)
 8003174:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(uint16_t i=0, j=0;i<adcvaluelength&&j<waveformlength;i=i+xpoint)
 8003178:	79fb      	ldrb	r3, [r7, #7]
 800317a:	b29a      	uxth	r2, r3
 800317c:	8bfb      	ldrh	r3, [r7, #30]
 800317e:	4413      	add	r3, r2
 8003180:	83fb      	strh	r3, [r7, #30]
 8003182:	8bfb      	ldrh	r3, [r7, #30]
 8003184:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8003188:	4293      	cmp	r3, r2
 800318a:	d802      	bhi.n	8003192 <adcvalue_change_waveform+0xc2>
 800318c:	8bbb      	ldrh	r3, [r7, #28]
 800318e:	2b95      	cmp	r3, #149	@ 0x95
 8003190:	d9ad      	bls.n	80030ee <adcvalue_change_waveform+0x1e>
	}
}
 8003192:	bf00      	nop
 8003194:	3720      	adds	r7, #32
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	200006dc 	.word	0x200006dc
 80031a0:	40240000 	.word	0x40240000
 80031a4:	42500000 	.word	0x42500000
 80031a8:	42500000 	.word	0x42500000
 80031ac:	20002658 	.word	0x20002658

080031b0 <get_triggervoltage_pos>:


//触发电压的位置
uint8_t get_triggervoltage_pos(uint8_t tgvalue)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	4603      	mov	r3, r0
 80031b8:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i=0;i<waveformlength;i++)
 80031ba:	2300      	movs	r3, #0
 80031bc:	73fb      	strb	r3, [r7, #15]
 80031be:	e02c      	b.n	800321a <get_triggervoltage_pos+0x6a>
	{
		if(tgvalue==0&&waveform[i]==tgvalue&&waveform[i+3]>0)
 80031c0:	79fb      	ldrb	r3, [r7, #7]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d110      	bne.n	80031e8 <get_triggervoltage_pos+0x38>
 80031c6:	7bfb      	ldrb	r3, [r7, #15]
 80031c8:	4a19      	ldr	r2, [pc, #100]	@ (8003230 <get_triggervoltage_pos+0x80>)
 80031ca:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80031ce:	79fb      	ldrb	r3, [r7, #7]
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d108      	bne.n	80031e8 <get_triggervoltage_pos+0x38>
 80031d6:	7bfb      	ldrb	r3, [r7, #15]
 80031d8:	3303      	adds	r3, #3
 80031da:	4a15      	ldr	r2, [pc, #84]	@ (8003230 <get_triggervoltage_pos+0x80>)
 80031dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d001      	beq.n	80031e8 <get_triggervoltage_pos+0x38>
		{
			return i;
 80031e4:	7bfb      	ldrb	r3, [r7, #15]
 80031e6:	e01c      	b.n	8003222 <get_triggervoltage_pos+0x72>
		}
		else if(tgvalue!=0&&waveform[i]==tgvalue&&waveform[i-3]<=tgvalue)
 80031e8:	79fb      	ldrb	r3, [r7, #7]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d012      	beq.n	8003214 <get_triggervoltage_pos+0x64>
 80031ee:	7bfb      	ldrb	r3, [r7, #15]
 80031f0:	4a0f      	ldr	r2, [pc, #60]	@ (8003230 <get_triggervoltage_pos+0x80>)
 80031f2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80031f6:	79fb      	ldrb	r3, [r7, #7]
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d10a      	bne.n	8003214 <get_triggervoltage_pos+0x64>
 80031fe:	7bfb      	ldrb	r3, [r7, #15]
 8003200:	3b03      	subs	r3, #3
 8003202:	4a0b      	ldr	r2, [pc, #44]	@ (8003230 <get_triggervoltage_pos+0x80>)
 8003204:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003208:	79fb      	ldrb	r3, [r7, #7]
 800320a:	b29b      	uxth	r3, r3
 800320c:	429a      	cmp	r2, r3
 800320e:	d801      	bhi.n	8003214 <get_triggervoltage_pos+0x64>
		{
			return i;
 8003210:	7bfb      	ldrb	r3, [r7, #15]
 8003212:	e006      	b.n	8003222 <get_triggervoltage_pos+0x72>
	for(uint8_t i=0;i<waveformlength;i++)
 8003214:	7bfb      	ldrb	r3, [r7, #15]
 8003216:	3301      	adds	r3, #1
 8003218:	73fb      	strb	r3, [r7, #15]
 800321a:	7bfb      	ldrb	r3, [r7, #15]
 800321c:	2b95      	cmp	r3, #149	@ 0x95
 800321e:	d9cf      	bls.n	80031c0 <get_triggervoltage_pos+0x10>
		}
	}
	return 0;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3714      	adds	r7, #20
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	20002658 	.word	0x20002658

08003234 <oledshow_waveform>:


//画波形
void oledshow_waveform(uint8_t tgpos)
{
 8003234:	b590      	push	{r4, r7, lr}
 8003236:	b087      	sub	sp, #28
 8003238:	af02      	add	r7, sp, #8
 800323a:	4603      	mov	r3, r0
 800323c:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i=0;i<92;i++)
 800323e:	2300      	movs	r3, #0
 8003240:	73fb      	strb	r3, [r7, #15]
 8003242:	e01f      	b.n	8003284 <oledshow_waveform+0x50>
	{
		OLED_DrawLine(i-1, 52-waveform[i-1+tgpos], i, 52-waveform[i+tgpos], 1);
 8003244:	7bfb      	ldrb	r3, [r7, #15]
 8003246:	3b01      	subs	r3, #1
 8003248:	b2d8      	uxtb	r0, r3
 800324a:	7bfb      	ldrb	r3, [r7, #15]
 800324c:	1e5a      	subs	r2, r3, #1
 800324e:	79fb      	ldrb	r3, [r7, #7]
 8003250:	4413      	add	r3, r2
 8003252:	4a10      	ldr	r2, [pc, #64]	@ (8003294 <oledshow_waveform+0x60>)
 8003254:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003258:	b2db      	uxtb	r3, r3
 800325a:	f1c3 0334 	rsb	r3, r3, #52	@ 0x34
 800325e:	b2d9      	uxtb	r1, r3
 8003260:	7bfa      	ldrb	r2, [r7, #15]
 8003262:	79fb      	ldrb	r3, [r7, #7]
 8003264:	4413      	add	r3, r2
 8003266:	4a0b      	ldr	r2, [pc, #44]	@ (8003294 <oledshow_waveform+0x60>)
 8003268:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800326c:	b2db      	uxtb	r3, r3
 800326e:	f1c3 0334 	rsb	r3, r3, #52	@ 0x34
 8003272:	b2db      	uxtb	r3, r3
 8003274:	7bfa      	ldrb	r2, [r7, #15]
 8003276:	2401      	movs	r4, #1
 8003278:	9400      	str	r4, [sp, #0]
 800327a:	f7fe f9db 	bl	8001634 <OLED_DrawLine>
	for(uint8_t i=0;i<92;i++)
 800327e:	7bfb      	ldrb	r3, [r7, #15]
 8003280:	3301      	adds	r3, #1
 8003282:	73fb      	strb	r3, [r7, #15]
 8003284:	7bfb      	ldrb	r3, [r7, #15]
 8003286:	2b5b      	cmp	r3, #91	@ 0x5b
 8003288:	d9dc      	bls.n	8003244 <oledshow_waveform+0x10>
	}
}
 800328a:	bf00      	nop
 800328c:	bf00      	nop
 800328e:	3714      	adds	r7, #20
 8003290:	46bd      	mov	sp, r7
 8003292:	bd90      	pop	{r4, r7, pc}
 8003294:	20002658 	.word	0x20002658

08003298 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800329e:	2300      	movs	r3, #0
 80032a0:	607b      	str	r3, [r7, #4]
 80032a2:	4b10      	ldr	r3, [pc, #64]	@ (80032e4 <HAL_MspInit+0x4c>)
 80032a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032a6:	4a0f      	ldr	r2, [pc, #60]	@ (80032e4 <HAL_MspInit+0x4c>)
 80032a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80032ae:	4b0d      	ldr	r3, [pc, #52]	@ (80032e4 <HAL_MspInit+0x4c>)
 80032b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032b6:	607b      	str	r3, [r7, #4]
 80032b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032ba:	2300      	movs	r3, #0
 80032bc:	603b      	str	r3, [r7, #0]
 80032be:	4b09      	ldr	r3, [pc, #36]	@ (80032e4 <HAL_MspInit+0x4c>)
 80032c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c2:	4a08      	ldr	r2, [pc, #32]	@ (80032e4 <HAL_MspInit+0x4c>)
 80032c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80032ca:	4b06      	ldr	r3, [pc, #24]	@ (80032e4 <HAL_MspInit+0x4c>)
 80032cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032d2:	603b      	str	r3, [r7, #0]
 80032d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032d6:	bf00      	nop
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	40023800 	.word	0x40023800

080032e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80032ec:	bf00      	nop
 80032ee:	e7fd      	b.n	80032ec <NMI_Handler+0x4>

080032f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032f0:	b480      	push	{r7}
 80032f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032f4:	bf00      	nop
 80032f6:	e7fd      	b.n	80032f4 <HardFault_Handler+0x4>

080032f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032f8:	b480      	push	{r7}
 80032fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032fc:	bf00      	nop
 80032fe:	e7fd      	b.n	80032fc <MemManage_Handler+0x4>

08003300 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003304:	bf00      	nop
 8003306:	e7fd      	b.n	8003304 <BusFault_Handler+0x4>

08003308 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800330c:	bf00      	nop
 800330e:	e7fd      	b.n	800330c <UsageFault_Handler+0x4>

08003310 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003310:	b480      	push	{r7}
 8003312:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003314:	bf00      	nop
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr

0800331e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800331e:	b480      	push	{r7}
 8003320:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003322:	bf00      	nop
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003330:	bf00      	nop
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr

0800333a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800333e:	f000 fb17 	bl	8003970 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003342:	bf00      	nop
 8003344:	bd80      	pop	{r7, pc}

08003346 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800334a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800334e:	f001 fe25 	bl	8004f9c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8003352:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003356:	f001 fe21 	bl	8004f9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800335a:	bf00      	nop
 800335c:	bd80      	pop	{r7, pc}

0800335e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800335e:	b580      	push	{r7, lr}
 8003360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8003362:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003366:	f001 fe19 	bl	8004f9c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800336a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800336e:	f001 fe15 	bl	8004f9c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8003372:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003376:	f001 fe11 	bl	8004f9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800337a:	bf00      	nop
 800337c:	bd80      	pop	{r7, pc}
	...

08003380 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003384:	4802      	ldr	r0, [pc, #8]	@ (8003390 <DMA2_Stream0_IRQHandler+0x10>)
 8003386:	f001 fa01 	bl	800478c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800338a:	bf00      	nop
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	20000628 	.word	0x20000628

08003394 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8003398:	4802      	ldr	r0, [pc, #8]	@ (80033a4 <DMA2_Stream5_IRQHandler+0x10>)
 800339a:	f001 f9f7 	bl	800478c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 800339e:	bf00      	nop
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	200058a4 	.word	0x200058a4

080033a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80033ac:	4b06      	ldr	r3, [pc, #24]	@ (80033c8 <SystemInit+0x20>)
 80033ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033b2:	4a05      	ldr	r2, [pc, #20]	@ (80033c8 <SystemInit+0x20>)
 80033b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80033b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80033bc:	bf00      	nop
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	e000ed00 	.word	0xe000ed00

080033cc <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
DMA_HandleTypeDef hdma_tim1_up;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b086      	sub	sp, #24
 80033d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80033d2:	f107 0308 	add.w	r3, r7, #8
 80033d6:	2200      	movs	r2, #0
 80033d8:	601a      	str	r2, [r3, #0]
 80033da:	605a      	str	r2, [r3, #4]
 80033dc:	609a      	str	r2, [r3, #8]
 80033de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033e0:	463b      	mov	r3, r7
 80033e2:	2200      	movs	r2, #0
 80033e4:	601a      	str	r2, [r3, #0]
 80033e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80033e8:	4b1e      	ldr	r3, [pc, #120]	@ (8003464 <MX_TIM1_Init+0x98>)
 80033ea:	4a1f      	ldr	r2, [pc, #124]	@ (8003468 <MX_TIM1_Init+0x9c>)
 80033ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 390-1;
 80033ee:	4b1d      	ldr	r3, [pc, #116]	@ (8003464 <MX_TIM1_Init+0x98>)
 80033f0:	f240 1285 	movw	r2, #389	@ 0x185
 80033f4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033f6:	4b1b      	ldr	r3, [pc, #108]	@ (8003464 <MX_TIM1_Init+0x98>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10-1;
 80033fc:	4b19      	ldr	r3, [pc, #100]	@ (8003464 <MX_TIM1_Init+0x98>)
 80033fe:	2209      	movs	r2, #9
 8003400:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003402:	4b18      	ldr	r3, [pc, #96]	@ (8003464 <MX_TIM1_Init+0x98>)
 8003404:	2200      	movs	r2, #0
 8003406:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003408:	4b16      	ldr	r3, [pc, #88]	@ (8003464 <MX_TIM1_Init+0x98>)
 800340a:	2200      	movs	r2, #0
 800340c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800340e:	4b15      	ldr	r3, [pc, #84]	@ (8003464 <MX_TIM1_Init+0x98>)
 8003410:	2200      	movs	r2, #0
 8003412:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003414:	4813      	ldr	r0, [pc, #76]	@ (8003464 <MX_TIM1_Init+0x98>)
 8003416:	f002 febb 	bl	8006190 <HAL_TIM_Base_Init>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d001      	beq.n	8003424 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8003420:	f7ff fd42 	bl	8002ea8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003424:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003428:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800342a:	f107 0308 	add.w	r3, r7, #8
 800342e:	4619      	mov	r1, r3
 8003430:	480c      	ldr	r0, [pc, #48]	@ (8003464 <MX_TIM1_Init+0x98>)
 8003432:	f003 fad7 	bl	80069e4 <HAL_TIM_ConfigClockSource>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d001      	beq.n	8003440 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800343c:	f7ff fd34 	bl	8002ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003440:	2320      	movs	r3, #32
 8003442:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003444:	2300      	movs	r3, #0
 8003446:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003448:	463b      	mov	r3, r7
 800344a:	4619      	mov	r1, r3
 800344c:	4805      	ldr	r0, [pc, #20]	@ (8003464 <MX_TIM1_Init+0x98>)
 800344e:	f003 fe69 	bl	8007124 <HAL_TIMEx_MasterConfigSynchronization>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d001      	beq.n	800345c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003458:	f7ff fd26 	bl	8002ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800345c:	bf00      	nop
 800345e:	3718      	adds	r7, #24
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	20005784 	.word	0x20005784
 8003468:	40010000 	.word	0x40010000

0800346c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b08a      	sub	sp, #40	@ 0x28
 8003470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003472:	f107 0320 	add.w	r3, r7, #32
 8003476:	2200      	movs	r2, #0
 8003478:	601a      	str	r2, [r3, #0]
 800347a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800347c:	1d3b      	adds	r3, r7, #4
 800347e:	2200      	movs	r2, #0
 8003480:	601a      	str	r2, [r3, #0]
 8003482:	605a      	str	r2, [r3, #4]
 8003484:	609a      	str	r2, [r3, #8]
 8003486:	60da      	str	r2, [r3, #12]
 8003488:	611a      	str	r2, [r3, #16]
 800348a:	615a      	str	r2, [r3, #20]
 800348c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800348e:	4b22      	ldr	r3, [pc, #136]	@ (8003518 <MX_TIM2_Init+0xac>)
 8003490:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003494:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50-1;
 8003496:	4b20      	ldr	r3, [pc, #128]	@ (8003518 <MX_TIM2_Init+0xac>)
 8003498:	2231      	movs	r2, #49	@ 0x31
 800349a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800349c:	4b1e      	ldr	r3, [pc, #120]	@ (8003518 <MX_TIM2_Init+0xac>)
 800349e:	2200      	movs	r2, #0
 80034a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80034a2:	4b1d      	ldr	r3, [pc, #116]	@ (8003518 <MX_TIM2_Init+0xac>)
 80034a4:	2263      	movs	r2, #99	@ 0x63
 80034a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003518 <MX_TIM2_Init+0xac>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034ae:	4b1a      	ldr	r3, [pc, #104]	@ (8003518 <MX_TIM2_Init+0xac>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80034b4:	4818      	ldr	r0, [pc, #96]	@ (8003518 <MX_TIM2_Init+0xac>)
 80034b6:	f002 ff3c 	bl	8006332 <HAL_TIM_PWM_Init>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d001      	beq.n	80034c4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80034c0:	f7ff fcf2 	bl	8002ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80034c4:	2350      	movs	r3, #80	@ 0x50
 80034c6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034c8:	2300      	movs	r3, #0
 80034ca:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80034cc:	f107 0320 	add.w	r3, r7, #32
 80034d0:	4619      	mov	r1, r3
 80034d2:	4811      	ldr	r0, [pc, #68]	@ (8003518 <MX_TIM2_Init+0xac>)
 80034d4:	f003 fe26 	bl	8007124 <HAL_TIMEx_MasterConfigSynchronization>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d001      	beq.n	80034e2 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 80034de:	f7ff fce3 	bl	8002ea8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80034e2:	2360      	movs	r3, #96	@ 0x60
 80034e4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 80034e6:	2332      	movs	r3, #50	@ 0x32
 80034e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80034ea:	2300      	movs	r3, #0
 80034ec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80034ee:	2300      	movs	r3, #0
 80034f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80034f2:	1d3b      	adds	r3, r7, #4
 80034f4:	2204      	movs	r2, #4
 80034f6:	4619      	mov	r1, r3
 80034f8:	4807      	ldr	r0, [pc, #28]	@ (8003518 <MX_TIM2_Init+0xac>)
 80034fa:	f003 f9b1 	bl	8006860 <HAL_TIM_PWM_ConfigChannel>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d001      	beq.n	8003508 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8003504:	f7ff fcd0 	bl	8002ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003508:	4803      	ldr	r0, [pc, #12]	@ (8003518 <MX_TIM2_Init+0xac>)
 800350a:	f000 f97d 	bl	8003808 <HAL_TIM_MspPostInit>

}
 800350e:	bf00      	nop
 8003510:	3728      	adds	r7, #40	@ 0x28
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	200057cc 	.word	0x200057cc

0800351c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b08c      	sub	sp, #48	@ 0x30
 8003520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003522:	f107 030c 	add.w	r3, r7, #12
 8003526:	2224      	movs	r2, #36	@ 0x24
 8003528:	2100      	movs	r1, #0
 800352a:	4618      	mov	r0, r3
 800352c:	f004 ff98 	bl	8008460 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003530:	1d3b      	adds	r3, r7, #4
 8003532:	2200      	movs	r2, #0
 8003534:	601a      	str	r2, [r3, #0]
 8003536:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003538:	4b20      	ldr	r3, [pc, #128]	@ (80035bc <MX_TIM3_Init+0xa0>)
 800353a:	4a21      	ldr	r2, [pc, #132]	@ (80035c0 <MX_TIM3_Init+0xa4>)
 800353c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2-1;
 800353e:	4b1f      	ldr	r3, [pc, #124]	@ (80035bc <MX_TIM3_Init+0xa0>)
 8003540:	2201      	movs	r2, #1
 8003542:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003544:	4b1d      	ldr	r3, [pc, #116]	@ (80035bc <MX_TIM3_Init+0xa0>)
 8003546:	2200      	movs	r2, #0
 8003548:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 52;
 800354a:	4b1c      	ldr	r3, [pc, #112]	@ (80035bc <MX_TIM3_Init+0xa0>)
 800354c:	2234      	movs	r2, #52	@ 0x34
 800354e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003550:	4b1a      	ldr	r3, [pc, #104]	@ (80035bc <MX_TIM3_Init+0xa0>)
 8003552:	2200      	movs	r2, #0
 8003554:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003556:	4b19      	ldr	r3, [pc, #100]	@ (80035bc <MX_TIM3_Init+0xa0>)
 8003558:	2200      	movs	r2, #0
 800355a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800355c:	2301      	movs	r3, #1
 800355e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003560:	2300      	movs	r3, #0
 8003562:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003564:	2301      	movs	r3, #1
 8003566:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003568:	2300      	movs	r3, #0
 800356a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800356c:	230f      	movs	r3, #15
 800356e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003570:	2300      	movs	r3, #0
 8003572:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003574:	2301      	movs	r3, #1
 8003576:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003578:	2300      	movs	r3, #0
 800357a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 800357c:	230f      	movs	r3, #15
 800357e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003580:	f107 030c 	add.w	r3, r7, #12
 8003584:	4619      	mov	r1, r3
 8003586:	480d      	ldr	r0, [pc, #52]	@ (80035bc <MX_TIM3_Init+0xa0>)
 8003588:	f003 f836 	bl	80065f8 <HAL_TIM_Encoder_Init>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d001      	beq.n	8003596 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8003592:	f7ff fc89 	bl	8002ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003596:	2300      	movs	r3, #0
 8003598:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800359a:	2300      	movs	r3, #0
 800359c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800359e:	1d3b      	adds	r3, r7, #4
 80035a0:	4619      	mov	r1, r3
 80035a2:	4806      	ldr	r0, [pc, #24]	@ (80035bc <MX_TIM3_Init+0xa0>)
 80035a4:	f003 fdbe 	bl	8007124 <HAL_TIMEx_MasterConfigSynchronization>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80035ae:	f7ff fc7b 	bl	8002ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80035b2:	bf00      	nop
 80035b4:	3730      	adds	r7, #48	@ 0x30
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	20005814 	.word	0x20005814
 80035c0:	40000400 	.word	0x40000400

080035c4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b086      	sub	sp, #24
 80035c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80035ca:	f107 0308 	add.w	r3, r7, #8
 80035ce:	2200      	movs	r2, #0
 80035d0:	601a      	str	r2, [r3, #0]
 80035d2:	605a      	str	r2, [r3, #4]
 80035d4:	609a      	str	r2, [r3, #8]
 80035d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035d8:	463b      	mov	r3, r7
 80035da:	2200      	movs	r2, #0
 80035dc:	601a      	str	r2, [r3, #0]
 80035de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80035e0:	4b1d      	ldr	r3, [pc, #116]	@ (8003658 <MX_TIM4_Init+0x94>)
 80035e2:	4a1e      	ldr	r2, [pc, #120]	@ (800365c <MX_TIM4_Init+0x98>)
 80035e4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80035e6:	4b1c      	ldr	r3, [pc, #112]	@ (8003658 <MX_TIM4_Init+0x94>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035ec:	4b1a      	ldr	r3, [pc, #104]	@ (8003658 <MX_TIM4_Init+0x94>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80035f2:	4b19      	ldr	r3, [pc, #100]	@ (8003658 <MX_TIM4_Init+0x94>)
 80035f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80035f8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035fa:	4b17      	ldr	r3, [pc, #92]	@ (8003658 <MX_TIM4_Init+0x94>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003600:	4b15      	ldr	r3, [pc, #84]	@ (8003658 <MX_TIM4_Init+0x94>)
 8003602:	2200      	movs	r2, #0
 8003604:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003606:	4814      	ldr	r0, [pc, #80]	@ (8003658 <MX_TIM4_Init+0x94>)
 8003608:	f002 fdc2 	bl	8006190 <HAL_TIM_Base_Init>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d001      	beq.n	8003616 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8003612:	f7ff fc49 	bl	8002ea8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003616:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800361a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800361c:	f107 0308 	add.w	r3, r7, #8
 8003620:	4619      	mov	r1, r3
 8003622:	480d      	ldr	r0, [pc, #52]	@ (8003658 <MX_TIM4_Init+0x94>)
 8003624:	f003 f9de 	bl	80069e4 <HAL_TIM_ConfigClockSource>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d001      	beq.n	8003632 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800362e:	f7ff fc3b 	bl	8002ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003632:	2300      	movs	r3, #0
 8003634:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003636:	2300      	movs	r3, #0
 8003638:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800363a:	463b      	mov	r3, r7
 800363c:	4619      	mov	r1, r3
 800363e:	4806      	ldr	r0, [pc, #24]	@ (8003658 <MX_TIM4_Init+0x94>)
 8003640:	f003 fd70 	bl	8007124 <HAL_TIMEx_MasterConfigSynchronization>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800364a:	f7ff fc2d 	bl	8002ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800364e:	bf00      	nop
 8003650:	3718      	adds	r7, #24
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	2000585c 	.word	0x2000585c
 800365c:	40000800 	.word	0x40000800

08003660 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a2d      	ldr	r2, [pc, #180]	@ (8003724 <HAL_TIM_Base_MspInit+0xc4>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d140      	bne.n	80036f4 <HAL_TIM_Base_MspInit+0x94>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003672:	2300      	movs	r3, #0
 8003674:	60fb      	str	r3, [r7, #12]
 8003676:	4b2c      	ldr	r3, [pc, #176]	@ (8003728 <HAL_TIM_Base_MspInit+0xc8>)
 8003678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800367a:	4a2b      	ldr	r2, [pc, #172]	@ (8003728 <HAL_TIM_Base_MspInit+0xc8>)
 800367c:	f043 0301 	orr.w	r3, r3, #1
 8003680:	6453      	str	r3, [r2, #68]	@ 0x44
 8003682:	4b29      	ldr	r3, [pc, #164]	@ (8003728 <HAL_TIM_Base_MspInit+0xc8>)
 8003684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	60fb      	str	r3, [r7, #12]
 800368c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA2_Stream5;
 800368e:	4b27      	ldr	r3, [pc, #156]	@ (800372c <HAL_TIM_Base_MspInit+0xcc>)
 8003690:	4a27      	ldr	r2, [pc, #156]	@ (8003730 <HAL_TIM_Base_MspInit+0xd0>)
 8003692:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Channel = DMA_CHANNEL_6;
 8003694:	4b25      	ldr	r3, [pc, #148]	@ (800372c <HAL_TIM_Base_MspInit+0xcc>)
 8003696:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 800369a:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800369c:	4b23      	ldr	r3, [pc, #140]	@ (800372c <HAL_TIM_Base_MspInit+0xcc>)
 800369e:	2240      	movs	r2, #64	@ 0x40
 80036a0:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80036a2:	4b22      	ldr	r3, [pc, #136]	@ (800372c <HAL_TIM_Base_MspInit+0xcc>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_ENABLE;
 80036a8:	4b20      	ldr	r3, [pc, #128]	@ (800372c <HAL_TIM_Base_MspInit+0xcc>)
 80036aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80036ae:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80036b0:	4b1e      	ldr	r3, [pc, #120]	@ (800372c <HAL_TIM_Base_MspInit+0xcc>)
 80036b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80036b6:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80036b8:	4b1c      	ldr	r3, [pc, #112]	@ (800372c <HAL_TIM_Base_MspInit+0xcc>)
 80036ba:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80036be:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 80036c0:	4b1a      	ldr	r3, [pc, #104]	@ (800372c <HAL_TIM_Base_MspInit+0xcc>)
 80036c2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80036c6:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_HIGH;
 80036c8:	4b18      	ldr	r3, [pc, #96]	@ (800372c <HAL_TIM_Base_MspInit+0xcc>)
 80036ca:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80036ce:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036d0:	4b16      	ldr	r3, [pc, #88]	@ (800372c <HAL_TIM_Base_MspInit+0xcc>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 80036d6:	4815      	ldr	r0, [pc, #84]	@ (800372c <HAL_TIM_Base_MspInit+0xcc>)
 80036d8:	f000 fea6 	bl	8004428 <HAL_DMA_Init>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d001      	beq.n	80036e6 <HAL_TIM_Base_MspInit+0x86>
    {
      Error_Handler();
 80036e2:	f7ff fbe1 	bl	8002ea8 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a10      	ldr	r2, [pc, #64]	@ (800372c <HAL_TIM_Base_MspInit+0xcc>)
 80036ea:	621a      	str	r2, [r3, #32]
 80036ec:	4a0f      	ldr	r2, [pc, #60]	@ (800372c <HAL_TIM_Base_MspInit+0xcc>)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80036f2:	e012      	b.n	800371a <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM4)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a0e      	ldr	r2, [pc, #56]	@ (8003734 <HAL_TIM_Base_MspInit+0xd4>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d10d      	bne.n	800371a <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80036fe:	2300      	movs	r3, #0
 8003700:	60bb      	str	r3, [r7, #8]
 8003702:	4b09      	ldr	r3, [pc, #36]	@ (8003728 <HAL_TIM_Base_MspInit+0xc8>)
 8003704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003706:	4a08      	ldr	r2, [pc, #32]	@ (8003728 <HAL_TIM_Base_MspInit+0xc8>)
 8003708:	f043 0304 	orr.w	r3, r3, #4
 800370c:	6413      	str	r3, [r2, #64]	@ 0x40
 800370e:	4b06      	ldr	r3, [pc, #24]	@ (8003728 <HAL_TIM_Base_MspInit+0xc8>)
 8003710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003712:	f003 0304 	and.w	r3, r3, #4
 8003716:	60bb      	str	r3, [r7, #8]
 8003718:	68bb      	ldr	r3, [r7, #8]
}
 800371a:	bf00      	nop
 800371c:	3710      	adds	r7, #16
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	40010000 	.word	0x40010000
 8003728:	40023800 	.word	0x40023800
 800372c:	200058a4 	.word	0x200058a4
 8003730:	40026488 	.word	0x40026488
 8003734:	40000800 	.word	0x40000800

08003738 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003738:	b480      	push	{r7}
 800373a:	b085      	sub	sp, #20
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003748:	d10d      	bne.n	8003766 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800374a:	2300      	movs	r3, #0
 800374c:	60fb      	str	r3, [r7, #12]
 800374e:	4b09      	ldr	r3, [pc, #36]	@ (8003774 <HAL_TIM_PWM_MspInit+0x3c>)
 8003750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003752:	4a08      	ldr	r2, [pc, #32]	@ (8003774 <HAL_TIM_PWM_MspInit+0x3c>)
 8003754:	f043 0301 	orr.w	r3, r3, #1
 8003758:	6413      	str	r3, [r2, #64]	@ 0x40
 800375a:	4b06      	ldr	r3, [pc, #24]	@ (8003774 <HAL_TIM_PWM_MspInit+0x3c>)
 800375c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375e:	f003 0301 	and.w	r3, r3, #1
 8003762:	60fb      	str	r3, [r7, #12]
 8003764:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8003766:	bf00      	nop
 8003768:	3714      	adds	r7, #20
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	40023800 	.word	0x40023800

08003778 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b08a      	sub	sp, #40	@ 0x28
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003780:	f107 0314 	add.w	r3, r7, #20
 8003784:	2200      	movs	r2, #0
 8003786:	601a      	str	r2, [r3, #0]
 8003788:	605a      	str	r2, [r3, #4]
 800378a:	609a      	str	r2, [r3, #8]
 800378c:	60da      	str	r2, [r3, #12]
 800378e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a19      	ldr	r2, [pc, #100]	@ (80037fc <HAL_TIM_Encoder_MspInit+0x84>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d12b      	bne.n	80037f2 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800379a:	2300      	movs	r3, #0
 800379c:	613b      	str	r3, [r7, #16]
 800379e:	4b18      	ldr	r3, [pc, #96]	@ (8003800 <HAL_TIM_Encoder_MspInit+0x88>)
 80037a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a2:	4a17      	ldr	r2, [pc, #92]	@ (8003800 <HAL_TIM_Encoder_MspInit+0x88>)
 80037a4:	f043 0302 	orr.w	r3, r3, #2
 80037a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80037aa:	4b15      	ldr	r3, [pc, #84]	@ (8003800 <HAL_TIM_Encoder_MspInit+0x88>)
 80037ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	613b      	str	r3, [r7, #16]
 80037b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037b6:	2300      	movs	r3, #0
 80037b8:	60fb      	str	r3, [r7, #12]
 80037ba:	4b11      	ldr	r3, [pc, #68]	@ (8003800 <HAL_TIM_Encoder_MspInit+0x88>)
 80037bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037be:	4a10      	ldr	r2, [pc, #64]	@ (8003800 <HAL_TIM_Encoder_MspInit+0x88>)
 80037c0:	f043 0302 	orr.w	r3, r3, #2
 80037c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80037c6:	4b0e      	ldr	r3, [pc, #56]	@ (8003800 <HAL_TIM_Encoder_MspInit+0x88>)
 80037c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	60fb      	str	r3, [r7, #12]
 80037d0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80037d2:	2330      	movs	r3, #48	@ 0x30
 80037d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037d6:	2302      	movs	r3, #2
 80037d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037da:	2300      	movs	r3, #0
 80037dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037de:	2300      	movs	r3, #0
 80037e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80037e2:	2302      	movs	r3, #2
 80037e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037e6:	f107 0314 	add.w	r3, r7, #20
 80037ea:	4619      	mov	r1, r3
 80037ec:	4805      	ldr	r0, [pc, #20]	@ (8003804 <HAL_TIM_Encoder_MspInit+0x8c>)
 80037ee:	f001 fa37 	bl	8004c60 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80037f2:	bf00      	nop
 80037f4:	3728      	adds	r7, #40	@ 0x28
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	40000400 	.word	0x40000400
 8003800:	40023800 	.word	0x40023800
 8003804:	40020400 	.word	0x40020400

08003808 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b088      	sub	sp, #32
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003810:	f107 030c 	add.w	r3, r7, #12
 8003814:	2200      	movs	r2, #0
 8003816:	601a      	str	r2, [r3, #0]
 8003818:	605a      	str	r2, [r3, #4]
 800381a:	609a      	str	r2, [r3, #8]
 800381c:	60da      	str	r2, [r3, #12]
 800381e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003828:	d11d      	bne.n	8003866 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800382a:	2300      	movs	r3, #0
 800382c:	60bb      	str	r3, [r7, #8]
 800382e:	4b10      	ldr	r3, [pc, #64]	@ (8003870 <HAL_TIM_MspPostInit+0x68>)
 8003830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003832:	4a0f      	ldr	r2, [pc, #60]	@ (8003870 <HAL_TIM_MspPostInit+0x68>)
 8003834:	f043 0302 	orr.w	r3, r3, #2
 8003838:	6313      	str	r3, [r2, #48]	@ 0x30
 800383a:	4b0d      	ldr	r3, [pc, #52]	@ (8003870 <HAL_TIM_MspPostInit+0x68>)
 800383c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	60bb      	str	r3, [r7, #8]
 8003844:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003846:	2308      	movs	r3, #8
 8003848:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800384a:	2302      	movs	r3, #2
 800384c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800384e:	2300      	movs	r3, #0
 8003850:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003852:	2300      	movs	r3, #0
 8003854:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003856:	2301      	movs	r3, #1
 8003858:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800385a:	f107 030c 	add.w	r3, r7, #12
 800385e:	4619      	mov	r1, r3
 8003860:	4804      	ldr	r0, [pc, #16]	@ (8003874 <HAL_TIM_MspPostInit+0x6c>)
 8003862:	f001 f9fd 	bl	8004c60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003866:	bf00      	nop
 8003868:	3720      	adds	r7, #32
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	40023800 	.word	0x40023800
 8003874:	40020400 	.word	0x40020400

08003878 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003878:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80038b0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800387c:	f7ff fd94 	bl	80033a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003880:	480c      	ldr	r0, [pc, #48]	@ (80038b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003882:	490d      	ldr	r1, [pc, #52]	@ (80038b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003884:	4a0d      	ldr	r2, [pc, #52]	@ (80038bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003886:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003888:	e002      	b.n	8003890 <LoopCopyDataInit>

0800388a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800388a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800388c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800388e:	3304      	adds	r3, #4

08003890 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003890:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003892:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003894:	d3f9      	bcc.n	800388a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003896:	4a0a      	ldr	r2, [pc, #40]	@ (80038c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003898:	4c0a      	ldr	r4, [pc, #40]	@ (80038c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800389a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800389c:	e001      	b.n	80038a2 <LoopFillZerobss>

0800389e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800389e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80038a0:	3204      	adds	r2, #4

080038a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80038a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80038a4:	d3fb      	bcc.n	800389e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80038a6:	f004 fde9 	bl	800847c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80038aa:	f7fe fe5d 	bl	8002568 <main>
  bx  lr    
 80038ae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80038b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80038b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80038b8:	200001c4 	.word	0x200001c4
  ldr r2, =_sidata
 80038bc:	0801d450 	.word	0x0801d450
  ldr r2, =_sbss
 80038c0:	200001c4 	.word	0x200001c4
  ldr r4, =_ebss
 80038c4:	20005a40 	.word	0x20005a40

080038c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80038c8:	e7fe      	b.n	80038c8 <ADC_IRQHandler>
	...

080038cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80038d0:	4b0e      	ldr	r3, [pc, #56]	@ (800390c <HAL_Init+0x40>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a0d      	ldr	r2, [pc, #52]	@ (800390c <HAL_Init+0x40>)
 80038d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80038da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80038dc:	4b0b      	ldr	r3, [pc, #44]	@ (800390c <HAL_Init+0x40>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a0a      	ldr	r2, [pc, #40]	@ (800390c <HAL_Init+0x40>)
 80038e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80038e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038e8:	4b08      	ldr	r3, [pc, #32]	@ (800390c <HAL_Init+0x40>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a07      	ldr	r2, [pc, #28]	@ (800390c <HAL_Init+0x40>)
 80038ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038f4:	2003      	movs	r0, #3
 80038f6:	f000 fd55 	bl	80043a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80038fa:	2000      	movs	r0, #0
 80038fc:	f000 f808 	bl	8003910 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003900:	f7ff fcca 	bl	8003298 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	40023c00 	.word	0x40023c00

08003910 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003918:	4b12      	ldr	r3, [pc, #72]	@ (8003964 <HAL_InitTick+0x54>)
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	4b12      	ldr	r3, [pc, #72]	@ (8003968 <HAL_InitTick+0x58>)
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	4619      	mov	r1, r3
 8003922:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003926:	fbb3 f3f1 	udiv	r3, r3, r1
 800392a:	fbb2 f3f3 	udiv	r3, r2, r3
 800392e:	4618      	mov	r0, r3
 8003930:	f000 fd6d 	bl	800440e <HAL_SYSTICK_Config>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e00e      	b.n	800395c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2b0f      	cmp	r3, #15
 8003942:	d80a      	bhi.n	800395a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003944:	2200      	movs	r2, #0
 8003946:	6879      	ldr	r1, [r7, #4]
 8003948:	f04f 30ff 	mov.w	r0, #4294967295
 800394c:	f000 fd35 	bl	80043ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003950:	4a06      	ldr	r2, [pc, #24]	@ (800396c <HAL_InitTick+0x5c>)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003956:	2300      	movs	r3, #0
 8003958:	e000      	b.n	800395c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
}
 800395c:	4618      	mov	r0, r3
 800395e:	3708      	adds	r7, #8
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	20000168 	.word	0x20000168
 8003968:	20000170 	.word	0x20000170
 800396c:	2000016c 	.word	0x2000016c

08003970 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003970:	b480      	push	{r7}
 8003972:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003974:	4b06      	ldr	r3, [pc, #24]	@ (8003990 <HAL_IncTick+0x20>)
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	461a      	mov	r2, r3
 800397a:	4b06      	ldr	r3, [pc, #24]	@ (8003994 <HAL_IncTick+0x24>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4413      	add	r3, r2
 8003980:	4a04      	ldr	r2, [pc, #16]	@ (8003994 <HAL_IncTick+0x24>)
 8003982:	6013      	str	r3, [r2, #0]
}
 8003984:	bf00      	nop
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	20000170 	.word	0x20000170
 8003994:	20005904 	.word	0x20005904

08003998 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003998:	b480      	push	{r7}
 800399a:	af00      	add	r7, sp, #0
  return uwTick;
 800399c:	4b03      	ldr	r3, [pc, #12]	@ (80039ac <HAL_GetTick+0x14>)
 800399e:	681b      	ldr	r3, [r3, #0]
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	20005904 	.word	0x20005904

080039b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80039b8:	f7ff ffee 	bl	8003998 <HAL_GetTick>
 80039bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039c8:	d005      	beq.n	80039d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80039ca:	4b0a      	ldr	r3, [pc, #40]	@ (80039f4 <HAL_Delay+0x44>)
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	461a      	mov	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	4413      	add	r3, r2
 80039d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80039d6:	bf00      	nop
 80039d8:	f7ff ffde 	bl	8003998 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d8f7      	bhi.n	80039d8 <HAL_Delay+0x28>
  {
  }
}
 80039e8:	bf00      	nop
 80039ea:	bf00      	nop
 80039ec:	3710      	adds	r7, #16
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	20000170 	.word	0x20000170

080039f8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a00:	2300      	movs	r3, #0
 8003a02:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d101      	bne.n	8003a0e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e033      	b.n	8003a76 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d109      	bne.n	8003a2a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f7fe f9ca 	bl	8001db0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a2e:	f003 0310 	and.w	r3, r3, #16
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d118      	bne.n	8003a68 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a3a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003a3e:	f023 0302 	bic.w	r3, r3, #2
 8003a42:	f043 0202 	orr.w	r2, r3, #2
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 fa5c 	bl	8003f08 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a5a:	f023 0303 	bic.w	r3, r3, #3
 8003a5e:	f043 0201 	orr.w	r2, r3, #1
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	641a      	str	r2, [r3, #64]	@ 0x40
 8003a66:	e001      	b.n	8003a6c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3710      	adds	r7, #16
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
	...

08003a80 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d101      	bne.n	8003a9e <HAL_ADC_Start_DMA+0x1e>
 8003a9a:	2302      	movs	r3, #2
 8003a9c:	e0ce      	b.n	8003c3c <HAL_ADC_Start_DMA+0x1bc>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f003 0301 	and.w	r3, r3, #1
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d018      	beq.n	8003ae6 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	689a      	ldr	r2, [r3, #8]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f042 0201 	orr.w	r2, r2, #1
 8003ac2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003ac4:	4b5f      	ldr	r3, [pc, #380]	@ (8003c44 <HAL_ADC_Start_DMA+0x1c4>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a5f      	ldr	r2, [pc, #380]	@ (8003c48 <HAL_ADC_Start_DMA+0x1c8>)
 8003aca:	fba2 2303 	umull	r2, r3, r2, r3
 8003ace:	0c9a      	lsrs	r2, r3, #18
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	005b      	lsls	r3, r3, #1
 8003ad4:	4413      	add	r3, r2
 8003ad6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003ad8:	e002      	b.n	8003ae0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	3b01      	subs	r3, #1
 8003ade:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1f9      	bne.n	8003ada <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003af0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003af4:	d107      	bne.n	8003b06 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	689a      	ldr	r2, [r3, #8]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b04:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f003 0301 	and.w	r3, r3, #1
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	f040 8086 	bne.w	8003c22 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b1a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003b1e:	f023 0301 	bic.w	r3, r3, #1
 8003b22:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d007      	beq.n	8003b48 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b3c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003b40:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b4c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b54:	d106      	bne.n	8003b64 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b5a:	f023 0206 	bic.w	r2, r3, #6
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	645a      	str	r2, [r3, #68]	@ 0x44
 8003b62:	e002      	b.n	8003b6a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2200      	movs	r2, #0
 8003b68:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b72:	4b36      	ldr	r3, [pc, #216]	@ (8003c4c <HAL_ADC_Start_DMA+0x1cc>)
 8003b74:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b7a:	4a35      	ldr	r2, [pc, #212]	@ (8003c50 <HAL_ADC_Start_DMA+0x1d0>)
 8003b7c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b82:	4a34      	ldr	r2, [pc, #208]	@ (8003c54 <HAL_ADC_Start_DMA+0x1d4>)
 8003b84:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b8a:	4a33      	ldr	r2, [pc, #204]	@ (8003c58 <HAL_ADC_Start_DMA+0x1d8>)
 8003b8c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003b96:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	685a      	ldr	r2, [r3, #4]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003ba6:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	689a      	ldr	r2, [r3, #8]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bb6:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	334c      	adds	r3, #76	@ 0x4c
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	68ba      	ldr	r2, [r7, #8]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f000 fd17 	bl	80045fa <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f003 031f 	and.w	r3, r3, #31
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d10f      	bne.n	8003bf8 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d129      	bne.n	8003c3a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	689a      	ldr	r2, [r3, #8]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003bf4:	609a      	str	r2, [r3, #8]
 8003bf6:	e020      	b.n	8003c3a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a17      	ldr	r2, [pc, #92]	@ (8003c5c <HAL_ADC_Start_DMA+0x1dc>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d11b      	bne.n	8003c3a <HAL_ADC_Start_DMA+0x1ba>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d114      	bne.n	8003c3a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	689a      	ldr	r2, [r3, #8]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003c1e:	609a      	str	r2, [r3, #8]
 8003c20:	e00b      	b.n	8003c3a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c26:	f043 0210 	orr.w	r2, r3, #16
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c32:	f043 0201 	orr.w	r2, r3, #1
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003c3a:	2300      	movs	r3, #0
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3718      	adds	r7, #24
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	20000168 	.word	0x20000168
 8003c48:	431bde83 	.word	0x431bde83
 8003c4c:	40012300 	.word	0x40012300
 8003c50:	08004101 	.word	0x08004101
 8003c54:	080041bb 	.word	0x080041bb
 8003c58:	080041d7 	.word	0x080041d7
 8003c5c:	40012000 	.word	0x40012000

08003c60 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	370c      	adds	r7, #12
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr

08003c7a <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	b083      	sub	sp, #12
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003c82:	bf00      	nop
 8003c84:	370c      	adds	r7, #12
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr

08003c8e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003c8e:	b480      	push	{r7}
 8003c90:	b083      	sub	sp, #12
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003c96:	bf00      	nop
 8003c98:	370c      	adds	r7, #12
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
	...

08003ca4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b085      	sub	sp, #20
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d101      	bne.n	8003cc0 <HAL_ADC_ConfigChannel+0x1c>
 8003cbc:	2302      	movs	r3, #2
 8003cbe:	e113      	b.n	8003ee8 <HAL_ADC_ConfigChannel+0x244>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2b09      	cmp	r3, #9
 8003cce:	d925      	bls.n	8003d1c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68d9      	ldr	r1, [r3, #12]
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	461a      	mov	r2, r3
 8003cde:	4613      	mov	r3, r2
 8003ce0:	005b      	lsls	r3, r3, #1
 8003ce2:	4413      	add	r3, r2
 8003ce4:	3b1e      	subs	r3, #30
 8003ce6:	2207      	movs	r2, #7
 8003ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cec:	43da      	mvns	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	400a      	ands	r2, r1
 8003cf4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	68d9      	ldr	r1, [r3, #12]
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	689a      	ldr	r2, [r3, #8]
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	4618      	mov	r0, r3
 8003d08:	4603      	mov	r3, r0
 8003d0a:	005b      	lsls	r3, r3, #1
 8003d0c:	4403      	add	r3, r0
 8003d0e:	3b1e      	subs	r3, #30
 8003d10:	409a      	lsls	r2, r3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	430a      	orrs	r2, r1
 8003d18:	60da      	str	r2, [r3, #12]
 8003d1a:	e022      	b.n	8003d62 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	6919      	ldr	r1, [r3, #16]
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	461a      	mov	r2, r3
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	005b      	lsls	r3, r3, #1
 8003d2e:	4413      	add	r3, r2
 8003d30:	2207      	movs	r2, #7
 8003d32:	fa02 f303 	lsl.w	r3, r2, r3
 8003d36:	43da      	mvns	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	400a      	ands	r2, r1
 8003d3e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	6919      	ldr	r1, [r3, #16]
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	689a      	ldr	r2, [r3, #8]
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	4618      	mov	r0, r3
 8003d52:	4603      	mov	r3, r0
 8003d54:	005b      	lsls	r3, r3, #1
 8003d56:	4403      	add	r3, r0
 8003d58:	409a      	lsls	r2, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	430a      	orrs	r2, r1
 8003d60:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	2b06      	cmp	r3, #6
 8003d68:	d824      	bhi.n	8003db4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685a      	ldr	r2, [r3, #4]
 8003d74:	4613      	mov	r3, r2
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	4413      	add	r3, r2
 8003d7a:	3b05      	subs	r3, #5
 8003d7c:	221f      	movs	r2, #31
 8003d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d82:	43da      	mvns	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	400a      	ands	r2, r1
 8003d8a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	4618      	mov	r0, r3
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	685a      	ldr	r2, [r3, #4]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	4413      	add	r3, r2
 8003da4:	3b05      	subs	r3, #5
 8003da6:	fa00 f203 	lsl.w	r2, r0, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	430a      	orrs	r2, r1
 8003db0:	635a      	str	r2, [r3, #52]	@ 0x34
 8003db2:	e04c      	b.n	8003e4e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	2b0c      	cmp	r3, #12
 8003dba:	d824      	bhi.n	8003e06 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	685a      	ldr	r2, [r3, #4]
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	4413      	add	r3, r2
 8003dcc:	3b23      	subs	r3, #35	@ 0x23
 8003dce:	221f      	movs	r2, #31
 8003dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd4:	43da      	mvns	r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	400a      	ands	r2, r1
 8003ddc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	4618      	mov	r0, r3
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685a      	ldr	r2, [r3, #4]
 8003df0:	4613      	mov	r3, r2
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	4413      	add	r3, r2
 8003df6:	3b23      	subs	r3, #35	@ 0x23
 8003df8:	fa00 f203 	lsl.w	r2, r0, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	430a      	orrs	r2, r1
 8003e02:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e04:	e023      	b.n	8003e4e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	685a      	ldr	r2, [r3, #4]
 8003e10:	4613      	mov	r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	4413      	add	r3, r2
 8003e16:	3b41      	subs	r3, #65	@ 0x41
 8003e18:	221f      	movs	r2, #31
 8003e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1e:	43da      	mvns	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	400a      	ands	r2, r1
 8003e26:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	4618      	mov	r0, r3
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	685a      	ldr	r2, [r3, #4]
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	4413      	add	r3, r2
 8003e40:	3b41      	subs	r3, #65	@ 0x41
 8003e42:	fa00 f203 	lsl.w	r2, r0, r3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e4e:	4b29      	ldr	r3, [pc, #164]	@ (8003ef4 <HAL_ADC_ConfigChannel+0x250>)
 8003e50:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a28      	ldr	r2, [pc, #160]	@ (8003ef8 <HAL_ADC_ConfigChannel+0x254>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d10f      	bne.n	8003e7c <HAL_ADC_ConfigChannel+0x1d8>
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2b12      	cmp	r3, #18
 8003e62:	d10b      	bne.n	8003e7c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a1d      	ldr	r2, [pc, #116]	@ (8003ef8 <HAL_ADC_ConfigChannel+0x254>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d12b      	bne.n	8003ede <HAL_ADC_ConfigChannel+0x23a>
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a1c      	ldr	r2, [pc, #112]	@ (8003efc <HAL_ADC_ConfigChannel+0x258>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d003      	beq.n	8003e98 <HAL_ADC_ConfigChannel+0x1f4>
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2b11      	cmp	r3, #17
 8003e96:	d122      	bne.n	8003ede <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a11      	ldr	r2, [pc, #68]	@ (8003efc <HAL_ADC_ConfigChannel+0x258>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d111      	bne.n	8003ede <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003eba:	4b11      	ldr	r3, [pc, #68]	@ (8003f00 <HAL_ADC_ConfigChannel+0x25c>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a11      	ldr	r2, [pc, #68]	@ (8003f04 <HAL_ADC_ConfigChannel+0x260>)
 8003ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec4:	0c9a      	lsrs	r2, r3, #18
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	4413      	add	r3, r2
 8003ecc:	005b      	lsls	r3, r3, #1
 8003ece:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003ed0:	e002      	b.n	8003ed8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d1f9      	bne.n	8003ed2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3714      	adds	r7, #20
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr
 8003ef4:	40012300 	.word	0x40012300
 8003ef8:	40012000 	.word	0x40012000
 8003efc:	10000012 	.word	0x10000012
 8003f00:	20000168 	.word	0x20000168
 8003f04:	431bde83 	.word	0x431bde83

08003f08 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b085      	sub	sp, #20
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f10:	4b79      	ldr	r3, [pc, #484]	@ (80040f8 <ADC_Init+0x1f0>)
 8003f12:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	685a      	ldr	r2, [r3, #4]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	431a      	orrs	r2, r3
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	685a      	ldr	r2, [r3, #4]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f3c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	6859      	ldr	r1, [r3, #4]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	021a      	lsls	r2, r3, #8
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	685a      	ldr	r2, [r3, #4]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003f60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	6859      	ldr	r1, [r3, #4]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	689a      	ldr	r2, [r3, #8]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	430a      	orrs	r2, r1
 8003f72:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	689a      	ldr	r2, [r3, #8]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	6899      	ldr	r1, [r3, #8]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	68da      	ldr	r2, [r3, #12]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	430a      	orrs	r2, r1
 8003f94:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f9a:	4a58      	ldr	r2, [pc, #352]	@ (80040fc <ADC_Init+0x1f4>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d022      	beq.n	8003fe6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	689a      	ldr	r2, [r3, #8]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003fae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	6899      	ldr	r1, [r3, #8]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	430a      	orrs	r2, r1
 8003fc0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	689a      	ldr	r2, [r3, #8]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003fd0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	6899      	ldr	r1, [r3, #8]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	609a      	str	r2, [r3, #8]
 8003fe4:	e00f      	b.n	8004006 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	689a      	ldr	r2, [r3, #8]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003ff4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	689a      	ldr	r2, [r3, #8]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004004:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	689a      	ldr	r2, [r3, #8]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f022 0202 	bic.w	r2, r2, #2
 8004014:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	6899      	ldr	r1, [r3, #8]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	7e1b      	ldrb	r3, [r3, #24]
 8004020:	005a      	lsls	r2, r3, #1
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	430a      	orrs	r2, r1
 8004028:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d01b      	beq.n	800406c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	685a      	ldr	r2, [r3, #4]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004042:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	685a      	ldr	r2, [r3, #4]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004052:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	6859      	ldr	r1, [r3, #4]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800405e:	3b01      	subs	r3, #1
 8004060:	035a      	lsls	r2, r3, #13
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	430a      	orrs	r2, r1
 8004068:	605a      	str	r2, [r3, #4]
 800406a:	e007      	b.n	800407c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	685a      	ldr	r2, [r3, #4]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800407a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800408a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	69db      	ldr	r3, [r3, #28]
 8004096:	3b01      	subs	r3, #1
 8004098:	051a      	lsls	r2, r3, #20
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	430a      	orrs	r2, r1
 80040a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	689a      	ldr	r2, [r3, #8]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80040b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	6899      	ldr	r1, [r3, #8]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80040be:	025a      	lsls	r2, r3, #9
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	430a      	orrs	r2, r1
 80040c6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	689a      	ldr	r2, [r3, #8]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	6899      	ldr	r1, [r3, #8]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	695b      	ldr	r3, [r3, #20]
 80040e2:	029a      	lsls	r2, r3, #10
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	430a      	orrs	r2, r1
 80040ea:	609a      	str	r2, [r3, #8]
}
 80040ec:	bf00      	nop
 80040ee:	3714      	adds	r7, #20
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr
 80040f8:	40012300 	.word	0x40012300
 80040fc:	0f000001 	.word	0x0f000001

08004100 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800410c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004112:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004116:	2b00      	cmp	r3, #0
 8004118:	d13c      	bne.n	8004194 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800411e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d12b      	bne.n	800418c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004138:	2b00      	cmp	r3, #0
 800413a:	d127      	bne.n	800418c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004142:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004146:	2b00      	cmp	r3, #0
 8004148:	d006      	beq.n	8004158 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004154:	2b00      	cmp	r3, #0
 8004156:	d119      	bne.n	800418c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	685a      	ldr	r2, [r3, #4]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f022 0220 	bic.w	r2, r2, #32
 8004166:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800416c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004178:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d105      	bne.n	800418c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004184:	f043 0201 	orr.w	r2, r3, #1
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800418c:	68f8      	ldr	r0, [r7, #12]
 800418e:	f7fe fe6b 	bl	8002e68 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004192:	e00e      	b.n	80041b2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004198:	f003 0310 	and.w	r3, r3, #16
 800419c:	2b00      	cmp	r3, #0
 800419e:	d003      	beq.n	80041a8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80041a0:	68f8      	ldr	r0, [r7, #12]
 80041a2:	f7ff fd74 	bl	8003c8e <HAL_ADC_ErrorCallback>
}
 80041a6:	e004      	b.n	80041b2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	4798      	blx	r3
}
 80041b2:	bf00      	nop
 80041b4:	3710      	adds	r7, #16
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b084      	sub	sp, #16
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041c6:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80041c8:	68f8      	ldr	r0, [r7, #12]
 80041ca:	f7ff fd56 	bl	8003c7a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80041ce:	bf00      	nop
 80041d0:	3710      	adds	r7, #16
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80041d6:	b580      	push	{r7, lr}
 80041d8:	b084      	sub	sp, #16
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041e2:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2240      	movs	r2, #64	@ 0x40
 80041e8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ee:	f043 0204 	orr.w	r2, r3, #4
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80041f6:	68f8      	ldr	r0, [r7, #12]
 80041f8:	f7ff fd49 	bl	8003c8e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80041fc:	bf00      	nop
 80041fe:	3710      	adds	r7, #16
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004204:	b480      	push	{r7}
 8004206:	b085      	sub	sp, #20
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f003 0307 	and.w	r3, r3, #7
 8004212:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004214:	4b0c      	ldr	r3, [pc, #48]	@ (8004248 <__NVIC_SetPriorityGrouping+0x44>)
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800421a:	68ba      	ldr	r2, [r7, #8]
 800421c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004220:	4013      	ands	r3, r2
 8004222:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800422c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004230:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004234:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004236:	4a04      	ldr	r2, [pc, #16]	@ (8004248 <__NVIC_SetPriorityGrouping+0x44>)
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	60d3      	str	r3, [r2, #12]
}
 800423c:	bf00      	nop
 800423e:	3714      	adds	r7, #20
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr
 8004248:	e000ed00 	.word	0xe000ed00

0800424c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800424c:	b480      	push	{r7}
 800424e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004250:	4b04      	ldr	r3, [pc, #16]	@ (8004264 <__NVIC_GetPriorityGrouping+0x18>)
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	0a1b      	lsrs	r3, r3, #8
 8004256:	f003 0307 	and.w	r3, r3, #7
}
 800425a:	4618      	mov	r0, r3
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr
 8004264:	e000ed00 	.word	0xe000ed00

08004268 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	4603      	mov	r3, r0
 8004270:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004276:	2b00      	cmp	r3, #0
 8004278:	db0b      	blt.n	8004292 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800427a:	79fb      	ldrb	r3, [r7, #7]
 800427c:	f003 021f 	and.w	r2, r3, #31
 8004280:	4907      	ldr	r1, [pc, #28]	@ (80042a0 <__NVIC_EnableIRQ+0x38>)
 8004282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004286:	095b      	lsrs	r3, r3, #5
 8004288:	2001      	movs	r0, #1
 800428a:	fa00 f202 	lsl.w	r2, r0, r2
 800428e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004292:	bf00      	nop
 8004294:	370c      	adds	r7, #12
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	e000e100 	.word	0xe000e100

080042a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	4603      	mov	r3, r0
 80042ac:	6039      	str	r1, [r7, #0]
 80042ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	db0a      	blt.n	80042ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	b2da      	uxtb	r2, r3
 80042bc:	490c      	ldr	r1, [pc, #48]	@ (80042f0 <__NVIC_SetPriority+0x4c>)
 80042be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042c2:	0112      	lsls	r2, r2, #4
 80042c4:	b2d2      	uxtb	r2, r2
 80042c6:	440b      	add	r3, r1
 80042c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042cc:	e00a      	b.n	80042e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	b2da      	uxtb	r2, r3
 80042d2:	4908      	ldr	r1, [pc, #32]	@ (80042f4 <__NVIC_SetPriority+0x50>)
 80042d4:	79fb      	ldrb	r3, [r7, #7]
 80042d6:	f003 030f 	and.w	r3, r3, #15
 80042da:	3b04      	subs	r3, #4
 80042dc:	0112      	lsls	r2, r2, #4
 80042de:	b2d2      	uxtb	r2, r2
 80042e0:	440b      	add	r3, r1
 80042e2:	761a      	strb	r2, [r3, #24]
}
 80042e4:	bf00      	nop
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr
 80042f0:	e000e100 	.word	0xe000e100
 80042f4:	e000ed00 	.word	0xe000ed00

080042f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b089      	sub	sp, #36	@ 0x24
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f003 0307 	and.w	r3, r3, #7
 800430a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	f1c3 0307 	rsb	r3, r3, #7
 8004312:	2b04      	cmp	r3, #4
 8004314:	bf28      	it	cs
 8004316:	2304      	movcs	r3, #4
 8004318:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	3304      	adds	r3, #4
 800431e:	2b06      	cmp	r3, #6
 8004320:	d902      	bls.n	8004328 <NVIC_EncodePriority+0x30>
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	3b03      	subs	r3, #3
 8004326:	e000      	b.n	800432a <NVIC_EncodePriority+0x32>
 8004328:	2300      	movs	r3, #0
 800432a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800432c:	f04f 32ff 	mov.w	r2, #4294967295
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	fa02 f303 	lsl.w	r3, r2, r3
 8004336:	43da      	mvns	r2, r3
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	401a      	ands	r2, r3
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004340:	f04f 31ff 	mov.w	r1, #4294967295
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	fa01 f303 	lsl.w	r3, r1, r3
 800434a:	43d9      	mvns	r1, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004350:	4313      	orrs	r3, r2
         );
}
 8004352:	4618      	mov	r0, r3
 8004354:	3724      	adds	r7, #36	@ 0x24
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
	...

08004360 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	3b01      	subs	r3, #1
 800436c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004370:	d301      	bcc.n	8004376 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004372:	2301      	movs	r3, #1
 8004374:	e00f      	b.n	8004396 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004376:	4a0a      	ldr	r2, [pc, #40]	@ (80043a0 <SysTick_Config+0x40>)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	3b01      	subs	r3, #1
 800437c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800437e:	210f      	movs	r1, #15
 8004380:	f04f 30ff 	mov.w	r0, #4294967295
 8004384:	f7ff ff8e 	bl	80042a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004388:	4b05      	ldr	r3, [pc, #20]	@ (80043a0 <SysTick_Config+0x40>)
 800438a:	2200      	movs	r2, #0
 800438c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800438e:	4b04      	ldr	r3, [pc, #16]	@ (80043a0 <SysTick_Config+0x40>)
 8004390:	2207      	movs	r2, #7
 8004392:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3708      	adds	r7, #8
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	e000e010 	.word	0xe000e010

080043a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f7ff ff29 	bl	8004204 <__NVIC_SetPriorityGrouping>
}
 80043b2:	bf00      	nop
 80043b4:	3708      	adds	r7, #8
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}

080043ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80043ba:	b580      	push	{r7, lr}
 80043bc:	b086      	sub	sp, #24
 80043be:	af00      	add	r7, sp, #0
 80043c0:	4603      	mov	r3, r0
 80043c2:	60b9      	str	r1, [r7, #8]
 80043c4:	607a      	str	r2, [r7, #4]
 80043c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80043c8:	2300      	movs	r3, #0
 80043ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80043cc:	f7ff ff3e 	bl	800424c <__NVIC_GetPriorityGrouping>
 80043d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	68b9      	ldr	r1, [r7, #8]
 80043d6:	6978      	ldr	r0, [r7, #20]
 80043d8:	f7ff ff8e 	bl	80042f8 <NVIC_EncodePriority>
 80043dc:	4602      	mov	r2, r0
 80043de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043e2:	4611      	mov	r1, r2
 80043e4:	4618      	mov	r0, r3
 80043e6:	f7ff ff5d 	bl	80042a4 <__NVIC_SetPriority>
}
 80043ea:	bf00      	nop
 80043ec:	3718      	adds	r7, #24
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}

080043f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043f2:	b580      	push	{r7, lr}
 80043f4:	b082      	sub	sp, #8
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	4603      	mov	r3, r0
 80043fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004400:	4618      	mov	r0, r3
 8004402:	f7ff ff31 	bl	8004268 <__NVIC_EnableIRQ>
}
 8004406:	bf00      	nop
 8004408:	3708      	adds	r7, #8
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}

0800440e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800440e:	b580      	push	{r7, lr}
 8004410:	b082      	sub	sp, #8
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f7ff ffa2 	bl	8004360 <SysTick_Config>
 800441c:	4603      	mov	r3, r0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3708      	adds	r7, #8
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
	...

08004428 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b086      	sub	sp, #24
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004430:	2300      	movs	r3, #0
 8004432:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004434:	f7ff fab0 	bl	8003998 <HAL_GetTick>
 8004438:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d101      	bne.n	8004444 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e099      	b.n	8004578 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2202      	movs	r2, #2
 8004448:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f022 0201 	bic.w	r2, r2, #1
 8004462:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004464:	e00f      	b.n	8004486 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004466:	f7ff fa97 	bl	8003998 <HAL_GetTick>
 800446a:	4602      	mov	r2, r0
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	2b05      	cmp	r3, #5
 8004472:	d908      	bls.n	8004486 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2220      	movs	r2, #32
 8004478:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2203      	movs	r2, #3
 800447e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e078      	b.n	8004578 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0301 	and.w	r3, r3, #1
 8004490:	2b00      	cmp	r3, #0
 8004492:	d1e8      	bne.n	8004466 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800449c:	697a      	ldr	r2, [r7, #20]
 800449e:	4b38      	ldr	r3, [pc, #224]	@ (8004580 <HAL_DMA_Init+0x158>)
 80044a0:	4013      	ands	r3, r2
 80044a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685a      	ldr	r2, [r3, #4]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	691b      	ldr	r3, [r3, #16]
 80044b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a1b      	ldr	r3, [r3, #32]
 80044d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044d2:	697a      	ldr	r2, [r7, #20]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044dc:	2b04      	cmp	r3, #4
 80044de:	d107      	bne.n	80044f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044e8:	4313      	orrs	r3, r2
 80044ea:	697a      	ldr	r2, [r7, #20]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	697a      	ldr	r2, [r7, #20]
 80044f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	695b      	ldr	r3, [r3, #20]
 80044fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	f023 0307 	bic.w	r3, r3, #7
 8004506:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800450c:	697a      	ldr	r2, [r7, #20]
 800450e:	4313      	orrs	r3, r2
 8004510:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004516:	2b04      	cmp	r3, #4
 8004518:	d117      	bne.n	800454a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800451e:	697a      	ldr	r2, [r7, #20]
 8004520:	4313      	orrs	r3, r2
 8004522:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004528:	2b00      	cmp	r3, #0
 800452a:	d00e      	beq.n	800454a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 fb1b 	bl	8004b68 <DMA_CheckFifoParam>
 8004532:	4603      	mov	r3, r0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d008      	beq.n	800454a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2240      	movs	r2, #64	@ 0x40
 800453c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2201      	movs	r2, #1
 8004542:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004546:	2301      	movs	r3, #1
 8004548:	e016      	b.n	8004578 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	697a      	ldr	r2, [r7, #20]
 8004550:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 fad2 	bl	8004afc <DMA_CalcBaseAndBitshift>
 8004558:	4603      	mov	r3, r0
 800455a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004560:	223f      	movs	r2, #63	@ 0x3f
 8004562:	409a      	lsls	r2, r3
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2201      	movs	r2, #1
 8004572:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3718      	adds	r7, #24
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}
 8004580:	f010803f 	.word	0xf010803f

08004584 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b086      	sub	sp, #24
 8004588:	af00      	add	r7, sp, #0
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	607a      	str	r2, [r7, #4]
 8004590:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004592:	2300      	movs	r3, #0
 8004594:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800459c:	2b01      	cmp	r3, #1
 800459e:	d101      	bne.n	80045a4 <HAL_DMA_Start+0x20>
 80045a0:	2302      	movs	r3, #2
 80045a2:	e026      	b.n	80045f2 <HAL_DMA_Start+0x6e>
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d115      	bne.n	80045e4 <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2202      	movs	r2, #2
 80045bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2200      	movs	r2, #0
 80045c4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	68b9      	ldr	r1, [r7, #8]
 80045cc:	68f8      	ldr	r0, [r7, #12]
 80045ce:	f000 fa67 	bl	8004aa0 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f042 0201 	orr.w	r2, r2, #1
 80045e0:	601a      	str	r2, [r3, #0]
 80045e2:	e005      	b.n	80045f0 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80045ec:	2302      	movs	r3, #2
 80045ee:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 80045f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3718      	adds	r7, #24
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}

080045fa <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045fa:	b580      	push	{r7, lr}
 80045fc:	b086      	sub	sp, #24
 80045fe:	af00      	add	r7, sp, #0
 8004600:	60f8      	str	r0, [r7, #12]
 8004602:	60b9      	str	r1, [r7, #8]
 8004604:	607a      	str	r2, [r7, #4]
 8004606:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004608:	2300      	movs	r3, #0
 800460a:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004610:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004618:	2b01      	cmp	r3, #1
 800461a:	d101      	bne.n	8004620 <HAL_DMA_Start_IT+0x26>
 800461c:	2302      	movs	r3, #2
 800461e:	e040      	b.n	80046a2 <HAL_DMA_Start_IT+0xa8>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800462e:	b2db      	uxtb	r3, r3
 8004630:	2b01      	cmp	r3, #1
 8004632:	d12f      	bne.n	8004694 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2202      	movs	r2, #2
 8004638:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2200      	movs	r2, #0
 8004640:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	68b9      	ldr	r1, [r7, #8]
 8004648:	68f8      	ldr	r0, [r7, #12]
 800464a:	f000 fa29 	bl	8004aa0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004652:	223f      	movs	r2, #63	@ 0x3f
 8004654:	409a      	lsls	r2, r3
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f042 0216 	orr.w	r2, r2, #22
 8004668:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800466e:	2b00      	cmp	r3, #0
 8004670:	d007      	beq.n	8004682 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f042 0208 	orr.w	r2, r2, #8
 8004680:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f042 0201 	orr.w	r2, r2, #1
 8004690:	601a      	str	r2, [r3, #0]
 8004692:	e005      	b.n	80046a0 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800469c:	2302      	movs	r3, #2
 800469e:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80046a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3718      	adds	r7, #24
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}

080046aa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b084      	sub	sp, #16
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046b6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80046b8:	f7ff f96e 	bl	8003998 <HAL_GetTick>
 80046bc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b02      	cmp	r3, #2
 80046c8:	d008      	beq.n	80046dc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2280      	movs	r2, #128	@ 0x80
 80046ce:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e052      	b.n	8004782 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f022 0216 	bic.w	r2, r2, #22
 80046ea:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	695a      	ldr	r2, [r3, #20]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80046fa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004700:	2b00      	cmp	r3, #0
 8004702:	d103      	bne.n	800470c <HAL_DMA_Abort+0x62>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004708:	2b00      	cmp	r3, #0
 800470a:	d007      	beq.n	800471c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f022 0208 	bic.w	r2, r2, #8
 800471a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f022 0201 	bic.w	r2, r2, #1
 800472a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800472c:	e013      	b.n	8004756 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800472e:	f7ff f933 	bl	8003998 <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	2b05      	cmp	r3, #5
 800473a:	d90c      	bls.n	8004756 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2220      	movs	r2, #32
 8004740:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2203      	movs	r2, #3
 8004746:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e015      	b.n	8004782 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0301 	and.w	r3, r3, #1
 8004760:	2b00      	cmp	r3, #0
 8004762:	d1e4      	bne.n	800472e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004768:	223f      	movs	r2, #63	@ 0x3f
 800476a:	409a      	lsls	r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3710      	adds	r7, #16
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
	...

0800478c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b086      	sub	sp, #24
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004794:	2300      	movs	r3, #0
 8004796:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004798:	4b8e      	ldr	r3, [pc, #568]	@ (80049d4 <HAL_DMA_IRQHandler+0x248>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a8e      	ldr	r2, [pc, #568]	@ (80049d8 <HAL_DMA_IRQHandler+0x24c>)
 800479e:	fba2 2303 	umull	r2, r3, r2, r3
 80047a2:	0a9b      	lsrs	r3, r3, #10
 80047a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047b6:	2208      	movs	r2, #8
 80047b8:	409a      	lsls	r2, r3
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	4013      	ands	r3, r2
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d01a      	beq.n	80047f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0304 	and.w	r3, r3, #4
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d013      	beq.n	80047f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f022 0204 	bic.w	r2, r2, #4
 80047de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047e4:	2208      	movs	r2, #8
 80047e6:	409a      	lsls	r2, r3
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047f0:	f043 0201 	orr.w	r2, r3, #1
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047fc:	2201      	movs	r2, #1
 80047fe:	409a      	lsls	r2, r3
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	4013      	ands	r3, r2
 8004804:	2b00      	cmp	r3, #0
 8004806:	d012      	beq.n	800482e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00b      	beq.n	800482e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800481a:	2201      	movs	r2, #1
 800481c:	409a      	lsls	r2, r3
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004826:	f043 0202 	orr.w	r2, r3, #2
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004832:	2204      	movs	r2, #4
 8004834:	409a      	lsls	r2, r3
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	4013      	ands	r3, r2
 800483a:	2b00      	cmp	r3, #0
 800483c:	d012      	beq.n	8004864 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0302 	and.w	r3, r3, #2
 8004848:	2b00      	cmp	r3, #0
 800484a:	d00b      	beq.n	8004864 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004850:	2204      	movs	r2, #4
 8004852:	409a      	lsls	r2, r3
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800485c:	f043 0204 	orr.w	r2, r3, #4
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004868:	2210      	movs	r2, #16
 800486a:	409a      	lsls	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	4013      	ands	r3, r2
 8004870:	2b00      	cmp	r3, #0
 8004872:	d043      	beq.n	80048fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0308 	and.w	r3, r3, #8
 800487e:	2b00      	cmp	r3, #0
 8004880:	d03c      	beq.n	80048fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004886:	2210      	movs	r2, #16
 8004888:	409a      	lsls	r2, r3
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d018      	beq.n	80048ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d108      	bne.n	80048bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d024      	beq.n	80048fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	4798      	blx	r3
 80048ba:	e01f      	b.n	80048fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d01b      	beq.n	80048fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	4798      	blx	r3
 80048cc:	e016      	b.n	80048fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d107      	bne.n	80048ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f022 0208 	bic.w	r2, r2, #8
 80048ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d003      	beq.n	80048fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004900:	2220      	movs	r2, #32
 8004902:	409a      	lsls	r2, r3
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	4013      	ands	r3, r2
 8004908:	2b00      	cmp	r3, #0
 800490a:	f000 808f 	beq.w	8004a2c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0310 	and.w	r3, r3, #16
 8004918:	2b00      	cmp	r3, #0
 800491a:	f000 8087 	beq.w	8004a2c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004922:	2220      	movs	r2, #32
 8004924:	409a      	lsls	r2, r3
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004930:	b2db      	uxtb	r3, r3
 8004932:	2b05      	cmp	r3, #5
 8004934:	d136      	bne.n	80049a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f022 0216 	bic.w	r2, r2, #22
 8004944:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	695a      	ldr	r2, [r3, #20]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004954:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800495a:	2b00      	cmp	r3, #0
 800495c:	d103      	bne.n	8004966 <HAL_DMA_IRQHandler+0x1da>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004962:	2b00      	cmp	r3, #0
 8004964:	d007      	beq.n	8004976 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f022 0208 	bic.w	r2, r2, #8
 8004974:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800497a:	223f      	movs	r2, #63	@ 0x3f
 800497c:	409a      	lsls	r2, r3
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2201      	movs	r2, #1
 8004986:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004996:	2b00      	cmp	r3, #0
 8004998:	d07e      	beq.n	8004a98 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	4798      	blx	r3
        }
        return;
 80049a2:	e079      	b.n	8004a98 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d01d      	beq.n	80049ee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d10d      	bne.n	80049dc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d031      	beq.n	8004a2c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	4798      	blx	r3
 80049d0:	e02c      	b.n	8004a2c <HAL_DMA_IRQHandler+0x2a0>
 80049d2:	bf00      	nop
 80049d4:	20000168 	.word	0x20000168
 80049d8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d023      	beq.n	8004a2c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	4798      	blx	r3
 80049ec:	e01e      	b.n	8004a2c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d10f      	bne.n	8004a1c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f022 0210 	bic.w	r2, r2, #16
 8004a0a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d003      	beq.n	8004a2c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d032      	beq.n	8004a9a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a38:	f003 0301 	and.w	r3, r3, #1
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d022      	beq.n	8004a86 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2205      	movs	r2, #5
 8004a44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f022 0201 	bic.w	r2, r2, #1
 8004a56:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	60bb      	str	r3, [r7, #8]
 8004a5e:	697a      	ldr	r2, [r7, #20]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d307      	bcc.n	8004a74 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0301 	and.w	r3, r3, #1
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d1f2      	bne.n	8004a58 <HAL_DMA_IRQHandler+0x2cc>
 8004a72:	e000      	b.n	8004a76 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004a74:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d005      	beq.n	8004a9a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	4798      	blx	r3
 8004a96:	e000      	b.n	8004a9a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004a98:	bf00      	nop
    }
  }
}
 8004a9a:	3718      	adds	r7, #24
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b085      	sub	sp, #20
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	607a      	str	r2, [r7, #4]
 8004aac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004abc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	683a      	ldr	r2, [r7, #0]
 8004ac4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	2b40      	cmp	r3, #64	@ 0x40
 8004acc:	d108      	bne.n	8004ae0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68ba      	ldr	r2, [r7, #8]
 8004adc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004ade:	e007      	b.n	8004af0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68ba      	ldr	r2, [r7, #8]
 8004ae6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	60da      	str	r2, [r3, #12]
}
 8004af0:	bf00      	nop
 8004af2:	3714      	adds	r7, #20
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b085      	sub	sp, #20
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	3b10      	subs	r3, #16
 8004b0c:	4a14      	ldr	r2, [pc, #80]	@ (8004b60 <DMA_CalcBaseAndBitshift+0x64>)
 8004b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b12:	091b      	lsrs	r3, r3, #4
 8004b14:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004b16:	4a13      	ldr	r2, [pc, #76]	@ (8004b64 <DMA_CalcBaseAndBitshift+0x68>)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	461a      	mov	r2, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2b03      	cmp	r3, #3
 8004b28:	d909      	bls.n	8004b3e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004b32:	f023 0303 	bic.w	r3, r3, #3
 8004b36:	1d1a      	adds	r2, r3, #4
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	659a      	str	r2, [r3, #88]	@ 0x58
 8004b3c:	e007      	b.n	8004b4e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004b46:	f023 0303 	bic.w	r3, r3, #3
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3714      	adds	r7, #20
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr
 8004b5e:	bf00      	nop
 8004b60:	aaaaaaab 	.word	0xaaaaaaab
 8004b64:	08009e04 	.word	0x08009e04

08004b68 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b70:	2300      	movs	r3, #0
 8004b72:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b78:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	699b      	ldr	r3, [r3, #24]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d11f      	bne.n	8004bc2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	2b03      	cmp	r3, #3
 8004b86:	d856      	bhi.n	8004c36 <DMA_CheckFifoParam+0xce>
 8004b88:	a201      	add	r2, pc, #4	@ (adr r2, 8004b90 <DMA_CheckFifoParam+0x28>)
 8004b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b8e:	bf00      	nop
 8004b90:	08004ba1 	.word	0x08004ba1
 8004b94:	08004bb3 	.word	0x08004bb3
 8004b98:	08004ba1 	.word	0x08004ba1
 8004b9c:	08004c37 	.word	0x08004c37
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ba4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d046      	beq.n	8004c3a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bb0:	e043      	b.n	8004c3a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bb6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004bba:	d140      	bne.n	8004c3e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bc0:	e03d      	b.n	8004c3e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bca:	d121      	bne.n	8004c10 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	2b03      	cmp	r3, #3
 8004bd0:	d837      	bhi.n	8004c42 <DMA_CheckFifoParam+0xda>
 8004bd2:	a201      	add	r2, pc, #4	@ (adr r2, 8004bd8 <DMA_CheckFifoParam+0x70>)
 8004bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd8:	08004be9 	.word	0x08004be9
 8004bdc:	08004bef 	.word	0x08004bef
 8004be0:	08004be9 	.word	0x08004be9
 8004be4:	08004c01 	.word	0x08004c01
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	73fb      	strb	r3, [r7, #15]
      break;
 8004bec:	e030      	b.n	8004c50 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bf2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d025      	beq.n	8004c46 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bfe:	e022      	b.n	8004c46 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c04:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004c08:	d11f      	bne.n	8004c4a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004c0e:	e01c      	b.n	8004c4a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d903      	bls.n	8004c1e <DMA_CheckFifoParam+0xb6>
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	2b03      	cmp	r3, #3
 8004c1a:	d003      	beq.n	8004c24 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004c1c:	e018      	b.n	8004c50 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	73fb      	strb	r3, [r7, #15]
      break;
 8004c22:	e015      	b.n	8004c50 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c28:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d00e      	beq.n	8004c4e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	73fb      	strb	r3, [r7, #15]
      break;
 8004c34:	e00b      	b.n	8004c4e <DMA_CheckFifoParam+0xe6>
      break;
 8004c36:	bf00      	nop
 8004c38:	e00a      	b.n	8004c50 <DMA_CheckFifoParam+0xe8>
      break;
 8004c3a:	bf00      	nop
 8004c3c:	e008      	b.n	8004c50 <DMA_CheckFifoParam+0xe8>
      break;
 8004c3e:	bf00      	nop
 8004c40:	e006      	b.n	8004c50 <DMA_CheckFifoParam+0xe8>
      break;
 8004c42:	bf00      	nop
 8004c44:	e004      	b.n	8004c50 <DMA_CheckFifoParam+0xe8>
      break;
 8004c46:	bf00      	nop
 8004c48:	e002      	b.n	8004c50 <DMA_CheckFifoParam+0xe8>
      break;   
 8004c4a:	bf00      	nop
 8004c4c:	e000      	b.n	8004c50 <DMA_CheckFifoParam+0xe8>
      break;
 8004c4e:	bf00      	nop
    }
  } 
  
  return status; 
 8004c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3714      	adds	r7, #20
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop

08004c60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b089      	sub	sp, #36	@ 0x24
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004c72:	2300      	movs	r3, #0
 8004c74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c76:	2300      	movs	r3, #0
 8004c78:	61fb      	str	r3, [r7, #28]
 8004c7a:	e159      	b.n	8004f30 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	fa02 f303 	lsl.w	r3, r2, r3
 8004c84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	697a      	ldr	r2, [r7, #20]
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004c90:	693a      	ldr	r2, [r7, #16]
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	f040 8148 	bne.w	8004f2a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	f003 0303 	and.w	r3, r3, #3
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d005      	beq.n	8004cb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d130      	bne.n	8004d14 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	005b      	lsls	r3, r3, #1
 8004cbc:	2203      	movs	r2, #3
 8004cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc2:	43db      	mvns	r3, r3
 8004cc4:	69ba      	ldr	r2, [r7, #24]
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	68da      	ldr	r2, [r3, #12]
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	005b      	lsls	r3, r3, #1
 8004cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd6:	69ba      	ldr	r2, [r7, #24]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	69ba      	ldr	r2, [r7, #24]
 8004ce0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ce8:	2201      	movs	r2, #1
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf0:	43db      	mvns	r3, r3
 8004cf2:	69ba      	ldr	r2, [r7, #24]
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	091b      	lsrs	r3, r3, #4
 8004cfe:	f003 0201 	and.w	r2, r3, #1
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	fa02 f303 	lsl.w	r3, r2, r3
 8004d08:	69ba      	ldr	r2, [r7, #24]
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	69ba      	ldr	r2, [r7, #24]
 8004d12:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f003 0303 	and.w	r3, r3, #3
 8004d1c:	2b03      	cmp	r3, #3
 8004d1e:	d017      	beq.n	8004d50 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	005b      	lsls	r3, r3, #1
 8004d2a:	2203      	movs	r2, #3
 8004d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d30:	43db      	mvns	r3, r3
 8004d32:	69ba      	ldr	r2, [r7, #24]
 8004d34:	4013      	ands	r3, r2
 8004d36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	689a      	ldr	r2, [r3, #8]
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	005b      	lsls	r3, r3, #1
 8004d40:	fa02 f303 	lsl.w	r3, r2, r3
 8004d44:	69ba      	ldr	r2, [r7, #24]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	69ba      	ldr	r2, [r7, #24]
 8004d4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	f003 0303 	and.w	r3, r3, #3
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	d123      	bne.n	8004da4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	08da      	lsrs	r2, r3, #3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	3208      	adds	r2, #8
 8004d64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d68:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	f003 0307 	and.w	r3, r3, #7
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	220f      	movs	r2, #15
 8004d74:	fa02 f303 	lsl.w	r3, r2, r3
 8004d78:	43db      	mvns	r3, r3
 8004d7a:	69ba      	ldr	r2, [r7, #24]
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	691a      	ldr	r2, [r3, #16]
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	f003 0307 	and.w	r3, r3, #7
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d90:	69ba      	ldr	r2, [r7, #24]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	08da      	lsrs	r2, r3, #3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	3208      	adds	r2, #8
 8004d9e:	69b9      	ldr	r1, [r7, #24]
 8004da0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	005b      	lsls	r3, r3, #1
 8004dae:	2203      	movs	r2, #3
 8004db0:	fa02 f303 	lsl.w	r3, r2, r3
 8004db4:	43db      	mvns	r3, r3
 8004db6:	69ba      	ldr	r2, [r7, #24]
 8004db8:	4013      	ands	r3, r2
 8004dba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f003 0203 	and.w	r2, r3, #3
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	005b      	lsls	r3, r3, #1
 8004dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dcc:	69ba      	ldr	r2, [r7, #24]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	69ba      	ldr	r2, [r7, #24]
 8004dd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	f000 80a2 	beq.w	8004f2a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004de6:	2300      	movs	r3, #0
 8004de8:	60fb      	str	r3, [r7, #12]
 8004dea:	4b57      	ldr	r3, [pc, #348]	@ (8004f48 <HAL_GPIO_Init+0x2e8>)
 8004dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dee:	4a56      	ldr	r2, [pc, #344]	@ (8004f48 <HAL_GPIO_Init+0x2e8>)
 8004df0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004df4:	6453      	str	r3, [r2, #68]	@ 0x44
 8004df6:	4b54      	ldr	r3, [pc, #336]	@ (8004f48 <HAL_GPIO_Init+0x2e8>)
 8004df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004dfe:	60fb      	str	r3, [r7, #12]
 8004e00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e02:	4a52      	ldr	r2, [pc, #328]	@ (8004f4c <HAL_GPIO_Init+0x2ec>)
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	089b      	lsrs	r3, r3, #2
 8004e08:	3302      	adds	r3, #2
 8004e0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	f003 0303 	and.w	r3, r3, #3
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	220f      	movs	r2, #15
 8004e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1e:	43db      	mvns	r3, r3
 8004e20:	69ba      	ldr	r2, [r7, #24]
 8004e22:	4013      	ands	r3, r2
 8004e24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a49      	ldr	r2, [pc, #292]	@ (8004f50 <HAL_GPIO_Init+0x2f0>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d019      	beq.n	8004e62 <HAL_GPIO_Init+0x202>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a48      	ldr	r2, [pc, #288]	@ (8004f54 <HAL_GPIO_Init+0x2f4>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d013      	beq.n	8004e5e <HAL_GPIO_Init+0x1fe>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a47      	ldr	r2, [pc, #284]	@ (8004f58 <HAL_GPIO_Init+0x2f8>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d00d      	beq.n	8004e5a <HAL_GPIO_Init+0x1fa>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a46      	ldr	r2, [pc, #280]	@ (8004f5c <HAL_GPIO_Init+0x2fc>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d007      	beq.n	8004e56 <HAL_GPIO_Init+0x1f6>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a45      	ldr	r2, [pc, #276]	@ (8004f60 <HAL_GPIO_Init+0x300>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d101      	bne.n	8004e52 <HAL_GPIO_Init+0x1f2>
 8004e4e:	2304      	movs	r3, #4
 8004e50:	e008      	b.n	8004e64 <HAL_GPIO_Init+0x204>
 8004e52:	2307      	movs	r3, #7
 8004e54:	e006      	b.n	8004e64 <HAL_GPIO_Init+0x204>
 8004e56:	2303      	movs	r3, #3
 8004e58:	e004      	b.n	8004e64 <HAL_GPIO_Init+0x204>
 8004e5a:	2302      	movs	r3, #2
 8004e5c:	e002      	b.n	8004e64 <HAL_GPIO_Init+0x204>
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e000      	b.n	8004e64 <HAL_GPIO_Init+0x204>
 8004e62:	2300      	movs	r3, #0
 8004e64:	69fa      	ldr	r2, [r7, #28]
 8004e66:	f002 0203 	and.w	r2, r2, #3
 8004e6a:	0092      	lsls	r2, r2, #2
 8004e6c:	4093      	lsls	r3, r2
 8004e6e:	69ba      	ldr	r2, [r7, #24]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e74:	4935      	ldr	r1, [pc, #212]	@ (8004f4c <HAL_GPIO_Init+0x2ec>)
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	089b      	lsrs	r3, r3, #2
 8004e7a:	3302      	adds	r3, #2
 8004e7c:	69ba      	ldr	r2, [r7, #24]
 8004e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e82:	4b38      	ldr	r3, [pc, #224]	@ (8004f64 <HAL_GPIO_Init+0x304>)
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	43db      	mvns	r3, r3
 8004e8c:	69ba      	ldr	r2, [r7, #24]
 8004e8e:	4013      	ands	r3, r2
 8004e90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d003      	beq.n	8004ea6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004e9e:	69ba      	ldr	r2, [r7, #24]
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004ea6:	4a2f      	ldr	r2, [pc, #188]	@ (8004f64 <HAL_GPIO_Init+0x304>)
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004eac:	4b2d      	ldr	r3, [pc, #180]	@ (8004f64 <HAL_GPIO_Init+0x304>)
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	43db      	mvns	r3, r3
 8004eb6:	69ba      	ldr	r2, [r7, #24]
 8004eb8:	4013      	ands	r3, r2
 8004eba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d003      	beq.n	8004ed0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004ec8:	69ba      	ldr	r2, [r7, #24]
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ed0:	4a24      	ldr	r2, [pc, #144]	@ (8004f64 <HAL_GPIO_Init+0x304>)
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004ed6:	4b23      	ldr	r3, [pc, #140]	@ (8004f64 <HAL_GPIO_Init+0x304>)
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	43db      	mvns	r3, r3
 8004ee0:	69ba      	ldr	r2, [r7, #24]
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d003      	beq.n	8004efa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004ef2:	69ba      	ldr	r2, [r7, #24]
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004efa:	4a1a      	ldr	r2, [pc, #104]	@ (8004f64 <HAL_GPIO_Init+0x304>)
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f00:	4b18      	ldr	r3, [pc, #96]	@ (8004f64 <HAL_GPIO_Init+0x304>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	43db      	mvns	r3, r3
 8004f0a:	69ba      	ldr	r2, [r7, #24]
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d003      	beq.n	8004f24 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004f1c:	69ba      	ldr	r2, [r7, #24]
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004f24:	4a0f      	ldr	r2, [pc, #60]	@ (8004f64 <HAL_GPIO_Init+0x304>)
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	61fb      	str	r3, [r7, #28]
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	2b0f      	cmp	r3, #15
 8004f34:	f67f aea2 	bls.w	8004c7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004f38:	bf00      	nop
 8004f3a:	bf00      	nop
 8004f3c:	3724      	adds	r7, #36	@ 0x24
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr
 8004f46:	bf00      	nop
 8004f48:	40023800 	.word	0x40023800
 8004f4c:	40013800 	.word	0x40013800
 8004f50:	40020000 	.word	0x40020000
 8004f54:	40020400 	.word	0x40020400
 8004f58:	40020800 	.word	0x40020800
 8004f5c:	40020c00 	.word	0x40020c00
 8004f60:	40021000 	.word	0x40021000
 8004f64:	40013c00 	.word	0x40013c00

08004f68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	460b      	mov	r3, r1
 8004f72:	807b      	strh	r3, [r7, #2]
 8004f74:	4613      	mov	r3, r2
 8004f76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004f78:	787b      	ldrb	r3, [r7, #1]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d003      	beq.n	8004f86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f7e:	887a      	ldrh	r2, [r7, #2]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004f84:	e003      	b.n	8004f8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004f86:	887b      	ldrh	r3, [r7, #2]
 8004f88:	041a      	lsls	r2, r3, #16
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	619a      	str	r2, [r3, #24]
}
 8004f8e:	bf00      	nop
 8004f90:	370c      	adds	r7, #12
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr
	...

08004f9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004fa6:	4b08      	ldr	r3, [pc, #32]	@ (8004fc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004fa8:	695a      	ldr	r2, [r3, #20]
 8004faa:	88fb      	ldrh	r3, [r7, #6]
 8004fac:	4013      	ands	r3, r2
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d006      	beq.n	8004fc0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004fb2:	4a05      	ldr	r2, [pc, #20]	@ (8004fc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004fb4:	88fb      	ldrh	r3, [r7, #6]
 8004fb6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004fb8:	88fb      	ldrh	r3, [r7, #6]
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f7fd fed8 	bl	8002d70 <HAL_GPIO_EXTI_Callback>
  }
}
 8004fc0:	bf00      	nop
 8004fc2:	3708      	adds	r7, #8
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	40013c00 	.word	0x40013c00

08004fcc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d101      	bne.n	8004fde <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e12b      	b.n	8005236 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d106      	bne.n	8004ff8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f7fd fa70 	bl	80024d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2224      	movs	r2, #36	@ 0x24
 8004ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f022 0201 	bic.w	r2, r2, #1
 800500e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800501e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800502e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005030:	f001 f89a 	bl	8006168 <HAL_RCC_GetPCLK1Freq>
 8005034:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	4a81      	ldr	r2, [pc, #516]	@ (8005240 <HAL_I2C_Init+0x274>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d807      	bhi.n	8005050 <HAL_I2C_Init+0x84>
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	4a80      	ldr	r2, [pc, #512]	@ (8005244 <HAL_I2C_Init+0x278>)
 8005044:	4293      	cmp	r3, r2
 8005046:	bf94      	ite	ls
 8005048:	2301      	movls	r3, #1
 800504a:	2300      	movhi	r3, #0
 800504c:	b2db      	uxtb	r3, r3
 800504e:	e006      	b.n	800505e <HAL_I2C_Init+0x92>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	4a7d      	ldr	r2, [pc, #500]	@ (8005248 <HAL_I2C_Init+0x27c>)
 8005054:	4293      	cmp	r3, r2
 8005056:	bf94      	ite	ls
 8005058:	2301      	movls	r3, #1
 800505a:	2300      	movhi	r3, #0
 800505c:	b2db      	uxtb	r3, r3
 800505e:	2b00      	cmp	r3, #0
 8005060:	d001      	beq.n	8005066 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e0e7      	b.n	8005236 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	4a78      	ldr	r2, [pc, #480]	@ (800524c <HAL_I2C_Init+0x280>)
 800506a:	fba2 2303 	umull	r2, r3, r2, r3
 800506e:	0c9b      	lsrs	r3, r3, #18
 8005070:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68ba      	ldr	r2, [r7, #8]
 8005082:	430a      	orrs	r2, r1
 8005084:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	6a1b      	ldr	r3, [r3, #32]
 800508c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	4a6a      	ldr	r2, [pc, #424]	@ (8005240 <HAL_I2C_Init+0x274>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d802      	bhi.n	80050a0 <HAL_I2C_Init+0xd4>
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	3301      	adds	r3, #1
 800509e:	e009      	b.n	80050b4 <HAL_I2C_Init+0xe8>
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80050a6:	fb02 f303 	mul.w	r3, r2, r3
 80050aa:	4a69      	ldr	r2, [pc, #420]	@ (8005250 <HAL_I2C_Init+0x284>)
 80050ac:	fba2 2303 	umull	r2, r3, r2, r3
 80050b0:	099b      	lsrs	r3, r3, #6
 80050b2:	3301      	adds	r3, #1
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	6812      	ldr	r2, [r2, #0]
 80050b8:	430b      	orrs	r3, r1
 80050ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	69db      	ldr	r3, [r3, #28]
 80050c2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80050c6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	495c      	ldr	r1, [pc, #368]	@ (8005240 <HAL_I2C_Init+0x274>)
 80050d0:	428b      	cmp	r3, r1
 80050d2:	d819      	bhi.n	8005108 <HAL_I2C_Init+0x13c>
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	1e59      	subs	r1, r3, #1
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	005b      	lsls	r3, r3, #1
 80050de:	fbb1 f3f3 	udiv	r3, r1, r3
 80050e2:	1c59      	adds	r1, r3, #1
 80050e4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80050e8:	400b      	ands	r3, r1
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d00a      	beq.n	8005104 <HAL_I2C_Init+0x138>
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	1e59      	subs	r1, r3, #1
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	005b      	lsls	r3, r3, #1
 80050f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80050fc:	3301      	adds	r3, #1
 80050fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005102:	e051      	b.n	80051a8 <HAL_I2C_Init+0x1dc>
 8005104:	2304      	movs	r3, #4
 8005106:	e04f      	b.n	80051a8 <HAL_I2C_Init+0x1dc>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d111      	bne.n	8005134 <HAL_I2C_Init+0x168>
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	1e58      	subs	r0, r3, #1
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6859      	ldr	r1, [r3, #4]
 8005118:	460b      	mov	r3, r1
 800511a:	005b      	lsls	r3, r3, #1
 800511c:	440b      	add	r3, r1
 800511e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005122:	3301      	adds	r3, #1
 8005124:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005128:	2b00      	cmp	r3, #0
 800512a:	bf0c      	ite	eq
 800512c:	2301      	moveq	r3, #1
 800512e:	2300      	movne	r3, #0
 8005130:	b2db      	uxtb	r3, r3
 8005132:	e012      	b.n	800515a <HAL_I2C_Init+0x18e>
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	1e58      	subs	r0, r3, #1
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6859      	ldr	r1, [r3, #4]
 800513c:	460b      	mov	r3, r1
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	440b      	add	r3, r1
 8005142:	0099      	lsls	r1, r3, #2
 8005144:	440b      	add	r3, r1
 8005146:	fbb0 f3f3 	udiv	r3, r0, r3
 800514a:	3301      	adds	r3, #1
 800514c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005150:	2b00      	cmp	r3, #0
 8005152:	bf0c      	ite	eq
 8005154:	2301      	moveq	r3, #1
 8005156:	2300      	movne	r3, #0
 8005158:	b2db      	uxtb	r3, r3
 800515a:	2b00      	cmp	r3, #0
 800515c:	d001      	beq.n	8005162 <HAL_I2C_Init+0x196>
 800515e:	2301      	movs	r3, #1
 8005160:	e022      	b.n	80051a8 <HAL_I2C_Init+0x1dc>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d10e      	bne.n	8005188 <HAL_I2C_Init+0x1bc>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	1e58      	subs	r0, r3, #1
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6859      	ldr	r1, [r3, #4]
 8005172:	460b      	mov	r3, r1
 8005174:	005b      	lsls	r3, r3, #1
 8005176:	440b      	add	r3, r1
 8005178:	fbb0 f3f3 	udiv	r3, r0, r3
 800517c:	3301      	adds	r3, #1
 800517e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005182:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005186:	e00f      	b.n	80051a8 <HAL_I2C_Init+0x1dc>
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	1e58      	subs	r0, r3, #1
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6859      	ldr	r1, [r3, #4]
 8005190:	460b      	mov	r3, r1
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	440b      	add	r3, r1
 8005196:	0099      	lsls	r1, r3, #2
 8005198:	440b      	add	r3, r1
 800519a:	fbb0 f3f3 	udiv	r3, r0, r3
 800519e:	3301      	adds	r3, #1
 80051a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80051a8:	6879      	ldr	r1, [r7, #4]
 80051aa:	6809      	ldr	r1, [r1, #0]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	69da      	ldr	r2, [r3, #28]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	431a      	orrs	r2, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	430a      	orrs	r2, r1
 80051ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80051d6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	6911      	ldr	r1, [r2, #16]
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	68d2      	ldr	r2, [r2, #12]
 80051e2:	4311      	orrs	r1, r2
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	6812      	ldr	r2, [r2, #0]
 80051e8:	430b      	orrs	r3, r1
 80051ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	695a      	ldr	r2, [r3, #20]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	699b      	ldr	r3, [r3, #24]
 80051fe:	431a      	orrs	r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	430a      	orrs	r2, r1
 8005206:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f042 0201 	orr.w	r2, r2, #1
 8005216:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2220      	movs	r2, #32
 8005222:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	3710      	adds	r7, #16
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	000186a0 	.word	0x000186a0
 8005244:	001e847f 	.word	0x001e847f
 8005248:	003d08ff 	.word	0x003d08ff
 800524c:	431bde83 	.word	0x431bde83
 8005250:	10624dd3 	.word	0x10624dd3

08005254 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b088      	sub	sp, #32
 8005258:	af02      	add	r7, sp, #8
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	607a      	str	r2, [r7, #4]
 800525e:	461a      	mov	r2, r3
 8005260:	460b      	mov	r3, r1
 8005262:	817b      	strh	r3, [r7, #10]
 8005264:	4613      	mov	r3, r2
 8005266:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005268:	f7fe fb96 	bl	8003998 <HAL_GetTick>
 800526c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005274:	b2db      	uxtb	r3, r3
 8005276:	2b20      	cmp	r3, #32
 8005278:	f040 80e0 	bne.w	800543c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	9300      	str	r3, [sp, #0]
 8005280:	2319      	movs	r3, #25
 8005282:	2201      	movs	r2, #1
 8005284:	4970      	ldr	r1, [pc, #448]	@ (8005448 <HAL_I2C_Master_Transmit+0x1f4>)
 8005286:	68f8      	ldr	r0, [r7, #12]
 8005288:	f000 f964 	bl	8005554 <I2C_WaitOnFlagUntilTimeout>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d001      	beq.n	8005296 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005292:	2302      	movs	r3, #2
 8005294:	e0d3      	b.n	800543e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800529c:	2b01      	cmp	r3, #1
 800529e:	d101      	bne.n	80052a4 <HAL_I2C_Master_Transmit+0x50>
 80052a0:	2302      	movs	r3, #2
 80052a2:	e0cc      	b.n	800543e <HAL_I2C_Master_Transmit+0x1ea>
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 0301 	and.w	r3, r3, #1
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d007      	beq.n	80052ca <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f042 0201 	orr.w	r2, r2, #1
 80052c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80052d8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2221      	movs	r2, #33	@ 0x21
 80052de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2210      	movs	r2, #16
 80052e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2200      	movs	r2, #0
 80052ee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	893a      	ldrh	r2, [r7, #8]
 80052fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005300:	b29a      	uxth	r2, r3
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	4a50      	ldr	r2, [pc, #320]	@ (800544c <HAL_I2C_Master_Transmit+0x1f8>)
 800530a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800530c:	8979      	ldrh	r1, [r7, #10]
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	6a3a      	ldr	r2, [r7, #32]
 8005312:	68f8      	ldr	r0, [r7, #12]
 8005314:	f000 f89c 	bl	8005450 <I2C_MasterRequestWrite>
 8005318:	4603      	mov	r3, r0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d001      	beq.n	8005322 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e08d      	b.n	800543e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005322:	2300      	movs	r3, #0
 8005324:	613b      	str	r3, [r7, #16]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	695b      	ldr	r3, [r3, #20]
 800532c:	613b      	str	r3, [r7, #16]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	699b      	ldr	r3, [r3, #24]
 8005334:	613b      	str	r3, [r7, #16]
 8005336:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005338:	e066      	b.n	8005408 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800533a:	697a      	ldr	r2, [r7, #20]
 800533c:	6a39      	ldr	r1, [r7, #32]
 800533e:	68f8      	ldr	r0, [r7, #12]
 8005340:	f000 fa22 	bl	8005788 <I2C_WaitOnTXEFlagUntilTimeout>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d00d      	beq.n	8005366 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800534e:	2b04      	cmp	r3, #4
 8005350:	d107      	bne.n	8005362 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005360:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e06b      	b.n	800543e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800536a:	781a      	ldrb	r2, [r3, #0]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005376:	1c5a      	adds	r2, r3, #1
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005380:	b29b      	uxth	r3, r3
 8005382:	3b01      	subs	r3, #1
 8005384:	b29a      	uxth	r2, r3
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800538e:	3b01      	subs	r3, #1
 8005390:	b29a      	uxth	r2, r3
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	695b      	ldr	r3, [r3, #20]
 800539c:	f003 0304 	and.w	r3, r3, #4
 80053a0:	2b04      	cmp	r3, #4
 80053a2:	d11b      	bne.n	80053dc <HAL_I2C_Master_Transmit+0x188>
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d017      	beq.n	80053dc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b0:	781a      	ldrb	r2, [r3, #0]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053bc:	1c5a      	adds	r2, r3, #1
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	3b01      	subs	r3, #1
 80053ca:	b29a      	uxth	r2, r3
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053d4:	3b01      	subs	r3, #1
 80053d6:	b29a      	uxth	r2, r3
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053dc:	697a      	ldr	r2, [r7, #20]
 80053de:	6a39      	ldr	r1, [r7, #32]
 80053e0:	68f8      	ldr	r0, [r7, #12]
 80053e2:	f000 fa19 	bl	8005818 <I2C_WaitOnBTFFlagUntilTimeout>
 80053e6:	4603      	mov	r3, r0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d00d      	beq.n	8005408 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053f0:	2b04      	cmp	r3, #4
 80053f2:	d107      	bne.n	8005404 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005402:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e01a      	b.n	800543e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800540c:	2b00      	cmp	r3, #0
 800540e:	d194      	bne.n	800533a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800541e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2220      	movs	r2, #32
 8005424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005438:	2300      	movs	r3, #0
 800543a:	e000      	b.n	800543e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800543c:	2302      	movs	r3, #2
  }
}
 800543e:	4618      	mov	r0, r3
 8005440:	3718      	adds	r7, #24
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	00100002 	.word	0x00100002
 800544c:	ffff0000 	.word	0xffff0000

08005450 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b088      	sub	sp, #32
 8005454:	af02      	add	r7, sp, #8
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	607a      	str	r2, [r7, #4]
 800545a:	603b      	str	r3, [r7, #0]
 800545c:	460b      	mov	r3, r1
 800545e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005464:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	2b08      	cmp	r3, #8
 800546a:	d006      	beq.n	800547a <I2C_MasterRequestWrite+0x2a>
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	2b01      	cmp	r3, #1
 8005470:	d003      	beq.n	800547a <I2C_MasterRequestWrite+0x2a>
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005478:	d108      	bne.n	800548c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005488:	601a      	str	r2, [r3, #0]
 800548a:	e00b      	b.n	80054a4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005490:	2b12      	cmp	r3, #18
 8005492:	d107      	bne.n	80054a4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80054a2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	9300      	str	r3, [sp, #0]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80054b0:	68f8      	ldr	r0, [r7, #12]
 80054b2:	f000 f84f 	bl	8005554 <I2C_WaitOnFlagUntilTimeout>
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d00d      	beq.n	80054d8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054ca:	d103      	bne.n	80054d4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80054d2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80054d4:	2303      	movs	r3, #3
 80054d6:	e035      	b.n	8005544 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	691b      	ldr	r3, [r3, #16]
 80054dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80054e0:	d108      	bne.n	80054f4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80054e2:	897b      	ldrh	r3, [r7, #10]
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	461a      	mov	r2, r3
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80054f0:	611a      	str	r2, [r3, #16]
 80054f2:	e01b      	b.n	800552c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80054f4:	897b      	ldrh	r3, [r7, #10]
 80054f6:	11db      	asrs	r3, r3, #7
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	f003 0306 	and.w	r3, r3, #6
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	f063 030f 	orn	r3, r3, #15
 8005504:	b2da      	uxtb	r2, r3
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	490e      	ldr	r1, [pc, #56]	@ (800554c <I2C_MasterRequestWrite+0xfc>)
 8005512:	68f8      	ldr	r0, [r7, #12]
 8005514:	f000 f898 	bl	8005648 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d001      	beq.n	8005522 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e010      	b.n	8005544 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005522:	897b      	ldrh	r3, [r7, #10]
 8005524:	b2da      	uxtb	r2, r3
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	4907      	ldr	r1, [pc, #28]	@ (8005550 <I2C_MasterRequestWrite+0x100>)
 8005532:	68f8      	ldr	r0, [r7, #12]
 8005534:	f000 f888 	bl	8005648 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d001      	beq.n	8005542 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e000      	b.n	8005544 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	3718      	adds	r7, #24
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}
 800554c:	00010008 	.word	0x00010008
 8005550:	00010002 	.word	0x00010002

08005554 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	603b      	str	r3, [r7, #0]
 8005560:	4613      	mov	r3, r2
 8005562:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005564:	e048      	b.n	80055f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800556c:	d044      	beq.n	80055f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800556e:	f7fe fa13 	bl	8003998 <HAL_GetTick>
 8005572:	4602      	mov	r2, r0
 8005574:	69bb      	ldr	r3, [r7, #24]
 8005576:	1ad3      	subs	r3, r2, r3
 8005578:	683a      	ldr	r2, [r7, #0]
 800557a:	429a      	cmp	r2, r3
 800557c:	d302      	bcc.n	8005584 <I2C_WaitOnFlagUntilTimeout+0x30>
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d139      	bne.n	80055f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	0c1b      	lsrs	r3, r3, #16
 8005588:	b2db      	uxtb	r3, r3
 800558a:	2b01      	cmp	r3, #1
 800558c:	d10d      	bne.n	80055aa <I2C_WaitOnFlagUntilTimeout+0x56>
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	695b      	ldr	r3, [r3, #20]
 8005594:	43da      	mvns	r2, r3
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	4013      	ands	r3, r2
 800559a:	b29b      	uxth	r3, r3
 800559c:	2b00      	cmp	r3, #0
 800559e:	bf0c      	ite	eq
 80055a0:	2301      	moveq	r3, #1
 80055a2:	2300      	movne	r3, #0
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	461a      	mov	r2, r3
 80055a8:	e00c      	b.n	80055c4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	699b      	ldr	r3, [r3, #24]
 80055b0:	43da      	mvns	r2, r3
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	4013      	ands	r3, r2
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	bf0c      	ite	eq
 80055bc:	2301      	moveq	r3, #1
 80055be:	2300      	movne	r3, #0
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	461a      	mov	r2, r3
 80055c4:	79fb      	ldrb	r3, [r7, #7]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d116      	bne.n	80055f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2200      	movs	r2, #0
 80055ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2220      	movs	r2, #32
 80055d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055e4:	f043 0220 	orr.w	r2, r3, #32
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2200      	movs	r2, #0
 80055f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e023      	b.n	8005640 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	0c1b      	lsrs	r3, r3, #16
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d10d      	bne.n	800561e <I2C_WaitOnFlagUntilTimeout+0xca>
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	695b      	ldr	r3, [r3, #20]
 8005608:	43da      	mvns	r2, r3
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	4013      	ands	r3, r2
 800560e:	b29b      	uxth	r3, r3
 8005610:	2b00      	cmp	r3, #0
 8005612:	bf0c      	ite	eq
 8005614:	2301      	moveq	r3, #1
 8005616:	2300      	movne	r3, #0
 8005618:	b2db      	uxtb	r3, r3
 800561a:	461a      	mov	r2, r3
 800561c:	e00c      	b.n	8005638 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	699b      	ldr	r3, [r3, #24]
 8005624:	43da      	mvns	r2, r3
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	4013      	ands	r3, r2
 800562a:	b29b      	uxth	r3, r3
 800562c:	2b00      	cmp	r3, #0
 800562e:	bf0c      	ite	eq
 8005630:	2301      	moveq	r3, #1
 8005632:	2300      	movne	r3, #0
 8005634:	b2db      	uxtb	r3, r3
 8005636:	461a      	mov	r2, r3
 8005638:	79fb      	ldrb	r3, [r7, #7]
 800563a:	429a      	cmp	r2, r3
 800563c:	d093      	beq.n	8005566 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800563e:	2300      	movs	r3, #0
}
 8005640:	4618      	mov	r0, r3
 8005642:	3710      	adds	r7, #16
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}

08005648 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b084      	sub	sp, #16
 800564c:	af00      	add	r7, sp, #0
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	607a      	str	r2, [r7, #4]
 8005654:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005656:	e071      	b.n	800573c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	695b      	ldr	r3, [r3, #20]
 800565e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005662:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005666:	d123      	bne.n	80056b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005676:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005680:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2200      	movs	r2, #0
 8005686:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2220      	movs	r2, #32
 800568c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2200      	movs	r2, #0
 8005694:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800569c:	f043 0204 	orr.w	r2, r3, #4
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e067      	b.n	8005780 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056b6:	d041      	beq.n	800573c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056b8:	f7fe f96e 	bl	8003998 <HAL_GetTick>
 80056bc:	4602      	mov	r2, r0
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d302      	bcc.n	80056ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d136      	bne.n	800573c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	0c1b      	lsrs	r3, r3, #16
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d10c      	bne.n	80056f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	43da      	mvns	r2, r3
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	4013      	ands	r3, r2
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	bf14      	ite	ne
 80056ea:	2301      	movne	r3, #1
 80056ec:	2300      	moveq	r3, #0
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	e00b      	b.n	800570a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	699b      	ldr	r3, [r3, #24]
 80056f8:	43da      	mvns	r2, r3
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	4013      	ands	r3, r2
 80056fe:	b29b      	uxth	r3, r3
 8005700:	2b00      	cmp	r3, #0
 8005702:	bf14      	ite	ne
 8005704:	2301      	movne	r3, #1
 8005706:	2300      	moveq	r3, #0
 8005708:	b2db      	uxtb	r3, r3
 800570a:	2b00      	cmp	r3, #0
 800570c:	d016      	beq.n	800573c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2200      	movs	r2, #0
 8005712:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2220      	movs	r2, #32
 8005718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2200      	movs	r2, #0
 8005720:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005728:	f043 0220 	orr.w	r2, r3, #32
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2200      	movs	r2, #0
 8005734:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e021      	b.n	8005780 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	0c1b      	lsrs	r3, r3, #16
 8005740:	b2db      	uxtb	r3, r3
 8005742:	2b01      	cmp	r3, #1
 8005744:	d10c      	bne.n	8005760 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	695b      	ldr	r3, [r3, #20]
 800574c:	43da      	mvns	r2, r3
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	4013      	ands	r3, r2
 8005752:	b29b      	uxth	r3, r3
 8005754:	2b00      	cmp	r3, #0
 8005756:	bf14      	ite	ne
 8005758:	2301      	movne	r3, #1
 800575a:	2300      	moveq	r3, #0
 800575c:	b2db      	uxtb	r3, r3
 800575e:	e00b      	b.n	8005778 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	699b      	ldr	r3, [r3, #24]
 8005766:	43da      	mvns	r2, r3
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	4013      	ands	r3, r2
 800576c:	b29b      	uxth	r3, r3
 800576e:	2b00      	cmp	r3, #0
 8005770:	bf14      	ite	ne
 8005772:	2301      	movne	r3, #1
 8005774:	2300      	moveq	r3, #0
 8005776:	b2db      	uxtb	r3, r3
 8005778:	2b00      	cmp	r3, #0
 800577a:	f47f af6d 	bne.w	8005658 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	3710      	adds	r7, #16
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}

08005788 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	60f8      	str	r0, [r7, #12]
 8005790:	60b9      	str	r1, [r7, #8]
 8005792:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005794:	e034      	b.n	8005800 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005796:	68f8      	ldr	r0, [r7, #12]
 8005798:	f000 f886 	bl	80058a8 <I2C_IsAcknowledgeFailed>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d001      	beq.n	80057a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e034      	b.n	8005810 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ac:	d028      	beq.n	8005800 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057ae:	f7fe f8f3 	bl	8003998 <HAL_GetTick>
 80057b2:	4602      	mov	r2, r0
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	68ba      	ldr	r2, [r7, #8]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d302      	bcc.n	80057c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d11d      	bne.n	8005800 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	695b      	ldr	r3, [r3, #20]
 80057ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057ce:	2b80      	cmp	r3, #128	@ 0x80
 80057d0:	d016      	beq.n	8005800 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2200      	movs	r2, #0
 80057d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2220      	movs	r2, #32
 80057dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ec:	f043 0220 	orr.w	r2, r3, #32
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e007      	b.n	8005810 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	695b      	ldr	r3, [r3, #20]
 8005806:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800580a:	2b80      	cmp	r3, #128	@ 0x80
 800580c:	d1c3      	bne.n	8005796 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800580e:	2300      	movs	r3, #0
}
 8005810:	4618      	mov	r0, r3
 8005812:	3710      	adds	r7, #16
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}

08005818 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b084      	sub	sp, #16
 800581c:	af00      	add	r7, sp, #0
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	60b9      	str	r1, [r7, #8]
 8005822:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005824:	e034      	b.n	8005890 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005826:	68f8      	ldr	r0, [r7, #12]
 8005828:	f000 f83e 	bl	80058a8 <I2C_IsAcknowledgeFailed>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d001      	beq.n	8005836 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e034      	b.n	80058a0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800583c:	d028      	beq.n	8005890 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800583e:	f7fe f8ab 	bl	8003998 <HAL_GetTick>
 8005842:	4602      	mov	r2, r0
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	68ba      	ldr	r2, [r7, #8]
 800584a:	429a      	cmp	r2, r3
 800584c:	d302      	bcc.n	8005854 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d11d      	bne.n	8005890 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	695b      	ldr	r3, [r3, #20]
 800585a:	f003 0304 	and.w	r3, r3, #4
 800585e:	2b04      	cmp	r3, #4
 8005860:	d016      	beq.n	8005890 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2200      	movs	r2, #0
 8005866:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2220      	movs	r2, #32
 800586c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800587c:	f043 0220 	orr.w	r2, r3, #32
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2200      	movs	r2, #0
 8005888:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	e007      	b.n	80058a0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	695b      	ldr	r3, [r3, #20]
 8005896:	f003 0304 	and.w	r3, r3, #4
 800589a:	2b04      	cmp	r3, #4
 800589c:	d1c3      	bne.n	8005826 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3710      	adds	r7, #16
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	695b      	ldr	r3, [r3, #20]
 80058b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058be:	d11b      	bne.n	80058f8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80058c8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2220      	movs	r2, #32
 80058d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058e4:	f043 0204 	orr.w	r2, r3, #4
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e000      	b.n	80058fa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	370c      	adds	r7, #12
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr
	...

08005908 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b086      	sub	sp, #24
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d101      	bne.n	800591a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e267      	b.n	8005dea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 0301 	and.w	r3, r3, #1
 8005922:	2b00      	cmp	r3, #0
 8005924:	d075      	beq.n	8005a12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005926:	4b88      	ldr	r3, [pc, #544]	@ (8005b48 <HAL_RCC_OscConfig+0x240>)
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	f003 030c 	and.w	r3, r3, #12
 800592e:	2b04      	cmp	r3, #4
 8005930:	d00c      	beq.n	800594c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005932:	4b85      	ldr	r3, [pc, #532]	@ (8005b48 <HAL_RCC_OscConfig+0x240>)
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800593a:	2b08      	cmp	r3, #8
 800593c:	d112      	bne.n	8005964 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800593e:	4b82      	ldr	r3, [pc, #520]	@ (8005b48 <HAL_RCC_OscConfig+0x240>)
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005946:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800594a:	d10b      	bne.n	8005964 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800594c:	4b7e      	ldr	r3, [pc, #504]	@ (8005b48 <HAL_RCC_OscConfig+0x240>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005954:	2b00      	cmp	r3, #0
 8005956:	d05b      	beq.n	8005a10 <HAL_RCC_OscConfig+0x108>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d157      	bne.n	8005a10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	e242      	b.n	8005dea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800596c:	d106      	bne.n	800597c <HAL_RCC_OscConfig+0x74>
 800596e:	4b76      	ldr	r3, [pc, #472]	@ (8005b48 <HAL_RCC_OscConfig+0x240>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a75      	ldr	r2, [pc, #468]	@ (8005b48 <HAL_RCC_OscConfig+0x240>)
 8005974:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005978:	6013      	str	r3, [r2, #0]
 800597a:	e01d      	b.n	80059b8 <HAL_RCC_OscConfig+0xb0>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005984:	d10c      	bne.n	80059a0 <HAL_RCC_OscConfig+0x98>
 8005986:	4b70      	ldr	r3, [pc, #448]	@ (8005b48 <HAL_RCC_OscConfig+0x240>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a6f      	ldr	r2, [pc, #444]	@ (8005b48 <HAL_RCC_OscConfig+0x240>)
 800598c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005990:	6013      	str	r3, [r2, #0]
 8005992:	4b6d      	ldr	r3, [pc, #436]	@ (8005b48 <HAL_RCC_OscConfig+0x240>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a6c      	ldr	r2, [pc, #432]	@ (8005b48 <HAL_RCC_OscConfig+0x240>)
 8005998:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800599c:	6013      	str	r3, [r2, #0]
 800599e:	e00b      	b.n	80059b8 <HAL_RCC_OscConfig+0xb0>
 80059a0:	4b69      	ldr	r3, [pc, #420]	@ (8005b48 <HAL_RCC_OscConfig+0x240>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a68      	ldr	r2, [pc, #416]	@ (8005b48 <HAL_RCC_OscConfig+0x240>)
 80059a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059aa:	6013      	str	r3, [r2, #0]
 80059ac:	4b66      	ldr	r3, [pc, #408]	@ (8005b48 <HAL_RCC_OscConfig+0x240>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a65      	ldr	r2, [pc, #404]	@ (8005b48 <HAL_RCC_OscConfig+0x240>)
 80059b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80059b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d013      	beq.n	80059e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059c0:	f7fd ffea 	bl	8003998 <HAL_GetTick>
 80059c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059c6:	e008      	b.n	80059da <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059c8:	f7fd ffe6 	bl	8003998 <HAL_GetTick>
 80059cc:	4602      	mov	r2, r0
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	2b64      	cmp	r3, #100	@ 0x64
 80059d4:	d901      	bls.n	80059da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e207      	b.n	8005dea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059da:	4b5b      	ldr	r3, [pc, #364]	@ (8005b48 <HAL_RCC_OscConfig+0x240>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d0f0      	beq.n	80059c8 <HAL_RCC_OscConfig+0xc0>
 80059e6:	e014      	b.n	8005a12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059e8:	f7fd ffd6 	bl	8003998 <HAL_GetTick>
 80059ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059ee:	e008      	b.n	8005a02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059f0:	f7fd ffd2 	bl	8003998 <HAL_GetTick>
 80059f4:	4602      	mov	r2, r0
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	2b64      	cmp	r3, #100	@ 0x64
 80059fc:	d901      	bls.n	8005a02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80059fe:	2303      	movs	r3, #3
 8005a00:	e1f3      	b.n	8005dea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a02:	4b51      	ldr	r3, [pc, #324]	@ (8005b48 <HAL_RCC_OscConfig+0x240>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d1f0      	bne.n	80059f0 <HAL_RCC_OscConfig+0xe8>
 8005a0e:	e000      	b.n	8005a12 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 0302 	and.w	r3, r3, #2
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d063      	beq.n	8005ae6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005a1e:	4b4a      	ldr	r3, [pc, #296]	@ (8005b48 <HAL_RCC_OscConfig+0x240>)
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	f003 030c 	and.w	r3, r3, #12
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00b      	beq.n	8005a42 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a2a:	4b47      	ldr	r3, [pc, #284]	@ (8005b48 <HAL_RCC_OscConfig+0x240>)
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005a32:	2b08      	cmp	r3, #8
 8005a34:	d11c      	bne.n	8005a70 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a36:	4b44      	ldr	r3, [pc, #272]	@ (8005b48 <HAL_RCC_OscConfig+0x240>)
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d116      	bne.n	8005a70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a42:	4b41      	ldr	r3, [pc, #260]	@ (8005b48 <HAL_RCC_OscConfig+0x240>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 0302 	and.w	r3, r3, #2
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d005      	beq.n	8005a5a <HAL_RCC_OscConfig+0x152>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d001      	beq.n	8005a5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e1c7      	b.n	8005dea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a5a:	4b3b      	ldr	r3, [pc, #236]	@ (8005b48 <HAL_RCC_OscConfig+0x240>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	00db      	lsls	r3, r3, #3
 8005a68:	4937      	ldr	r1, [pc, #220]	@ (8005b48 <HAL_RCC_OscConfig+0x240>)
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a6e:	e03a      	b.n	8005ae6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d020      	beq.n	8005aba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a78:	4b34      	ldr	r3, [pc, #208]	@ (8005b4c <HAL_RCC_OscConfig+0x244>)
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a7e:	f7fd ff8b 	bl	8003998 <HAL_GetTick>
 8005a82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a84:	e008      	b.n	8005a98 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a86:	f7fd ff87 	bl	8003998 <HAL_GetTick>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	1ad3      	subs	r3, r2, r3
 8005a90:	2b02      	cmp	r3, #2
 8005a92:	d901      	bls.n	8005a98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005a94:	2303      	movs	r3, #3
 8005a96:	e1a8      	b.n	8005dea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a98:	4b2b      	ldr	r3, [pc, #172]	@ (8005b48 <HAL_RCC_OscConfig+0x240>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 0302 	and.w	r3, r3, #2
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d0f0      	beq.n	8005a86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005aa4:	4b28      	ldr	r3, [pc, #160]	@ (8005b48 <HAL_RCC_OscConfig+0x240>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	00db      	lsls	r3, r3, #3
 8005ab2:	4925      	ldr	r1, [pc, #148]	@ (8005b48 <HAL_RCC_OscConfig+0x240>)
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	600b      	str	r3, [r1, #0]
 8005ab8:	e015      	b.n	8005ae6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005aba:	4b24      	ldr	r3, [pc, #144]	@ (8005b4c <HAL_RCC_OscConfig+0x244>)
 8005abc:	2200      	movs	r2, #0
 8005abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ac0:	f7fd ff6a 	bl	8003998 <HAL_GetTick>
 8005ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ac6:	e008      	b.n	8005ada <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ac8:	f7fd ff66 	bl	8003998 <HAL_GetTick>
 8005acc:	4602      	mov	r2, r0
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	1ad3      	subs	r3, r2, r3
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d901      	bls.n	8005ada <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005ad6:	2303      	movs	r3, #3
 8005ad8:	e187      	b.n	8005dea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ada:	4b1b      	ldr	r3, [pc, #108]	@ (8005b48 <HAL_RCC_OscConfig+0x240>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 0302 	and.w	r3, r3, #2
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d1f0      	bne.n	8005ac8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 0308 	and.w	r3, r3, #8
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d036      	beq.n	8005b60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	695b      	ldr	r3, [r3, #20]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d016      	beq.n	8005b28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005afa:	4b15      	ldr	r3, [pc, #84]	@ (8005b50 <HAL_RCC_OscConfig+0x248>)
 8005afc:	2201      	movs	r2, #1
 8005afe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b00:	f7fd ff4a 	bl	8003998 <HAL_GetTick>
 8005b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b06:	e008      	b.n	8005b1a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b08:	f7fd ff46 	bl	8003998 <HAL_GetTick>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	2b02      	cmp	r3, #2
 8005b14:	d901      	bls.n	8005b1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005b16:	2303      	movs	r3, #3
 8005b18:	e167      	b.n	8005dea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8005b48 <HAL_RCC_OscConfig+0x240>)
 8005b1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b1e:	f003 0302 	and.w	r3, r3, #2
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d0f0      	beq.n	8005b08 <HAL_RCC_OscConfig+0x200>
 8005b26:	e01b      	b.n	8005b60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b28:	4b09      	ldr	r3, [pc, #36]	@ (8005b50 <HAL_RCC_OscConfig+0x248>)
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b2e:	f7fd ff33 	bl	8003998 <HAL_GetTick>
 8005b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b34:	e00e      	b.n	8005b54 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b36:	f7fd ff2f 	bl	8003998 <HAL_GetTick>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	1ad3      	subs	r3, r2, r3
 8005b40:	2b02      	cmp	r3, #2
 8005b42:	d907      	bls.n	8005b54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005b44:	2303      	movs	r3, #3
 8005b46:	e150      	b.n	8005dea <HAL_RCC_OscConfig+0x4e2>
 8005b48:	40023800 	.word	0x40023800
 8005b4c:	42470000 	.word	0x42470000
 8005b50:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b54:	4b88      	ldr	r3, [pc, #544]	@ (8005d78 <HAL_RCC_OscConfig+0x470>)
 8005b56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b58:	f003 0302 	and.w	r3, r3, #2
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d1ea      	bne.n	8005b36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 0304 	and.w	r3, r3, #4
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	f000 8097 	beq.w	8005c9c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b72:	4b81      	ldr	r3, [pc, #516]	@ (8005d78 <HAL_RCC_OscConfig+0x470>)
 8005b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d10f      	bne.n	8005b9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b7e:	2300      	movs	r3, #0
 8005b80:	60bb      	str	r3, [r7, #8]
 8005b82:	4b7d      	ldr	r3, [pc, #500]	@ (8005d78 <HAL_RCC_OscConfig+0x470>)
 8005b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b86:	4a7c      	ldr	r2, [pc, #496]	@ (8005d78 <HAL_RCC_OscConfig+0x470>)
 8005b88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005b8e:	4b7a      	ldr	r3, [pc, #488]	@ (8005d78 <HAL_RCC_OscConfig+0x470>)
 8005b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b96:	60bb      	str	r3, [r7, #8]
 8005b98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b9e:	4b77      	ldr	r3, [pc, #476]	@ (8005d7c <HAL_RCC_OscConfig+0x474>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d118      	bne.n	8005bdc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005baa:	4b74      	ldr	r3, [pc, #464]	@ (8005d7c <HAL_RCC_OscConfig+0x474>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a73      	ldr	r2, [pc, #460]	@ (8005d7c <HAL_RCC_OscConfig+0x474>)
 8005bb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bb6:	f7fd feef 	bl	8003998 <HAL_GetTick>
 8005bba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bbc:	e008      	b.n	8005bd0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bbe:	f7fd feeb 	bl	8003998 <HAL_GetTick>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	1ad3      	subs	r3, r2, r3
 8005bc8:	2b02      	cmp	r3, #2
 8005bca:	d901      	bls.n	8005bd0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005bcc:	2303      	movs	r3, #3
 8005bce:	e10c      	b.n	8005dea <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bd0:	4b6a      	ldr	r3, [pc, #424]	@ (8005d7c <HAL_RCC_OscConfig+0x474>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d0f0      	beq.n	8005bbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d106      	bne.n	8005bf2 <HAL_RCC_OscConfig+0x2ea>
 8005be4:	4b64      	ldr	r3, [pc, #400]	@ (8005d78 <HAL_RCC_OscConfig+0x470>)
 8005be6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005be8:	4a63      	ldr	r2, [pc, #396]	@ (8005d78 <HAL_RCC_OscConfig+0x470>)
 8005bea:	f043 0301 	orr.w	r3, r3, #1
 8005bee:	6713      	str	r3, [r2, #112]	@ 0x70
 8005bf0:	e01c      	b.n	8005c2c <HAL_RCC_OscConfig+0x324>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	2b05      	cmp	r3, #5
 8005bf8:	d10c      	bne.n	8005c14 <HAL_RCC_OscConfig+0x30c>
 8005bfa:	4b5f      	ldr	r3, [pc, #380]	@ (8005d78 <HAL_RCC_OscConfig+0x470>)
 8005bfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bfe:	4a5e      	ldr	r2, [pc, #376]	@ (8005d78 <HAL_RCC_OscConfig+0x470>)
 8005c00:	f043 0304 	orr.w	r3, r3, #4
 8005c04:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c06:	4b5c      	ldr	r3, [pc, #368]	@ (8005d78 <HAL_RCC_OscConfig+0x470>)
 8005c08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c0a:	4a5b      	ldr	r2, [pc, #364]	@ (8005d78 <HAL_RCC_OscConfig+0x470>)
 8005c0c:	f043 0301 	orr.w	r3, r3, #1
 8005c10:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c12:	e00b      	b.n	8005c2c <HAL_RCC_OscConfig+0x324>
 8005c14:	4b58      	ldr	r3, [pc, #352]	@ (8005d78 <HAL_RCC_OscConfig+0x470>)
 8005c16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c18:	4a57      	ldr	r2, [pc, #348]	@ (8005d78 <HAL_RCC_OscConfig+0x470>)
 8005c1a:	f023 0301 	bic.w	r3, r3, #1
 8005c1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c20:	4b55      	ldr	r3, [pc, #340]	@ (8005d78 <HAL_RCC_OscConfig+0x470>)
 8005c22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c24:	4a54      	ldr	r2, [pc, #336]	@ (8005d78 <HAL_RCC_OscConfig+0x470>)
 8005c26:	f023 0304 	bic.w	r3, r3, #4
 8005c2a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d015      	beq.n	8005c60 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c34:	f7fd feb0 	bl	8003998 <HAL_GetTick>
 8005c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c3a:	e00a      	b.n	8005c52 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c3c:	f7fd feac 	bl	8003998 <HAL_GetTick>
 8005c40:	4602      	mov	r2, r0
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	1ad3      	subs	r3, r2, r3
 8005c46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d901      	bls.n	8005c52 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005c4e:	2303      	movs	r3, #3
 8005c50:	e0cb      	b.n	8005dea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c52:	4b49      	ldr	r3, [pc, #292]	@ (8005d78 <HAL_RCC_OscConfig+0x470>)
 8005c54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c56:	f003 0302 	and.w	r3, r3, #2
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d0ee      	beq.n	8005c3c <HAL_RCC_OscConfig+0x334>
 8005c5e:	e014      	b.n	8005c8a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c60:	f7fd fe9a 	bl	8003998 <HAL_GetTick>
 8005c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c66:	e00a      	b.n	8005c7e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c68:	f7fd fe96 	bl	8003998 <HAL_GetTick>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	1ad3      	subs	r3, r2, r3
 8005c72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d901      	bls.n	8005c7e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005c7a:	2303      	movs	r3, #3
 8005c7c:	e0b5      	b.n	8005dea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c7e:	4b3e      	ldr	r3, [pc, #248]	@ (8005d78 <HAL_RCC_OscConfig+0x470>)
 8005c80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c82:	f003 0302 	and.w	r3, r3, #2
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d1ee      	bne.n	8005c68 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005c8a:	7dfb      	ldrb	r3, [r7, #23]
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d105      	bne.n	8005c9c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c90:	4b39      	ldr	r3, [pc, #228]	@ (8005d78 <HAL_RCC_OscConfig+0x470>)
 8005c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c94:	4a38      	ldr	r2, [pc, #224]	@ (8005d78 <HAL_RCC_OscConfig+0x470>)
 8005c96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c9a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	699b      	ldr	r3, [r3, #24]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	f000 80a1 	beq.w	8005de8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005ca6:	4b34      	ldr	r3, [pc, #208]	@ (8005d78 <HAL_RCC_OscConfig+0x470>)
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	f003 030c 	and.w	r3, r3, #12
 8005cae:	2b08      	cmp	r3, #8
 8005cb0:	d05c      	beq.n	8005d6c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	699b      	ldr	r3, [r3, #24]
 8005cb6:	2b02      	cmp	r3, #2
 8005cb8:	d141      	bne.n	8005d3e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cba:	4b31      	ldr	r3, [pc, #196]	@ (8005d80 <HAL_RCC_OscConfig+0x478>)
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cc0:	f7fd fe6a 	bl	8003998 <HAL_GetTick>
 8005cc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cc6:	e008      	b.n	8005cda <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cc8:	f7fd fe66 	bl	8003998 <HAL_GetTick>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	1ad3      	subs	r3, r2, r3
 8005cd2:	2b02      	cmp	r3, #2
 8005cd4:	d901      	bls.n	8005cda <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005cd6:	2303      	movs	r3, #3
 8005cd8:	e087      	b.n	8005dea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cda:	4b27      	ldr	r3, [pc, #156]	@ (8005d78 <HAL_RCC_OscConfig+0x470>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d1f0      	bne.n	8005cc8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	69da      	ldr	r2, [r3, #28]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a1b      	ldr	r3, [r3, #32]
 8005cee:	431a      	orrs	r2, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cf4:	019b      	lsls	r3, r3, #6
 8005cf6:	431a      	orrs	r2, r3
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cfc:	085b      	lsrs	r3, r3, #1
 8005cfe:	3b01      	subs	r3, #1
 8005d00:	041b      	lsls	r3, r3, #16
 8005d02:	431a      	orrs	r2, r3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d08:	061b      	lsls	r3, r3, #24
 8005d0a:	491b      	ldr	r1, [pc, #108]	@ (8005d78 <HAL_RCC_OscConfig+0x470>)
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d10:	4b1b      	ldr	r3, [pc, #108]	@ (8005d80 <HAL_RCC_OscConfig+0x478>)
 8005d12:	2201      	movs	r2, #1
 8005d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d16:	f7fd fe3f 	bl	8003998 <HAL_GetTick>
 8005d1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d1c:	e008      	b.n	8005d30 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d1e:	f7fd fe3b 	bl	8003998 <HAL_GetTick>
 8005d22:	4602      	mov	r2, r0
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	1ad3      	subs	r3, r2, r3
 8005d28:	2b02      	cmp	r3, #2
 8005d2a:	d901      	bls.n	8005d30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	e05c      	b.n	8005dea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d30:	4b11      	ldr	r3, [pc, #68]	@ (8005d78 <HAL_RCC_OscConfig+0x470>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d0f0      	beq.n	8005d1e <HAL_RCC_OscConfig+0x416>
 8005d3c:	e054      	b.n	8005de8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d3e:	4b10      	ldr	r3, [pc, #64]	@ (8005d80 <HAL_RCC_OscConfig+0x478>)
 8005d40:	2200      	movs	r2, #0
 8005d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d44:	f7fd fe28 	bl	8003998 <HAL_GetTick>
 8005d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d4a:	e008      	b.n	8005d5e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d4c:	f7fd fe24 	bl	8003998 <HAL_GetTick>
 8005d50:	4602      	mov	r2, r0
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	1ad3      	subs	r3, r2, r3
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	d901      	bls.n	8005d5e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	e045      	b.n	8005dea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d5e:	4b06      	ldr	r3, [pc, #24]	@ (8005d78 <HAL_RCC_OscConfig+0x470>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d1f0      	bne.n	8005d4c <HAL_RCC_OscConfig+0x444>
 8005d6a:	e03d      	b.n	8005de8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	699b      	ldr	r3, [r3, #24]
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d107      	bne.n	8005d84 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	e038      	b.n	8005dea <HAL_RCC_OscConfig+0x4e2>
 8005d78:	40023800 	.word	0x40023800
 8005d7c:	40007000 	.word	0x40007000
 8005d80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005d84:	4b1b      	ldr	r3, [pc, #108]	@ (8005df4 <HAL_RCC_OscConfig+0x4ec>)
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	699b      	ldr	r3, [r3, #24]
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d028      	beq.n	8005de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d121      	bne.n	8005de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d11a      	bne.n	8005de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005db4:	4013      	ands	r3, r2
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005dba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d111      	bne.n	8005de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dca:	085b      	lsrs	r3, r3, #1
 8005dcc:	3b01      	subs	r3, #1
 8005dce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d107      	bne.n	8005de4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dde:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d001      	beq.n	8005de8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	e000      	b.n	8005dea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005de8:	2300      	movs	r3, #0
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3718      	adds	r7, #24
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
 8005df2:	bf00      	nop
 8005df4:	40023800 	.word	0x40023800

08005df8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d101      	bne.n	8005e0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	e0cc      	b.n	8005fa6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005e0c:	4b68      	ldr	r3, [pc, #416]	@ (8005fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 0307 	and.w	r3, r3, #7
 8005e14:	683a      	ldr	r2, [r7, #0]
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d90c      	bls.n	8005e34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e1a:	4b65      	ldr	r3, [pc, #404]	@ (8005fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8005e1c:	683a      	ldr	r2, [r7, #0]
 8005e1e:	b2d2      	uxtb	r2, r2
 8005e20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e22:	4b63      	ldr	r3, [pc, #396]	@ (8005fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f003 0307 	and.w	r3, r3, #7
 8005e2a:	683a      	ldr	r2, [r7, #0]
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d001      	beq.n	8005e34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	e0b8      	b.n	8005fa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 0302 	and.w	r3, r3, #2
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d020      	beq.n	8005e82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 0304 	and.w	r3, r3, #4
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d005      	beq.n	8005e58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e4c:	4b59      	ldr	r3, [pc, #356]	@ (8005fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	4a58      	ldr	r2, [pc, #352]	@ (8005fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e52:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005e56:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 0308 	and.w	r3, r3, #8
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d005      	beq.n	8005e70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e64:	4b53      	ldr	r3, [pc, #332]	@ (8005fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	4a52      	ldr	r2, [pc, #328]	@ (8005fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e6a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005e6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e70:	4b50      	ldr	r3, [pc, #320]	@ (8005fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	494d      	ldr	r1, [pc, #308]	@ (8005fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f003 0301 	and.w	r3, r3, #1
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d044      	beq.n	8005f18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d107      	bne.n	8005ea6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e96:	4b47      	ldr	r3, [pc, #284]	@ (8005fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d119      	bne.n	8005ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e07f      	b.n	8005fa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	2b02      	cmp	r3, #2
 8005eac:	d003      	beq.n	8005eb6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005eb2:	2b03      	cmp	r3, #3
 8005eb4:	d107      	bne.n	8005ec6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005eb6:	4b3f      	ldr	r3, [pc, #252]	@ (8005fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d109      	bne.n	8005ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e06f      	b.n	8005fa6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ec6:	4b3b      	ldr	r3, [pc, #236]	@ (8005fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 0302 	and.w	r3, r3, #2
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d101      	bne.n	8005ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e067      	b.n	8005fa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ed6:	4b37      	ldr	r3, [pc, #220]	@ (8005fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	f023 0203 	bic.w	r2, r3, #3
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	4934      	ldr	r1, [pc, #208]	@ (8005fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ee8:	f7fd fd56 	bl	8003998 <HAL_GetTick>
 8005eec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005eee:	e00a      	b.n	8005f06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ef0:	f7fd fd52 	bl	8003998 <HAL_GetTick>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d901      	bls.n	8005f06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f02:	2303      	movs	r3, #3
 8005f04:	e04f      	b.n	8005fa6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f06:	4b2b      	ldr	r3, [pc, #172]	@ (8005fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	f003 020c 	and.w	r2, r3, #12
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d1eb      	bne.n	8005ef0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f18:	4b25      	ldr	r3, [pc, #148]	@ (8005fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f003 0307 	and.w	r3, r3, #7
 8005f20:	683a      	ldr	r2, [r7, #0]
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d20c      	bcs.n	8005f40 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f26:	4b22      	ldr	r3, [pc, #136]	@ (8005fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8005f28:	683a      	ldr	r2, [r7, #0]
 8005f2a:	b2d2      	uxtb	r2, r2
 8005f2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f2e:	4b20      	ldr	r3, [pc, #128]	@ (8005fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f003 0307 	and.w	r3, r3, #7
 8005f36:	683a      	ldr	r2, [r7, #0]
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d001      	beq.n	8005f40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e032      	b.n	8005fa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f003 0304 	and.w	r3, r3, #4
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d008      	beq.n	8005f5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f4c:	4b19      	ldr	r3, [pc, #100]	@ (8005fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	4916      	ldr	r1, [pc, #88]	@ (8005fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 0308 	and.w	r3, r3, #8
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d009      	beq.n	8005f7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f6a:	4b12      	ldr	r3, [pc, #72]	@ (8005fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	00db      	lsls	r3, r3, #3
 8005f78:	490e      	ldr	r1, [pc, #56]	@ (8005fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005f7e:	f000 f821 	bl	8005fc4 <HAL_RCC_GetSysClockFreq>
 8005f82:	4602      	mov	r2, r0
 8005f84:	4b0b      	ldr	r3, [pc, #44]	@ (8005fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	091b      	lsrs	r3, r3, #4
 8005f8a:	f003 030f 	and.w	r3, r3, #15
 8005f8e:	490a      	ldr	r1, [pc, #40]	@ (8005fb8 <HAL_RCC_ClockConfig+0x1c0>)
 8005f90:	5ccb      	ldrb	r3, [r1, r3]
 8005f92:	fa22 f303 	lsr.w	r3, r2, r3
 8005f96:	4a09      	ldr	r2, [pc, #36]	@ (8005fbc <HAL_RCC_ClockConfig+0x1c4>)
 8005f98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005f9a:	4b09      	ldr	r3, [pc, #36]	@ (8005fc0 <HAL_RCC_ClockConfig+0x1c8>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f7fd fcb6 	bl	8003910 <HAL_InitTick>

  return HAL_OK;
 8005fa4:	2300      	movs	r3, #0
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3710      	adds	r7, #16
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop
 8005fb0:	40023c00 	.word	0x40023c00
 8005fb4:	40023800 	.word	0x40023800
 8005fb8:	08009dec 	.word	0x08009dec
 8005fbc:	20000168 	.word	0x20000168
 8005fc0:	2000016c 	.word	0x2000016c

08005fc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fc8:	b090      	sub	sp, #64	@ 0x40
 8005fca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005fdc:	4b59      	ldr	r3, [pc, #356]	@ (8006144 <HAL_RCC_GetSysClockFreq+0x180>)
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	f003 030c 	and.w	r3, r3, #12
 8005fe4:	2b08      	cmp	r3, #8
 8005fe6:	d00d      	beq.n	8006004 <HAL_RCC_GetSysClockFreq+0x40>
 8005fe8:	2b08      	cmp	r3, #8
 8005fea:	f200 80a1 	bhi.w	8006130 <HAL_RCC_GetSysClockFreq+0x16c>
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d002      	beq.n	8005ff8 <HAL_RCC_GetSysClockFreq+0x34>
 8005ff2:	2b04      	cmp	r3, #4
 8005ff4:	d003      	beq.n	8005ffe <HAL_RCC_GetSysClockFreq+0x3a>
 8005ff6:	e09b      	b.n	8006130 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ff8:	4b53      	ldr	r3, [pc, #332]	@ (8006148 <HAL_RCC_GetSysClockFreq+0x184>)
 8005ffa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005ffc:	e09b      	b.n	8006136 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ffe:	4b53      	ldr	r3, [pc, #332]	@ (800614c <HAL_RCC_GetSysClockFreq+0x188>)
 8006000:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006002:	e098      	b.n	8006136 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006004:	4b4f      	ldr	r3, [pc, #316]	@ (8006144 <HAL_RCC_GetSysClockFreq+0x180>)
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800600c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800600e:	4b4d      	ldr	r3, [pc, #308]	@ (8006144 <HAL_RCC_GetSysClockFreq+0x180>)
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006016:	2b00      	cmp	r3, #0
 8006018:	d028      	beq.n	800606c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800601a:	4b4a      	ldr	r3, [pc, #296]	@ (8006144 <HAL_RCC_GetSysClockFreq+0x180>)
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	099b      	lsrs	r3, r3, #6
 8006020:	2200      	movs	r2, #0
 8006022:	623b      	str	r3, [r7, #32]
 8006024:	627a      	str	r2, [r7, #36]	@ 0x24
 8006026:	6a3b      	ldr	r3, [r7, #32]
 8006028:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800602c:	2100      	movs	r1, #0
 800602e:	4b47      	ldr	r3, [pc, #284]	@ (800614c <HAL_RCC_GetSysClockFreq+0x188>)
 8006030:	fb03 f201 	mul.w	r2, r3, r1
 8006034:	2300      	movs	r3, #0
 8006036:	fb00 f303 	mul.w	r3, r0, r3
 800603a:	4413      	add	r3, r2
 800603c:	4a43      	ldr	r2, [pc, #268]	@ (800614c <HAL_RCC_GetSysClockFreq+0x188>)
 800603e:	fba0 1202 	umull	r1, r2, r0, r2
 8006042:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006044:	460a      	mov	r2, r1
 8006046:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006048:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800604a:	4413      	add	r3, r2
 800604c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800604e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006050:	2200      	movs	r2, #0
 8006052:	61bb      	str	r3, [r7, #24]
 8006054:	61fa      	str	r2, [r7, #28]
 8006056:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800605a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800605e:	f7fa fe09 	bl	8000c74 <__aeabi_uldivmod>
 8006062:	4602      	mov	r2, r0
 8006064:	460b      	mov	r3, r1
 8006066:	4613      	mov	r3, r2
 8006068:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800606a:	e053      	b.n	8006114 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800606c:	4b35      	ldr	r3, [pc, #212]	@ (8006144 <HAL_RCC_GetSysClockFreq+0x180>)
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	099b      	lsrs	r3, r3, #6
 8006072:	2200      	movs	r2, #0
 8006074:	613b      	str	r3, [r7, #16]
 8006076:	617a      	str	r2, [r7, #20]
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800607e:	f04f 0b00 	mov.w	fp, #0
 8006082:	4652      	mov	r2, sl
 8006084:	465b      	mov	r3, fp
 8006086:	f04f 0000 	mov.w	r0, #0
 800608a:	f04f 0100 	mov.w	r1, #0
 800608e:	0159      	lsls	r1, r3, #5
 8006090:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006094:	0150      	lsls	r0, r2, #5
 8006096:	4602      	mov	r2, r0
 8006098:	460b      	mov	r3, r1
 800609a:	ebb2 080a 	subs.w	r8, r2, sl
 800609e:	eb63 090b 	sbc.w	r9, r3, fp
 80060a2:	f04f 0200 	mov.w	r2, #0
 80060a6:	f04f 0300 	mov.w	r3, #0
 80060aa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80060ae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80060b2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80060b6:	ebb2 0408 	subs.w	r4, r2, r8
 80060ba:	eb63 0509 	sbc.w	r5, r3, r9
 80060be:	f04f 0200 	mov.w	r2, #0
 80060c2:	f04f 0300 	mov.w	r3, #0
 80060c6:	00eb      	lsls	r3, r5, #3
 80060c8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80060cc:	00e2      	lsls	r2, r4, #3
 80060ce:	4614      	mov	r4, r2
 80060d0:	461d      	mov	r5, r3
 80060d2:	eb14 030a 	adds.w	r3, r4, sl
 80060d6:	603b      	str	r3, [r7, #0]
 80060d8:	eb45 030b 	adc.w	r3, r5, fp
 80060dc:	607b      	str	r3, [r7, #4]
 80060de:	f04f 0200 	mov.w	r2, #0
 80060e2:	f04f 0300 	mov.w	r3, #0
 80060e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80060ea:	4629      	mov	r1, r5
 80060ec:	028b      	lsls	r3, r1, #10
 80060ee:	4621      	mov	r1, r4
 80060f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80060f4:	4621      	mov	r1, r4
 80060f6:	028a      	lsls	r2, r1, #10
 80060f8:	4610      	mov	r0, r2
 80060fa:	4619      	mov	r1, r3
 80060fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060fe:	2200      	movs	r2, #0
 8006100:	60bb      	str	r3, [r7, #8]
 8006102:	60fa      	str	r2, [r7, #12]
 8006104:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006108:	f7fa fdb4 	bl	8000c74 <__aeabi_uldivmod>
 800610c:	4602      	mov	r2, r0
 800610e:	460b      	mov	r3, r1
 8006110:	4613      	mov	r3, r2
 8006112:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006114:	4b0b      	ldr	r3, [pc, #44]	@ (8006144 <HAL_RCC_GetSysClockFreq+0x180>)
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	0c1b      	lsrs	r3, r3, #16
 800611a:	f003 0303 	and.w	r3, r3, #3
 800611e:	3301      	adds	r3, #1
 8006120:	005b      	lsls	r3, r3, #1
 8006122:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8006124:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006128:	fbb2 f3f3 	udiv	r3, r2, r3
 800612c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800612e:	e002      	b.n	8006136 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006130:	4b05      	ldr	r3, [pc, #20]	@ (8006148 <HAL_RCC_GetSysClockFreq+0x184>)
 8006132:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006134:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006138:	4618      	mov	r0, r3
 800613a:	3740      	adds	r7, #64	@ 0x40
 800613c:	46bd      	mov	sp, r7
 800613e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006142:	bf00      	nop
 8006144:	40023800 	.word	0x40023800
 8006148:	00f42400 	.word	0x00f42400
 800614c:	017d7840 	.word	0x017d7840

08006150 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006150:	b480      	push	{r7}
 8006152:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006154:	4b03      	ldr	r3, [pc, #12]	@ (8006164 <HAL_RCC_GetHCLKFreq+0x14>)
 8006156:	681b      	ldr	r3, [r3, #0]
}
 8006158:	4618      	mov	r0, r3
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr
 8006162:	bf00      	nop
 8006164:	20000168 	.word	0x20000168

08006168 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800616c:	f7ff fff0 	bl	8006150 <HAL_RCC_GetHCLKFreq>
 8006170:	4602      	mov	r2, r0
 8006172:	4b05      	ldr	r3, [pc, #20]	@ (8006188 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	0a9b      	lsrs	r3, r3, #10
 8006178:	f003 0307 	and.w	r3, r3, #7
 800617c:	4903      	ldr	r1, [pc, #12]	@ (800618c <HAL_RCC_GetPCLK1Freq+0x24>)
 800617e:	5ccb      	ldrb	r3, [r1, r3]
 8006180:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006184:	4618      	mov	r0, r3
 8006186:	bd80      	pop	{r7, pc}
 8006188:	40023800 	.word	0x40023800
 800618c:	08009dfc 	.word	0x08009dfc

08006190 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b082      	sub	sp, #8
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d101      	bne.n	80061a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	e041      	b.n	8006226 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d106      	bne.n	80061bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f7fd fa52 	bl	8003660 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2202      	movs	r2, #2
 80061c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	3304      	adds	r3, #4
 80061cc:	4619      	mov	r1, r3
 80061ce:	4610      	mov	r0, r2
 80061d0:	f000 fcd0 	bl	8006b74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006224:	2300      	movs	r3, #0
}
 8006226:	4618      	mov	r0, r3
 8006228:	3708      	adds	r7, #8
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
	...

08006230 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006230:	b480      	push	{r7}
 8006232:	b085      	sub	sp, #20
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800623e:	b2db      	uxtb	r3, r3
 8006240:	2b01      	cmp	r3, #1
 8006242:	d001      	beq.n	8006248 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	e03c      	b.n	80062c2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2202      	movs	r2, #2
 800624c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a1e      	ldr	r2, [pc, #120]	@ (80062d0 <HAL_TIM_Base_Start+0xa0>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d018      	beq.n	800628c <HAL_TIM_Base_Start+0x5c>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006262:	d013      	beq.n	800628c <HAL_TIM_Base_Start+0x5c>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a1a      	ldr	r2, [pc, #104]	@ (80062d4 <HAL_TIM_Base_Start+0xa4>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d00e      	beq.n	800628c <HAL_TIM_Base_Start+0x5c>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a19      	ldr	r2, [pc, #100]	@ (80062d8 <HAL_TIM_Base_Start+0xa8>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d009      	beq.n	800628c <HAL_TIM_Base_Start+0x5c>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a17      	ldr	r2, [pc, #92]	@ (80062dc <HAL_TIM_Base_Start+0xac>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d004      	beq.n	800628c <HAL_TIM_Base_Start+0x5c>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a16      	ldr	r2, [pc, #88]	@ (80062e0 <HAL_TIM_Base_Start+0xb0>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d111      	bne.n	80062b0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	f003 0307 	and.w	r3, r3, #7
 8006296:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2b06      	cmp	r3, #6
 800629c:	d010      	beq.n	80062c0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f042 0201 	orr.w	r2, r2, #1
 80062ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062ae:	e007      	b.n	80062c0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f042 0201 	orr.w	r2, r2, #1
 80062be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3714      	adds	r7, #20
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr
 80062ce:	bf00      	nop
 80062d0:	40010000 	.word	0x40010000
 80062d4:	40000400 	.word	0x40000400
 80062d8:	40000800 	.word	0x40000800
 80062dc:	40000c00 	.word	0x40000c00
 80062e0:	40014000 	.word	0x40014000

080062e4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	6a1a      	ldr	r2, [r3, #32]
 80062f2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80062f6:	4013      	ands	r3, r2
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d10f      	bne.n	800631c <HAL_TIM_Base_Stop+0x38>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	6a1a      	ldr	r2, [r3, #32]
 8006302:	f240 4344 	movw	r3, #1092	@ 0x444
 8006306:	4013      	ands	r3, r2
 8006308:	2b00      	cmp	r3, #0
 800630a:	d107      	bne.n	800631c <HAL_TIM_Base_Stop+0x38>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f022 0201 	bic.w	r2, r2, #1
 800631a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8006324:	2300      	movs	r3, #0
}
 8006326:	4618      	mov	r0, r3
 8006328:	370c      	adds	r7, #12
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr

08006332 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006332:	b580      	push	{r7, lr}
 8006334:	b082      	sub	sp, #8
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d101      	bne.n	8006344 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	e041      	b.n	80063c8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800634a:	b2db      	uxtb	r3, r3
 800634c:	2b00      	cmp	r3, #0
 800634e:	d106      	bne.n	800635e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f7fd f9ed 	bl	8003738 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2202      	movs	r2, #2
 8006362:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	3304      	adds	r3, #4
 800636e:	4619      	mov	r1, r3
 8006370:	4610      	mov	r0, r2
 8006372:	f000 fbff 	bl	8006b74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2201      	movs	r2, #1
 800637a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2201      	movs	r2, #1
 8006382:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2201      	movs	r2, #1
 800638a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2201      	movs	r2, #1
 8006392:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2201      	movs	r2, #1
 800639a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2201      	movs	r2, #1
 80063a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2201      	movs	r2, #1
 80063aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2201      	movs	r2, #1
 80063b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2201      	movs	r2, #1
 80063ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2201      	movs	r2, #1
 80063c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80063c6:	2300      	movs	r3, #0
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3708      	adds	r7, #8
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d109      	bne.n	80063f4 <HAL_TIM_PWM_Start+0x24>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	bf14      	ite	ne
 80063ec:	2301      	movne	r3, #1
 80063ee:	2300      	moveq	r3, #0
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	e022      	b.n	800643a <HAL_TIM_PWM_Start+0x6a>
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	2b04      	cmp	r3, #4
 80063f8:	d109      	bne.n	800640e <HAL_TIM_PWM_Start+0x3e>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006400:	b2db      	uxtb	r3, r3
 8006402:	2b01      	cmp	r3, #1
 8006404:	bf14      	ite	ne
 8006406:	2301      	movne	r3, #1
 8006408:	2300      	moveq	r3, #0
 800640a:	b2db      	uxtb	r3, r3
 800640c:	e015      	b.n	800643a <HAL_TIM_PWM_Start+0x6a>
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	2b08      	cmp	r3, #8
 8006412:	d109      	bne.n	8006428 <HAL_TIM_PWM_Start+0x58>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800641a:	b2db      	uxtb	r3, r3
 800641c:	2b01      	cmp	r3, #1
 800641e:	bf14      	ite	ne
 8006420:	2301      	movne	r3, #1
 8006422:	2300      	moveq	r3, #0
 8006424:	b2db      	uxtb	r3, r3
 8006426:	e008      	b.n	800643a <HAL_TIM_PWM_Start+0x6a>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800642e:	b2db      	uxtb	r3, r3
 8006430:	2b01      	cmp	r3, #1
 8006432:	bf14      	ite	ne
 8006434:	2301      	movne	r3, #1
 8006436:	2300      	moveq	r3, #0
 8006438:	b2db      	uxtb	r3, r3
 800643a:	2b00      	cmp	r3, #0
 800643c:	d001      	beq.n	8006442 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	e068      	b.n	8006514 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d104      	bne.n	8006452 <HAL_TIM_PWM_Start+0x82>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2202      	movs	r2, #2
 800644c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006450:	e013      	b.n	800647a <HAL_TIM_PWM_Start+0xaa>
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	2b04      	cmp	r3, #4
 8006456:	d104      	bne.n	8006462 <HAL_TIM_PWM_Start+0x92>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2202      	movs	r2, #2
 800645c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006460:	e00b      	b.n	800647a <HAL_TIM_PWM_Start+0xaa>
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	2b08      	cmp	r3, #8
 8006466:	d104      	bne.n	8006472 <HAL_TIM_PWM_Start+0xa2>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2202      	movs	r2, #2
 800646c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006470:	e003      	b.n	800647a <HAL_TIM_PWM_Start+0xaa>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2202      	movs	r2, #2
 8006476:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	2201      	movs	r2, #1
 8006480:	6839      	ldr	r1, [r7, #0]
 8006482:	4618      	mov	r0, r3
 8006484:	f000 fe28 	bl	80070d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a23      	ldr	r2, [pc, #140]	@ (800651c <HAL_TIM_PWM_Start+0x14c>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d107      	bne.n	80064a2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80064a0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a1d      	ldr	r2, [pc, #116]	@ (800651c <HAL_TIM_PWM_Start+0x14c>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d018      	beq.n	80064de <HAL_TIM_PWM_Start+0x10e>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064b4:	d013      	beq.n	80064de <HAL_TIM_PWM_Start+0x10e>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a19      	ldr	r2, [pc, #100]	@ (8006520 <HAL_TIM_PWM_Start+0x150>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d00e      	beq.n	80064de <HAL_TIM_PWM_Start+0x10e>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a17      	ldr	r2, [pc, #92]	@ (8006524 <HAL_TIM_PWM_Start+0x154>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d009      	beq.n	80064de <HAL_TIM_PWM_Start+0x10e>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a16      	ldr	r2, [pc, #88]	@ (8006528 <HAL_TIM_PWM_Start+0x158>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d004      	beq.n	80064de <HAL_TIM_PWM_Start+0x10e>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a14      	ldr	r2, [pc, #80]	@ (800652c <HAL_TIM_PWM_Start+0x15c>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d111      	bne.n	8006502 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	f003 0307 	and.w	r3, r3, #7
 80064e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2b06      	cmp	r3, #6
 80064ee:	d010      	beq.n	8006512 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f042 0201 	orr.w	r2, r2, #1
 80064fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006500:	e007      	b.n	8006512 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f042 0201 	orr.w	r2, r2, #1
 8006510:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006512:	2300      	movs	r3, #0
}
 8006514:	4618      	mov	r0, r3
 8006516:	3710      	adds	r7, #16
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}
 800651c:	40010000 	.word	0x40010000
 8006520:	40000400 	.word	0x40000400
 8006524:	40000800 	.word	0x40000800
 8006528:	40000c00 	.word	0x40000c00
 800652c:	40014000 	.word	0x40014000

08006530 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b082      	sub	sp, #8
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	2200      	movs	r2, #0
 8006540:	6839      	ldr	r1, [r7, #0]
 8006542:	4618      	mov	r0, r3
 8006544:	f000 fdc8 	bl	80070d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a29      	ldr	r2, [pc, #164]	@ (80065f4 <HAL_TIM_PWM_Stop+0xc4>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d117      	bne.n	8006582 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	6a1a      	ldr	r2, [r3, #32]
 8006558:	f241 1311 	movw	r3, #4369	@ 0x1111
 800655c:	4013      	ands	r3, r2
 800655e:	2b00      	cmp	r3, #0
 8006560:	d10f      	bne.n	8006582 <HAL_TIM_PWM_Stop+0x52>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	6a1a      	ldr	r2, [r3, #32]
 8006568:	f240 4344 	movw	r3, #1092	@ 0x444
 800656c:	4013      	ands	r3, r2
 800656e:	2b00      	cmp	r3, #0
 8006570:	d107      	bne.n	8006582 <HAL_TIM_PWM_Stop+0x52>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006580:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	6a1a      	ldr	r2, [r3, #32]
 8006588:	f241 1311 	movw	r3, #4369	@ 0x1111
 800658c:	4013      	ands	r3, r2
 800658e:	2b00      	cmp	r3, #0
 8006590:	d10f      	bne.n	80065b2 <HAL_TIM_PWM_Stop+0x82>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	6a1a      	ldr	r2, [r3, #32]
 8006598:	f240 4344 	movw	r3, #1092	@ 0x444
 800659c:	4013      	ands	r3, r2
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d107      	bne.n	80065b2 <HAL_TIM_PWM_Stop+0x82>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f022 0201 	bic.w	r2, r2, #1
 80065b0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d104      	bne.n	80065c2 <HAL_TIM_PWM_Stop+0x92>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80065c0:	e013      	b.n	80065ea <HAL_TIM_PWM_Stop+0xba>
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	2b04      	cmp	r3, #4
 80065c6:	d104      	bne.n	80065d2 <HAL_TIM_PWM_Stop+0xa2>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80065d0:	e00b      	b.n	80065ea <HAL_TIM_PWM_Stop+0xba>
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	2b08      	cmp	r3, #8
 80065d6:	d104      	bne.n	80065e2 <HAL_TIM_PWM_Stop+0xb2>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2201      	movs	r2, #1
 80065dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80065e0:	e003      	b.n	80065ea <HAL_TIM_PWM_Stop+0xba>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2201      	movs	r2, #1
 80065e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 80065ea:	2300      	movs	r3, #0
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3708      	adds	r7, #8
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}
 80065f4:	40010000 	.word	0x40010000

080065f8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b086      	sub	sp, #24
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d101      	bne.n	800660c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	e097      	b.n	800673c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006612:	b2db      	uxtb	r3, r3
 8006614:	2b00      	cmp	r3, #0
 8006616:	d106      	bne.n	8006626 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2200      	movs	r2, #0
 800661c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f7fd f8a9 	bl	8003778 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2202      	movs	r2, #2
 800662a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	6812      	ldr	r2, [r2, #0]
 8006638:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800663c:	f023 0307 	bic.w	r3, r3, #7
 8006640:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	3304      	adds	r3, #4
 800664a:	4619      	mov	r1, r3
 800664c:	4610      	mov	r0, r2
 800664e:	f000 fa91 	bl	8006b74 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	699b      	ldr	r3, [r3, #24]
 8006660:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	6a1b      	ldr	r3, [r3, #32]
 8006668:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	697a      	ldr	r2, [r7, #20]
 8006670:	4313      	orrs	r3, r2
 8006672:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800667a:	f023 0303 	bic.w	r3, r3, #3
 800667e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	689a      	ldr	r2, [r3, #8]
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	699b      	ldr	r3, [r3, #24]
 8006688:	021b      	lsls	r3, r3, #8
 800668a:	4313      	orrs	r3, r2
 800668c:	693a      	ldr	r2, [r7, #16]
 800668e:	4313      	orrs	r3, r2
 8006690:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006698:	f023 030c 	bic.w	r3, r3, #12
 800669c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80066a4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80066a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	68da      	ldr	r2, [r3, #12]
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	69db      	ldr	r3, [r3, #28]
 80066b2:	021b      	lsls	r3, r3, #8
 80066b4:	4313      	orrs	r3, r2
 80066b6:	693a      	ldr	r2, [r7, #16]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	691b      	ldr	r3, [r3, #16]
 80066c0:	011a      	lsls	r2, r3, #4
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	6a1b      	ldr	r3, [r3, #32]
 80066c6:	031b      	lsls	r3, r3, #12
 80066c8:	4313      	orrs	r3, r2
 80066ca:	693a      	ldr	r2, [r7, #16]
 80066cc:	4313      	orrs	r3, r2
 80066ce:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80066d6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80066de:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	685a      	ldr	r2, [r3, #4]
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	695b      	ldr	r3, [r3, #20]
 80066e8:	011b      	lsls	r3, r3, #4
 80066ea:	4313      	orrs	r3, r2
 80066ec:	68fa      	ldr	r2, [r7, #12]
 80066ee:	4313      	orrs	r3, r2
 80066f0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	697a      	ldr	r2, [r7, #20]
 80066f8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	693a      	ldr	r2, [r7, #16]
 8006700:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	68fa      	ldr	r2, [r7, #12]
 8006708:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2201      	movs	r2, #1
 800670e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2201      	movs	r2, #1
 8006716:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2201      	movs	r2, #1
 800671e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2201      	movs	r2, #1
 8006726:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2201      	movs	r2, #1
 800672e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2201      	movs	r2, #1
 8006736:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800673a:	2300      	movs	r3, #0
}
 800673c:	4618      	mov	r0, r3
 800673e:	3718      	adds	r7, #24
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b084      	sub	sp, #16
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006754:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800675c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006764:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800676c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d110      	bne.n	8006796 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006774:	7bfb      	ldrb	r3, [r7, #15]
 8006776:	2b01      	cmp	r3, #1
 8006778:	d102      	bne.n	8006780 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800677a:	7b7b      	ldrb	r3, [r7, #13]
 800677c:	2b01      	cmp	r3, #1
 800677e:	d001      	beq.n	8006784 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	e069      	b.n	8006858 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2202      	movs	r2, #2
 8006788:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2202      	movs	r2, #2
 8006790:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006794:	e031      	b.n	80067fa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	2b04      	cmp	r3, #4
 800679a:	d110      	bne.n	80067be <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800679c:	7bbb      	ldrb	r3, [r7, #14]
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d102      	bne.n	80067a8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80067a2:	7b3b      	ldrb	r3, [r7, #12]
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d001      	beq.n	80067ac <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	e055      	b.n	8006858 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2202      	movs	r2, #2
 80067b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2202      	movs	r2, #2
 80067b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80067bc:	e01d      	b.n	80067fa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80067be:	7bfb      	ldrb	r3, [r7, #15]
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d108      	bne.n	80067d6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80067c4:	7bbb      	ldrb	r3, [r7, #14]
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	d105      	bne.n	80067d6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80067ca:	7b7b      	ldrb	r3, [r7, #13]
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d102      	bne.n	80067d6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80067d0:	7b3b      	ldrb	r3, [r7, #12]
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d001      	beq.n	80067da <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	e03e      	b.n	8006858 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2202      	movs	r2, #2
 80067de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2202      	movs	r2, #2
 80067e6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2202      	movs	r2, #2
 80067ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2202      	movs	r2, #2
 80067f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d003      	beq.n	8006808 <HAL_TIM_Encoder_Start+0xc4>
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	2b04      	cmp	r3, #4
 8006804:	d008      	beq.n	8006818 <HAL_TIM_Encoder_Start+0xd4>
 8006806:	e00f      	b.n	8006828 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2201      	movs	r2, #1
 800680e:	2100      	movs	r1, #0
 8006810:	4618      	mov	r0, r3
 8006812:	f000 fc61 	bl	80070d8 <TIM_CCxChannelCmd>
      break;
 8006816:	e016      	b.n	8006846 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2201      	movs	r2, #1
 800681e:	2104      	movs	r1, #4
 8006820:	4618      	mov	r0, r3
 8006822:	f000 fc59 	bl	80070d8 <TIM_CCxChannelCmd>
      break;
 8006826:	e00e      	b.n	8006846 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	2201      	movs	r2, #1
 800682e:	2100      	movs	r1, #0
 8006830:	4618      	mov	r0, r3
 8006832:	f000 fc51 	bl	80070d8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	2201      	movs	r2, #1
 800683c:	2104      	movs	r1, #4
 800683e:	4618      	mov	r0, r3
 8006840:	f000 fc4a 	bl	80070d8 <TIM_CCxChannelCmd>
      break;
 8006844:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f042 0201 	orr.w	r2, r2, #1
 8006854:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006856:	2300      	movs	r3, #0
}
 8006858:	4618      	mov	r0, r3
 800685a:	3710      	adds	r7, #16
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}

08006860 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b086      	sub	sp, #24
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800686c:	2300      	movs	r3, #0
 800686e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006876:	2b01      	cmp	r3, #1
 8006878:	d101      	bne.n	800687e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800687a:	2302      	movs	r3, #2
 800687c:	e0ae      	b.n	80069dc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2201      	movs	r2, #1
 8006882:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2b0c      	cmp	r3, #12
 800688a:	f200 809f 	bhi.w	80069cc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800688e:	a201      	add	r2, pc, #4	@ (adr r2, 8006894 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006894:	080068c9 	.word	0x080068c9
 8006898:	080069cd 	.word	0x080069cd
 800689c:	080069cd 	.word	0x080069cd
 80068a0:	080069cd 	.word	0x080069cd
 80068a4:	08006909 	.word	0x08006909
 80068a8:	080069cd 	.word	0x080069cd
 80068ac:	080069cd 	.word	0x080069cd
 80068b0:	080069cd 	.word	0x080069cd
 80068b4:	0800694b 	.word	0x0800694b
 80068b8:	080069cd 	.word	0x080069cd
 80068bc:	080069cd 	.word	0x080069cd
 80068c0:	080069cd 	.word	0x080069cd
 80068c4:	0800698b 	.word	0x0800698b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	68b9      	ldr	r1, [r7, #8]
 80068ce:	4618      	mov	r0, r3
 80068d0:	f000 f9dc 	bl	8006c8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	699a      	ldr	r2, [r3, #24]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f042 0208 	orr.w	r2, r2, #8
 80068e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	699a      	ldr	r2, [r3, #24]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f022 0204 	bic.w	r2, r2, #4
 80068f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	6999      	ldr	r1, [r3, #24]
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	691a      	ldr	r2, [r3, #16]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	430a      	orrs	r2, r1
 8006904:	619a      	str	r2, [r3, #24]
      break;
 8006906:	e064      	b.n	80069d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	68b9      	ldr	r1, [r7, #8]
 800690e:	4618      	mov	r0, r3
 8006910:	f000 fa22 	bl	8006d58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	699a      	ldr	r2, [r3, #24]
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006922:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	699a      	ldr	r2, [r3, #24]
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006932:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	6999      	ldr	r1, [r3, #24]
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	021a      	lsls	r2, r3, #8
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	430a      	orrs	r2, r1
 8006946:	619a      	str	r2, [r3, #24]
      break;
 8006948:	e043      	b.n	80069d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	68b9      	ldr	r1, [r7, #8]
 8006950:	4618      	mov	r0, r3
 8006952:	f000 fa6d 	bl	8006e30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	69da      	ldr	r2, [r3, #28]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f042 0208 	orr.w	r2, r2, #8
 8006964:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	69da      	ldr	r2, [r3, #28]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f022 0204 	bic.w	r2, r2, #4
 8006974:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	69d9      	ldr	r1, [r3, #28]
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	691a      	ldr	r2, [r3, #16]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	430a      	orrs	r2, r1
 8006986:	61da      	str	r2, [r3, #28]
      break;
 8006988:	e023      	b.n	80069d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	68b9      	ldr	r1, [r7, #8]
 8006990:	4618      	mov	r0, r3
 8006992:	f000 fab7 	bl	8006f04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	69da      	ldr	r2, [r3, #28]
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80069a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	69da      	ldr	r2, [r3, #28]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80069b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	69d9      	ldr	r1, [r3, #28]
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	691b      	ldr	r3, [r3, #16]
 80069c0:	021a      	lsls	r2, r3, #8
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	430a      	orrs	r2, r1
 80069c8:	61da      	str	r2, [r3, #28]
      break;
 80069ca:	e002      	b.n	80069d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	75fb      	strb	r3, [r7, #23]
      break;
 80069d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80069da:	7dfb      	ldrb	r3, [r7, #23]
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3718      	adds	r7, #24
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069ee:	2300      	movs	r3, #0
 80069f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d101      	bne.n	8006a00 <HAL_TIM_ConfigClockSource+0x1c>
 80069fc:	2302      	movs	r3, #2
 80069fe:	e0b4      	b.n	8006b6a <HAL_TIM_ConfigClockSource+0x186>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2201      	movs	r2, #1
 8006a04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2202      	movs	r2, #2
 8006a0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006a1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006a26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	68ba      	ldr	r2, [r7, #8]
 8006a2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a38:	d03e      	beq.n	8006ab8 <HAL_TIM_ConfigClockSource+0xd4>
 8006a3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a3e:	f200 8087 	bhi.w	8006b50 <HAL_TIM_ConfigClockSource+0x16c>
 8006a42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a46:	f000 8086 	beq.w	8006b56 <HAL_TIM_ConfigClockSource+0x172>
 8006a4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a4e:	d87f      	bhi.n	8006b50 <HAL_TIM_ConfigClockSource+0x16c>
 8006a50:	2b70      	cmp	r3, #112	@ 0x70
 8006a52:	d01a      	beq.n	8006a8a <HAL_TIM_ConfigClockSource+0xa6>
 8006a54:	2b70      	cmp	r3, #112	@ 0x70
 8006a56:	d87b      	bhi.n	8006b50 <HAL_TIM_ConfigClockSource+0x16c>
 8006a58:	2b60      	cmp	r3, #96	@ 0x60
 8006a5a:	d050      	beq.n	8006afe <HAL_TIM_ConfigClockSource+0x11a>
 8006a5c:	2b60      	cmp	r3, #96	@ 0x60
 8006a5e:	d877      	bhi.n	8006b50 <HAL_TIM_ConfigClockSource+0x16c>
 8006a60:	2b50      	cmp	r3, #80	@ 0x50
 8006a62:	d03c      	beq.n	8006ade <HAL_TIM_ConfigClockSource+0xfa>
 8006a64:	2b50      	cmp	r3, #80	@ 0x50
 8006a66:	d873      	bhi.n	8006b50 <HAL_TIM_ConfigClockSource+0x16c>
 8006a68:	2b40      	cmp	r3, #64	@ 0x40
 8006a6a:	d058      	beq.n	8006b1e <HAL_TIM_ConfigClockSource+0x13a>
 8006a6c:	2b40      	cmp	r3, #64	@ 0x40
 8006a6e:	d86f      	bhi.n	8006b50 <HAL_TIM_ConfigClockSource+0x16c>
 8006a70:	2b30      	cmp	r3, #48	@ 0x30
 8006a72:	d064      	beq.n	8006b3e <HAL_TIM_ConfigClockSource+0x15a>
 8006a74:	2b30      	cmp	r3, #48	@ 0x30
 8006a76:	d86b      	bhi.n	8006b50 <HAL_TIM_ConfigClockSource+0x16c>
 8006a78:	2b20      	cmp	r3, #32
 8006a7a:	d060      	beq.n	8006b3e <HAL_TIM_ConfigClockSource+0x15a>
 8006a7c:	2b20      	cmp	r3, #32
 8006a7e:	d867      	bhi.n	8006b50 <HAL_TIM_ConfigClockSource+0x16c>
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d05c      	beq.n	8006b3e <HAL_TIM_ConfigClockSource+0x15a>
 8006a84:	2b10      	cmp	r3, #16
 8006a86:	d05a      	beq.n	8006b3e <HAL_TIM_ConfigClockSource+0x15a>
 8006a88:	e062      	b.n	8006b50 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006a9a:	f000 fafd 	bl	8007098 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006aac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	68ba      	ldr	r2, [r7, #8]
 8006ab4:	609a      	str	r2, [r3, #8]
      break;
 8006ab6:	e04f      	b.n	8006b58 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006ac8:	f000 fae6 	bl	8007098 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	689a      	ldr	r2, [r3, #8]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006ada:	609a      	str	r2, [r3, #8]
      break;
 8006adc:	e03c      	b.n	8006b58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006aea:	461a      	mov	r2, r3
 8006aec:	f000 fa5a 	bl	8006fa4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	2150      	movs	r1, #80	@ 0x50
 8006af6:	4618      	mov	r0, r3
 8006af8:	f000 fab3 	bl	8007062 <TIM_ITRx_SetConfig>
      break;
 8006afc:	e02c      	b.n	8006b58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	f000 fa79 	bl	8007002 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	2160      	movs	r1, #96	@ 0x60
 8006b16:	4618      	mov	r0, r3
 8006b18:	f000 faa3 	bl	8007062 <TIM_ITRx_SetConfig>
      break;
 8006b1c:	e01c      	b.n	8006b58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	f000 fa3a 	bl	8006fa4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	2140      	movs	r1, #64	@ 0x40
 8006b36:	4618      	mov	r0, r3
 8006b38:	f000 fa93 	bl	8007062 <TIM_ITRx_SetConfig>
      break;
 8006b3c:	e00c      	b.n	8006b58 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4619      	mov	r1, r3
 8006b48:	4610      	mov	r0, r2
 8006b4a:	f000 fa8a 	bl	8007062 <TIM_ITRx_SetConfig>
      break;
 8006b4e:	e003      	b.n	8006b58 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006b50:	2301      	movs	r3, #1
 8006b52:	73fb      	strb	r3, [r7, #15]
      break;
 8006b54:	e000      	b.n	8006b58 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006b56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3710      	adds	r7, #16
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}
	...

08006b74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b085      	sub	sp, #20
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	4a3a      	ldr	r2, [pc, #232]	@ (8006c70 <TIM_Base_SetConfig+0xfc>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d00f      	beq.n	8006bac <TIM_Base_SetConfig+0x38>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b92:	d00b      	beq.n	8006bac <TIM_Base_SetConfig+0x38>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	4a37      	ldr	r2, [pc, #220]	@ (8006c74 <TIM_Base_SetConfig+0x100>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d007      	beq.n	8006bac <TIM_Base_SetConfig+0x38>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	4a36      	ldr	r2, [pc, #216]	@ (8006c78 <TIM_Base_SetConfig+0x104>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d003      	beq.n	8006bac <TIM_Base_SetConfig+0x38>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	4a35      	ldr	r2, [pc, #212]	@ (8006c7c <TIM_Base_SetConfig+0x108>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d108      	bne.n	8006bbe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	4a2b      	ldr	r2, [pc, #172]	@ (8006c70 <TIM_Base_SetConfig+0xfc>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d01b      	beq.n	8006bfe <TIM_Base_SetConfig+0x8a>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bcc:	d017      	beq.n	8006bfe <TIM_Base_SetConfig+0x8a>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4a28      	ldr	r2, [pc, #160]	@ (8006c74 <TIM_Base_SetConfig+0x100>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d013      	beq.n	8006bfe <TIM_Base_SetConfig+0x8a>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	4a27      	ldr	r2, [pc, #156]	@ (8006c78 <TIM_Base_SetConfig+0x104>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d00f      	beq.n	8006bfe <TIM_Base_SetConfig+0x8a>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4a26      	ldr	r2, [pc, #152]	@ (8006c7c <TIM_Base_SetConfig+0x108>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d00b      	beq.n	8006bfe <TIM_Base_SetConfig+0x8a>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a25      	ldr	r2, [pc, #148]	@ (8006c80 <TIM_Base_SetConfig+0x10c>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d007      	beq.n	8006bfe <TIM_Base_SetConfig+0x8a>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a24      	ldr	r2, [pc, #144]	@ (8006c84 <TIM_Base_SetConfig+0x110>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d003      	beq.n	8006bfe <TIM_Base_SetConfig+0x8a>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4a23      	ldr	r2, [pc, #140]	@ (8006c88 <TIM_Base_SetConfig+0x114>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d108      	bne.n	8006c10 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	68fa      	ldr	r2, [r7, #12]
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	695b      	ldr	r3, [r3, #20]
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	68fa      	ldr	r2, [r7, #12]
 8006c22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	689a      	ldr	r2, [r3, #8]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	4a0e      	ldr	r2, [pc, #56]	@ (8006c70 <TIM_Base_SetConfig+0xfc>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d103      	bne.n	8006c44 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	691a      	ldr	r2, [r3, #16]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2201      	movs	r2, #1
 8006c48:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	691b      	ldr	r3, [r3, #16]
 8006c4e:	f003 0301 	and.w	r3, r3, #1
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d105      	bne.n	8006c62 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	691b      	ldr	r3, [r3, #16]
 8006c5a:	f023 0201 	bic.w	r2, r3, #1
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	611a      	str	r2, [r3, #16]
  }
}
 8006c62:	bf00      	nop
 8006c64:	3714      	adds	r7, #20
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr
 8006c6e:	bf00      	nop
 8006c70:	40010000 	.word	0x40010000
 8006c74:	40000400 	.word	0x40000400
 8006c78:	40000800 	.word	0x40000800
 8006c7c:	40000c00 	.word	0x40000c00
 8006c80:	40014000 	.word	0x40014000
 8006c84:	40014400 	.word	0x40014400
 8006c88:	40014800 	.word	0x40014800

08006c8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b087      	sub	sp, #28
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a1b      	ldr	r3, [r3, #32]
 8006c9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6a1b      	ldr	r3, [r3, #32]
 8006ca0:	f023 0201 	bic.w	r2, r3, #1
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	699b      	ldr	r3, [r3, #24]
 8006cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f023 0303 	bic.w	r3, r3, #3
 8006cc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	f023 0302 	bic.w	r3, r3, #2
 8006cd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	697a      	ldr	r2, [r7, #20]
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	4a1c      	ldr	r2, [pc, #112]	@ (8006d54 <TIM_OC1_SetConfig+0xc8>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d10c      	bne.n	8006d02 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	f023 0308 	bic.w	r3, r3, #8
 8006cee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	68db      	ldr	r3, [r3, #12]
 8006cf4:	697a      	ldr	r2, [r7, #20]
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	f023 0304 	bic.w	r3, r3, #4
 8006d00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a13      	ldr	r2, [pc, #76]	@ (8006d54 <TIM_OC1_SetConfig+0xc8>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d111      	bne.n	8006d2e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006d18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	695b      	ldr	r3, [r3, #20]
 8006d1e:	693a      	ldr	r2, [r7, #16]
 8006d20:	4313      	orrs	r3, r2
 8006d22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	699b      	ldr	r3, [r3, #24]
 8006d28:	693a      	ldr	r2, [r7, #16]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	693a      	ldr	r2, [r7, #16]
 8006d32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	68fa      	ldr	r2, [r7, #12]
 8006d38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	685a      	ldr	r2, [r3, #4]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	697a      	ldr	r2, [r7, #20]
 8006d46:	621a      	str	r2, [r3, #32]
}
 8006d48:	bf00      	nop
 8006d4a:	371c      	adds	r7, #28
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr
 8006d54:	40010000 	.word	0x40010000

08006d58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b087      	sub	sp, #28
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6a1b      	ldr	r3, [r3, #32]
 8006d66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6a1b      	ldr	r3, [r3, #32]
 8006d6c:	f023 0210 	bic.w	r2, r3, #16
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	699b      	ldr	r3, [r3, #24]
 8006d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	021b      	lsls	r3, r3, #8
 8006d96:	68fa      	ldr	r2, [r7, #12]
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	f023 0320 	bic.w	r3, r3, #32
 8006da2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	011b      	lsls	r3, r3, #4
 8006daa:	697a      	ldr	r2, [r7, #20]
 8006dac:	4313      	orrs	r3, r2
 8006dae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	4a1e      	ldr	r2, [pc, #120]	@ (8006e2c <TIM_OC2_SetConfig+0xd4>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d10d      	bne.n	8006dd4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006dbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	68db      	ldr	r3, [r3, #12]
 8006dc4:	011b      	lsls	r3, r3, #4
 8006dc6:	697a      	ldr	r2, [r7, #20]
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006dd2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	4a15      	ldr	r2, [pc, #84]	@ (8006e2c <TIM_OC2_SetConfig+0xd4>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d113      	bne.n	8006e04 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006de2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006dea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	695b      	ldr	r3, [r3, #20]
 8006df0:	009b      	lsls	r3, r3, #2
 8006df2:	693a      	ldr	r2, [r7, #16]
 8006df4:	4313      	orrs	r3, r2
 8006df6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	699b      	ldr	r3, [r3, #24]
 8006dfc:	009b      	lsls	r3, r3, #2
 8006dfe:	693a      	ldr	r2, [r7, #16]
 8006e00:	4313      	orrs	r3, r2
 8006e02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	693a      	ldr	r2, [r7, #16]
 8006e08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	68fa      	ldr	r2, [r7, #12]
 8006e0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	685a      	ldr	r2, [r3, #4]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	697a      	ldr	r2, [r7, #20]
 8006e1c:	621a      	str	r2, [r3, #32]
}
 8006e1e:	bf00      	nop
 8006e20:	371c      	adds	r7, #28
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr
 8006e2a:	bf00      	nop
 8006e2c:	40010000 	.word	0x40010000

08006e30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b087      	sub	sp, #28
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6a1b      	ldr	r3, [r3, #32]
 8006e3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6a1b      	ldr	r3, [r3, #32]
 8006e44:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	69db      	ldr	r3, [r3, #28]
 8006e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f023 0303 	bic.w	r3, r3, #3
 8006e66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	68fa      	ldr	r2, [r7, #12]
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006e78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	021b      	lsls	r3, r3, #8
 8006e80:	697a      	ldr	r2, [r7, #20]
 8006e82:	4313      	orrs	r3, r2
 8006e84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	4a1d      	ldr	r2, [pc, #116]	@ (8006f00 <TIM_OC3_SetConfig+0xd0>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d10d      	bne.n	8006eaa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006e94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	68db      	ldr	r3, [r3, #12]
 8006e9a:	021b      	lsls	r3, r3, #8
 8006e9c:	697a      	ldr	r2, [r7, #20]
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006ea8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	4a14      	ldr	r2, [pc, #80]	@ (8006f00 <TIM_OC3_SetConfig+0xd0>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d113      	bne.n	8006eda <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006eb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006ec0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	695b      	ldr	r3, [r3, #20]
 8006ec6:	011b      	lsls	r3, r3, #4
 8006ec8:	693a      	ldr	r2, [r7, #16]
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	699b      	ldr	r3, [r3, #24]
 8006ed2:	011b      	lsls	r3, r3, #4
 8006ed4:	693a      	ldr	r2, [r7, #16]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	693a      	ldr	r2, [r7, #16]
 8006ede:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	68fa      	ldr	r2, [r7, #12]
 8006ee4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	685a      	ldr	r2, [r3, #4]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	697a      	ldr	r2, [r7, #20]
 8006ef2:	621a      	str	r2, [r3, #32]
}
 8006ef4:	bf00      	nop
 8006ef6:	371c      	adds	r7, #28
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr
 8006f00:	40010000 	.word	0x40010000

08006f04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b087      	sub	sp, #28
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6a1b      	ldr	r3, [r3, #32]
 8006f12:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6a1b      	ldr	r3, [r3, #32]
 8006f18:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	69db      	ldr	r3, [r3, #28]
 8006f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	021b      	lsls	r3, r3, #8
 8006f42:	68fa      	ldr	r2, [r7, #12]
 8006f44:	4313      	orrs	r3, r2
 8006f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006f4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	031b      	lsls	r3, r3, #12
 8006f56:	693a      	ldr	r2, [r7, #16]
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	4a10      	ldr	r2, [pc, #64]	@ (8006fa0 <TIM_OC4_SetConfig+0x9c>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d109      	bne.n	8006f78 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006f6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	695b      	ldr	r3, [r3, #20]
 8006f70:	019b      	lsls	r3, r3, #6
 8006f72:	697a      	ldr	r2, [r7, #20]
 8006f74:	4313      	orrs	r3, r2
 8006f76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	697a      	ldr	r2, [r7, #20]
 8006f7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	68fa      	ldr	r2, [r7, #12]
 8006f82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	685a      	ldr	r2, [r3, #4]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	693a      	ldr	r2, [r7, #16]
 8006f90:	621a      	str	r2, [r3, #32]
}
 8006f92:	bf00      	nop
 8006f94:	371c      	adds	r7, #28
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr
 8006f9e:	bf00      	nop
 8006fa0:	40010000 	.word	0x40010000

08006fa4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b087      	sub	sp, #28
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	60b9      	str	r1, [r7, #8]
 8006fae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6a1b      	ldr	r3, [r3, #32]
 8006fb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	6a1b      	ldr	r3, [r3, #32]
 8006fba:	f023 0201 	bic.w	r2, r3, #1
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	699b      	ldr	r3, [r3, #24]
 8006fc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006fce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	011b      	lsls	r3, r3, #4
 8006fd4:	693a      	ldr	r2, [r7, #16]
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	f023 030a 	bic.w	r3, r3, #10
 8006fe0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006fe2:	697a      	ldr	r2, [r7, #20]
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	693a      	ldr	r2, [r7, #16]
 8006fee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	697a      	ldr	r2, [r7, #20]
 8006ff4:	621a      	str	r2, [r3, #32]
}
 8006ff6:	bf00      	nop
 8006ff8:	371c      	adds	r7, #28
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr

08007002 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007002:	b480      	push	{r7}
 8007004:	b087      	sub	sp, #28
 8007006:	af00      	add	r7, sp, #0
 8007008:	60f8      	str	r0, [r7, #12]
 800700a:	60b9      	str	r1, [r7, #8]
 800700c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	6a1b      	ldr	r3, [r3, #32]
 8007012:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6a1b      	ldr	r3, [r3, #32]
 8007018:	f023 0210 	bic.w	r2, r3, #16
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	699b      	ldr	r3, [r3, #24]
 8007024:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800702c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	031b      	lsls	r3, r3, #12
 8007032:	693a      	ldr	r2, [r7, #16]
 8007034:	4313      	orrs	r3, r2
 8007036:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800703e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	011b      	lsls	r3, r3, #4
 8007044:	697a      	ldr	r2, [r7, #20]
 8007046:	4313      	orrs	r3, r2
 8007048:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	693a      	ldr	r2, [r7, #16]
 800704e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	697a      	ldr	r2, [r7, #20]
 8007054:	621a      	str	r2, [r3, #32]
}
 8007056:	bf00      	nop
 8007058:	371c      	adds	r7, #28
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr

08007062 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007062:	b480      	push	{r7}
 8007064:	b085      	sub	sp, #20
 8007066:	af00      	add	r7, sp, #0
 8007068:	6078      	str	r0, [r7, #4]
 800706a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007078:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800707a:	683a      	ldr	r2, [r7, #0]
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	4313      	orrs	r3, r2
 8007080:	f043 0307 	orr.w	r3, r3, #7
 8007084:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	68fa      	ldr	r2, [r7, #12]
 800708a:	609a      	str	r2, [r3, #8]
}
 800708c:	bf00      	nop
 800708e:	3714      	adds	r7, #20
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr

08007098 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007098:	b480      	push	{r7}
 800709a:	b087      	sub	sp, #28
 800709c:	af00      	add	r7, sp, #0
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	60b9      	str	r1, [r7, #8]
 80070a2:	607a      	str	r2, [r7, #4]
 80070a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80070b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	021a      	lsls	r2, r3, #8
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	431a      	orrs	r2, r3
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	4313      	orrs	r3, r2
 80070c0:	697a      	ldr	r2, [r7, #20]
 80070c2:	4313      	orrs	r3, r2
 80070c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	697a      	ldr	r2, [r7, #20]
 80070ca:	609a      	str	r2, [r3, #8]
}
 80070cc:	bf00      	nop
 80070ce:	371c      	adds	r7, #28
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr

080070d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80070d8:	b480      	push	{r7}
 80070da:	b087      	sub	sp, #28
 80070dc:	af00      	add	r7, sp, #0
 80070de:	60f8      	str	r0, [r7, #12]
 80070e0:	60b9      	str	r1, [r7, #8]
 80070e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	f003 031f 	and.w	r3, r3, #31
 80070ea:	2201      	movs	r2, #1
 80070ec:	fa02 f303 	lsl.w	r3, r2, r3
 80070f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	6a1a      	ldr	r2, [r3, #32]
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	43db      	mvns	r3, r3
 80070fa:	401a      	ands	r2, r3
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	6a1a      	ldr	r2, [r3, #32]
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	f003 031f 	and.w	r3, r3, #31
 800710a:	6879      	ldr	r1, [r7, #4]
 800710c:	fa01 f303 	lsl.w	r3, r1, r3
 8007110:	431a      	orrs	r2, r3
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	621a      	str	r2, [r3, #32]
}
 8007116:	bf00      	nop
 8007118:	371c      	adds	r7, #28
 800711a:	46bd      	mov	sp, r7
 800711c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007120:	4770      	bx	lr
	...

08007124 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007124:	b480      	push	{r7}
 8007126:	b085      	sub	sp, #20
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007134:	2b01      	cmp	r3, #1
 8007136:	d101      	bne.n	800713c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007138:	2302      	movs	r3, #2
 800713a:	e050      	b.n	80071de <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2201      	movs	r2, #1
 8007140:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2202      	movs	r2, #2
 8007148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007162:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	68fa      	ldr	r2, [r7, #12]
 800716a:	4313      	orrs	r3, r2
 800716c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	68fa      	ldr	r2, [r7, #12]
 8007174:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a1c      	ldr	r2, [pc, #112]	@ (80071ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d018      	beq.n	80071b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007188:	d013      	beq.n	80071b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a18      	ldr	r2, [pc, #96]	@ (80071f0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d00e      	beq.n	80071b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a16      	ldr	r2, [pc, #88]	@ (80071f4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d009      	beq.n	80071b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a15      	ldr	r2, [pc, #84]	@ (80071f8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d004      	beq.n	80071b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a13      	ldr	r2, [pc, #76]	@ (80071fc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d10c      	bne.n	80071cc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80071b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	68ba      	ldr	r2, [r7, #8]
 80071c0:	4313      	orrs	r3, r2
 80071c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	68ba      	ldr	r2, [r7, #8]
 80071ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2201      	movs	r2, #1
 80071d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2200      	movs	r2, #0
 80071d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80071dc:	2300      	movs	r3, #0
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3714      	adds	r7, #20
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr
 80071ea:	bf00      	nop
 80071ec:	40010000 	.word	0x40010000
 80071f0:	40000400 	.word	0x40000400
 80071f4:	40000800 	.word	0x40000800
 80071f8:	40000c00 	.word	0x40000c00
 80071fc:	40014000 	.word	0x40014000

08007200 <arm_max_f32>:
 8007200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007204:	1e4f      	subs	r7, r1, #1
 8007206:	ea5f 0897 	movs.w	r8, r7, lsr #2
 800720a:	f100 0e04 	add.w	lr, r0, #4
 800720e:	edd0 7a00 	vldr	s15, [r0]
 8007212:	d058      	beq.n	80072c6 <arm_max_f32+0xc6>
 8007214:	3014      	adds	r0, #20
 8007216:	46c4      	mov	ip, r8
 8007218:	2604      	movs	r6, #4
 800721a:	2400      	movs	r4, #0
 800721c:	ed10 6a04 	vldr	s12, [r0, #-16]
 8007220:	ed50 6a03 	vldr	s13, [r0, #-12]
 8007224:	ed10 7a02 	vldr	s14, [r0, #-8]
 8007228:	ed50 5a01 	vldr	s11, [r0, #-4]
 800722c:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8007230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007234:	bfc8      	it	gt
 8007236:	eef0 7a46 	vmovgt.f32	s15, s12
 800723a:	f1a6 0503 	sub.w	r5, r6, #3
 800723e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8007242:	bfc8      	it	gt
 8007244:	462c      	movgt	r4, r5
 8007246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800724a:	bf48      	it	mi
 800724c:	eef0 7a66 	vmovmi.f32	s15, s13
 8007250:	f1a6 0502 	sub.w	r5, r6, #2
 8007254:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007258:	bf48      	it	mi
 800725a:	462c      	movmi	r4, r5
 800725c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007260:	bf48      	it	mi
 8007262:	eef0 7a47 	vmovmi.f32	s15, s14
 8007266:	f106 35ff 	add.w	r5, r6, #4294967295
 800726a:	eef4 7ae5 	vcmpe.f32	s15, s11
 800726e:	bf48      	it	mi
 8007270:	462c      	movmi	r4, r5
 8007272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007276:	bf48      	it	mi
 8007278:	4634      	movmi	r4, r6
 800727a:	bf48      	it	mi
 800727c:	eef0 7a65 	vmovmi.f32	s15, s11
 8007280:	f1bc 0c01 	subs.w	ip, ip, #1
 8007284:	f100 0010 	add.w	r0, r0, #16
 8007288:	f106 0604 	add.w	r6, r6, #4
 800728c:	d1c6      	bne.n	800721c <arm_max_f32+0x1c>
 800728e:	eb0e 1e08 	add.w	lr, lr, r8, lsl #4
 8007292:	f017 0003 	ands.w	r0, r7, #3
 8007296:	d018      	beq.n	80072ca <arm_max_f32+0xca>
 8007298:	1a08      	subs	r0, r1, r0
 800729a:	ecbe 7a01 	vldmia	lr!, {s14}
 800729e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80072a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072a6:	bfc8      	it	gt
 80072a8:	4604      	movgt	r4, r0
 80072aa:	f100 0001 	add.w	r0, r0, #1
 80072ae:	bfd8      	it	le
 80072b0:	eeb0 7a67 	vmovle.f32	s14, s15
 80072b4:	4281      	cmp	r1, r0
 80072b6:	eef0 7a47 	vmov.f32	s15, s14
 80072ba:	d1ee      	bne.n	800729a <arm_max_f32+0x9a>
 80072bc:	ed82 7a00 	vstr	s14, [r2]
 80072c0:	601c      	str	r4, [r3, #0]
 80072c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072c6:	4644      	mov	r4, r8
 80072c8:	e7e3      	b.n	8007292 <arm_max_f32+0x92>
 80072ca:	eeb0 7a67 	vmov.f32	s14, s15
 80072ce:	e7f5      	b.n	80072bc <arm_max_f32+0xbc>

080072d0 <arm_rfft_fast_init_f32>:
 80072d0:	084b      	lsrs	r3, r1, #1
 80072d2:	2b80      	cmp	r3, #128	@ 0x80
 80072d4:	b410      	push	{r4}
 80072d6:	8201      	strh	r1, [r0, #16]
 80072d8:	8003      	strh	r3, [r0, #0]
 80072da:	d046      	beq.n	800736a <arm_rfft_fast_init_f32+0x9a>
 80072dc:	d916      	bls.n	800730c <arm_rfft_fast_init_f32+0x3c>
 80072de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80072e2:	d03c      	beq.n	800735e <arm_rfft_fast_init_f32+0x8e>
 80072e4:	d928      	bls.n	8007338 <arm_rfft_fast_init_f32+0x68>
 80072e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072ea:	d01f      	beq.n	800732c <arm_rfft_fast_init_f32+0x5c>
 80072ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80072f0:	d112      	bne.n	8007318 <arm_rfft_fast_init_f32+0x48>
 80072f2:	4920      	ldr	r1, [pc, #128]	@ (8007374 <arm_rfft_fast_init_f32+0xa4>)
 80072f4:	4a20      	ldr	r2, [pc, #128]	@ (8007378 <arm_rfft_fast_init_f32+0xa8>)
 80072f6:	4b21      	ldr	r3, [pc, #132]	@ (800737c <arm_rfft_fast_init_f32+0xac>)
 80072f8:	f44f 646e 	mov.w	r4, #3808	@ 0xee0
 80072fc:	8184      	strh	r4, [r0, #12]
 80072fe:	6081      	str	r1, [r0, #8]
 8007300:	6042      	str	r2, [r0, #4]
 8007302:	6143      	str	r3, [r0, #20]
 8007304:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007308:	2000      	movs	r0, #0
 800730a:	4770      	bx	lr
 800730c:	2b20      	cmp	r3, #32
 800730e:	d01c      	beq.n	800734a <arm_rfft_fast_init_f32+0x7a>
 8007310:	2b40      	cmp	r3, #64	@ 0x40
 8007312:	d006      	beq.n	8007322 <arm_rfft_fast_init_f32+0x52>
 8007314:	2b10      	cmp	r3, #16
 8007316:	d01d      	beq.n	8007354 <arm_rfft_fast_init_f32+0x84>
 8007318:	f04f 30ff 	mov.w	r0, #4294967295
 800731c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007320:	4770      	bx	lr
 8007322:	2438      	movs	r4, #56	@ 0x38
 8007324:	4916      	ldr	r1, [pc, #88]	@ (8007380 <arm_rfft_fast_init_f32+0xb0>)
 8007326:	4a17      	ldr	r2, [pc, #92]	@ (8007384 <arm_rfft_fast_init_f32+0xb4>)
 8007328:	4b17      	ldr	r3, [pc, #92]	@ (8007388 <arm_rfft_fast_init_f32+0xb8>)
 800732a:	e7e7      	b.n	80072fc <arm_rfft_fast_init_f32+0x2c>
 800732c:	f44f 64e1 	mov.w	r4, #1800	@ 0x708
 8007330:	4916      	ldr	r1, [pc, #88]	@ (800738c <arm_rfft_fast_init_f32+0xbc>)
 8007332:	4a17      	ldr	r2, [pc, #92]	@ (8007390 <arm_rfft_fast_init_f32+0xc0>)
 8007334:	4b17      	ldr	r3, [pc, #92]	@ (8007394 <arm_rfft_fast_init_f32+0xc4>)
 8007336:	e7e1      	b.n	80072fc <arm_rfft_fast_init_f32+0x2c>
 8007338:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800733c:	d1ec      	bne.n	8007318 <arm_rfft_fast_init_f32+0x48>
 800733e:	f44f 74dc 	mov.w	r4, #440	@ 0x1b8
 8007342:	4915      	ldr	r1, [pc, #84]	@ (8007398 <arm_rfft_fast_init_f32+0xc8>)
 8007344:	4a15      	ldr	r2, [pc, #84]	@ (800739c <arm_rfft_fast_init_f32+0xcc>)
 8007346:	4b16      	ldr	r3, [pc, #88]	@ (80073a0 <arm_rfft_fast_init_f32+0xd0>)
 8007348:	e7d8      	b.n	80072fc <arm_rfft_fast_init_f32+0x2c>
 800734a:	2430      	movs	r4, #48	@ 0x30
 800734c:	4915      	ldr	r1, [pc, #84]	@ (80073a4 <arm_rfft_fast_init_f32+0xd4>)
 800734e:	4a16      	ldr	r2, [pc, #88]	@ (80073a8 <arm_rfft_fast_init_f32+0xd8>)
 8007350:	4b16      	ldr	r3, [pc, #88]	@ (80073ac <arm_rfft_fast_init_f32+0xdc>)
 8007352:	e7d3      	b.n	80072fc <arm_rfft_fast_init_f32+0x2c>
 8007354:	2414      	movs	r4, #20
 8007356:	4916      	ldr	r1, [pc, #88]	@ (80073b0 <arm_rfft_fast_init_f32+0xe0>)
 8007358:	4a16      	ldr	r2, [pc, #88]	@ (80073b4 <arm_rfft_fast_init_f32+0xe4>)
 800735a:	4b17      	ldr	r3, [pc, #92]	@ (80073b8 <arm_rfft_fast_init_f32+0xe8>)
 800735c:	e7ce      	b.n	80072fc <arm_rfft_fast_init_f32+0x2c>
 800735e:	f44f 74e0 	mov.w	r4, #448	@ 0x1c0
 8007362:	4916      	ldr	r1, [pc, #88]	@ (80073bc <arm_rfft_fast_init_f32+0xec>)
 8007364:	4a16      	ldr	r2, [pc, #88]	@ (80073c0 <arm_rfft_fast_init_f32+0xf0>)
 8007366:	4b17      	ldr	r3, [pc, #92]	@ (80073c4 <arm_rfft_fast_init_f32+0xf4>)
 8007368:	e7c8      	b.n	80072fc <arm_rfft_fast_init_f32+0x2c>
 800736a:	24d0      	movs	r4, #208	@ 0xd0
 800736c:	4916      	ldr	r1, [pc, #88]	@ (80073c8 <arm_rfft_fast_init_f32+0xf8>)
 800736e:	4a17      	ldr	r2, [pc, #92]	@ (80073cc <arm_rfft_fast_init_f32+0xfc>)
 8007370:	4b17      	ldr	r3, [pc, #92]	@ (80073d0 <arm_rfft_fast_init_f32+0x100>)
 8007372:	e7c3      	b.n	80072fc <arm_rfft_fast_init_f32+0x2c>
 8007374:	08018c14 	.word	0x08018c14
 8007378:	08009e0c 	.word	0x08009e0c
 800737c:	0800ff7c 	.word	0x0800ff7c
 8007380:	0800df0c 	.word	0x0800df0c
 8007384:	0801a9d4 	.word	0x0801a9d4
 8007388:	0801cec4 	.word	0x0801cec4
 800738c:	080168fc 	.word	0x080168fc
 8007390:	080147fc 	.word	0x080147fc
 8007394:	0800df7c 	.word	0x0800df7c
 8007398:	0801cb54 	.word	0x0801cb54
 800739c:	08013f7c 	.word	0x08013f7c
 80073a0:	0801abd4 	.word	0x0801abd4
 80073a4:	080177b4 	.word	0x080177b4
 80073a8:	080167fc 	.word	0x080167fc
 80073ac:	0800de0c 	.word	0x0800de0c
 80073b0:	0801770c 	.word	0x0801770c
 80073b4:	0801477c 	.word	0x0801477c
 80073b8:	08017734 	.word	0x08017734
 80073bc:	0801b3d4 	.word	0x0801b3d4
 80073c0:	08017c14 	.word	0x08017c14
 80073c4:	0801b754 	.word	0x0801b754
 80073c8:	0801d0c4 	.word	0x0801d0c4
 80073cc:	08017814 	.word	0x08017814
 80073d0:	0801c754 	.word	0x0801c754

080073d4 <arm_rfft_fast_f32>:
 80073d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073d8:	8a06      	ldrh	r6, [r0, #16]
 80073da:	0876      	lsrs	r6, r6, #1
 80073dc:	4607      	mov	r7, r0
 80073de:	4615      	mov	r5, r2
 80073e0:	8006      	strh	r6, [r0, #0]
 80073e2:	460c      	mov	r4, r1
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d15c      	bne.n	80074a2 <arm_rfft_fast_f32+0xce>
 80073e8:	461a      	mov	r2, r3
 80073ea:	2301      	movs	r3, #1
 80073ec:	f000 fbe4 	bl	8007bb8 <arm_cfft_f32>
 80073f0:	edd4 7a00 	vldr	s15, [r4]
 80073f4:	ed94 7a01 	vldr	s14, [r4, #4]
 80073f8:	883e      	ldrh	r6, [r7, #0]
 80073fa:	6978      	ldr	r0, [r7, #20]
 80073fc:	ee37 7a07 	vadd.f32	s14, s14, s14
 8007400:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007404:	eeb6 3a00 	vmov.f32	s6, #96	@ 0x3f000000  0.5
 8007408:	ee77 6a87 	vadd.f32	s13, s15, s14
 800740c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007410:	3e01      	subs	r6, #1
 8007412:	ee26 7a83 	vmul.f32	s14, s13, s6
 8007416:	ee67 7a83 	vmul.f32	s15, s15, s6
 800741a:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 800741e:	ed85 7a00 	vstr	s14, [r5]
 8007422:	edc5 7a01 	vstr	s15, [r5, #4]
 8007426:	3010      	adds	r0, #16
 8007428:	f105 0210 	add.w	r2, r5, #16
 800742c:	3b08      	subs	r3, #8
 800742e:	f104 0110 	add.w	r1, r4, #16
 8007432:	ed93 7a02 	vldr	s14, [r3, #8]
 8007436:	ed51 6a02 	vldr	s13, [r1, #-8]
 800743a:	ed10 6a02 	vldr	s12, [r0, #-8]
 800743e:	edd3 3a03 	vldr	s7, [r3, #12]
 8007442:	ed11 5a01 	vldr	s10, [r1, #-4]
 8007446:	ed50 5a01 	vldr	s11, [r0, #-4]
 800744a:	ee77 7a66 	vsub.f32	s15, s14, s13
 800744e:	ee77 4a26 	vadd.f32	s9, s14, s13
 8007452:	ee33 4a85 	vadd.f32	s8, s7, s10
 8007456:	ee66 6a27 	vmul.f32	s13, s12, s15
 800745a:	ee25 7aa7 	vmul.f32	s14, s11, s15
 800745e:	ee35 5a63 	vsub.f32	s10, s10, s7
 8007462:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8007466:	ee77 7a05 	vadd.f32	s15, s14, s10
 800746a:	ee26 6a04 	vmul.f32	s12, s12, s8
 800746e:	ee65 5a84 	vmul.f32	s11, s11, s8
 8007472:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8007476:	ee36 7aa5 	vadd.f32	s14, s13, s11
 800747a:	ee67 7a83 	vmul.f32	s15, s15, s6
 800747e:	ee27 7a03 	vmul.f32	s14, s14, s6
 8007482:	3e01      	subs	r6, #1
 8007484:	ed02 7a02 	vstr	s14, [r2, #-8]
 8007488:	ed42 7a01 	vstr	s15, [r2, #-4]
 800748c:	f1a3 0308 	sub.w	r3, r3, #8
 8007490:	f101 0108 	add.w	r1, r1, #8
 8007494:	f100 0008 	add.w	r0, r0, #8
 8007498:	f102 0208 	add.w	r2, r2, #8
 800749c:	d1c9      	bne.n	8007432 <arm_rfft_fast_f32+0x5e>
 800749e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074a2:	edd1 7a00 	vldr	s15, [r1]
 80074a6:	edd1 6a01 	vldr	s13, [r1, #4]
 80074aa:	6941      	ldr	r1, [r0, #20]
 80074ac:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80074b0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80074b4:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 80074b8:	ee27 7a23 	vmul.f32	s14, s14, s7
 80074bc:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80074c0:	3e01      	subs	r6, #1
 80074c2:	ed82 7a00 	vstr	s14, [r2]
 80074c6:	edc2 7a01 	vstr	s15, [r2, #4]
 80074ca:	00f0      	lsls	r0, r6, #3
 80074cc:	b3ee      	cbz	r6, 800754a <arm_rfft_fast_f32+0x176>
 80074ce:	3808      	subs	r0, #8
 80074d0:	f101 0e10 	add.w	lr, r1, #16
 80074d4:	4420      	add	r0, r4
 80074d6:	f104 0110 	add.w	r1, r4, #16
 80074da:	f102 0c10 	add.w	ip, r2, #16
 80074de:	ed90 7a02 	vldr	s14, [r0, #8]
 80074e2:	ed51 6a02 	vldr	s13, [r1, #-8]
 80074e6:	ed1e 6a02 	vldr	s12, [lr, #-8]
 80074ea:	ed90 4a03 	vldr	s8, [r0, #12]
 80074ee:	ed11 5a01 	vldr	s10, [r1, #-4]
 80074f2:	ed5e 5a01 	vldr	s11, [lr, #-4]
 80074f6:	ee76 7ac7 	vsub.f32	s15, s13, s14
 80074fa:	ee74 4a05 	vadd.f32	s9, s8, s10
 80074fe:	ee26 3a27 	vmul.f32	s6, s12, s15
 8007502:	ee77 6a26 	vadd.f32	s13, s14, s13
 8007506:	ee35 5a44 	vsub.f32	s10, s10, s8
 800750a:	ee25 7aa7 	vmul.f32	s14, s11, s15
 800750e:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8007512:	ee77 7a05 	vadd.f32	s15, s14, s10
 8007516:	ee26 6a24 	vmul.f32	s12, s12, s9
 800751a:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800751e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8007522:	ee36 7ae5 	vsub.f32	s14, s13, s11
 8007526:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800752a:	ee27 7a23 	vmul.f32	s14, s14, s7
 800752e:	3e01      	subs	r6, #1
 8007530:	ed0c 7a02 	vstr	s14, [ip, #-8]
 8007534:	ed4c 7a01 	vstr	s15, [ip, #-4]
 8007538:	f1a0 0008 	sub.w	r0, r0, #8
 800753c:	f101 0108 	add.w	r1, r1, #8
 8007540:	f10e 0e08 	add.w	lr, lr, #8
 8007544:	f10c 0c08 	add.w	ip, ip, #8
 8007548:	d1c9      	bne.n	80074de <arm_rfft_fast_f32+0x10a>
 800754a:	461a      	mov	r2, r3
 800754c:	4629      	mov	r1, r5
 800754e:	4638      	mov	r0, r7
 8007550:	2301      	movs	r3, #1
 8007552:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007556:	f000 bb2f 	b.w	8007bb8 <arm_cfft_f32>
 800755a:	bf00      	nop

0800755c <arm_cfft_radix8by2_f32>:
 800755c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007560:	ed2d 8b08 	vpush	{d8-d11}
 8007564:	4607      	mov	r7, r0
 8007566:	4608      	mov	r0, r1
 8007568:	f8b7 e000 	ldrh.w	lr, [r7]
 800756c:	687a      	ldr	r2, [r7, #4]
 800756e:	ea4f 015e 	mov.w	r1, lr, lsr #1
 8007572:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 8007576:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 800757a:	f000 80b0 	beq.w	80076de <arm_cfft_radix8by2_f32+0x182>
 800757e:	008b      	lsls	r3, r1, #2
 8007580:	3310      	adds	r3, #16
 8007582:	18c6      	adds	r6, r0, r3
 8007584:	3210      	adds	r2, #16
 8007586:	4443      	add	r3, r8
 8007588:	f100 0510 	add.w	r5, r0, #16
 800758c:	f108 0410 	add.w	r4, r8, #16
 8007590:	ed54 1a04 	vldr	s3, [r4, #-16]
 8007594:	ed54 6a03 	vldr	s13, [r4, #-12]
 8007598:	ed13 4a04 	vldr	s8, [r3, #-16]
 800759c:	ed53 3a03 	vldr	s7, [r3, #-12]
 80075a0:	ed53 5a02 	vldr	s11, [r3, #-8]
 80075a4:	ed13 5a01 	vldr	s10, [r3, #-4]
 80075a8:	ed14 0a02 	vldr	s0, [r4, #-8]
 80075ac:	ed54 7a01 	vldr	s15, [r4, #-4]
 80075b0:	ed16 2a04 	vldr	s4, [r6, #-16]
 80075b4:	ed56 2a03 	vldr	s5, [r6, #-12]
 80075b8:	ed15 6a03 	vldr	s12, [r5, #-12]
 80075bc:	ed15 7a01 	vldr	s14, [r5, #-4]
 80075c0:	ed15 3a04 	vldr	s6, [r5, #-16]
 80075c4:	ed56 0a02 	vldr	s1, [r6, #-8]
 80075c8:	ed16 1a01 	vldr	s2, [r6, #-4]
 80075cc:	ed55 4a02 	vldr	s9, [r5, #-8]
 80075d0:	ee73 ba21 	vadd.f32	s23, s6, s3
 80075d4:	ee36 ba26 	vadd.f32	s22, s12, s13
 80075d8:	ee37 aa27 	vadd.f32	s20, s14, s15
 80075dc:	ee72 9a04 	vadd.f32	s19, s4, s8
 80075e0:	ee32 9aa3 	vadd.f32	s18, s5, s7
 80075e4:	ee31 8a05 	vadd.f32	s16, s2, s10
 80075e8:	ee74 aa80 	vadd.f32	s21, s9, s0
 80075ec:	ee70 8aa5 	vadd.f32	s17, s1, s11
 80075f0:	ed45 ba04 	vstr	s23, [r5, #-16]
 80075f4:	ed05 ba03 	vstr	s22, [r5, #-12]
 80075f8:	ed45 aa02 	vstr	s21, [r5, #-8]
 80075fc:	ed05 aa01 	vstr	s20, [r5, #-4]
 8007600:	ed06 8a01 	vstr	s16, [r6, #-4]
 8007604:	ed46 9a04 	vstr	s19, [r6, #-16]
 8007608:	ed06 9a03 	vstr	s18, [r6, #-12]
 800760c:	ed46 8a02 	vstr	s17, [r6, #-8]
 8007610:	ee76 6a66 	vsub.f32	s13, s12, s13
 8007614:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8007618:	ed12 6a03 	vldr	s12, [r2, #-12]
 800761c:	ed52 2a04 	vldr	s5, [r2, #-16]
 8007620:	ee33 3a61 	vsub.f32	s6, s6, s3
 8007624:	ee34 4a42 	vsub.f32	s8, s8, s4
 8007628:	ee26 8a86 	vmul.f32	s16, s13, s12
 800762c:	ee24 2a06 	vmul.f32	s4, s8, s12
 8007630:	ee63 1a22 	vmul.f32	s3, s6, s5
 8007634:	ee24 4a22 	vmul.f32	s8, s8, s5
 8007638:	ee23 3a06 	vmul.f32	s6, s6, s12
 800763c:	ee66 6aa2 	vmul.f32	s13, s13, s5
 8007640:	ee23 6a86 	vmul.f32	s12, s7, s12
 8007644:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8007648:	ee36 6a04 	vadd.f32	s12, s12, s8
 800764c:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8007650:	ee72 3a63 	vsub.f32	s7, s4, s7
 8007654:	ee71 2a88 	vadd.f32	s5, s3, s16
 8007658:	ed44 6a03 	vstr	s13, [r4, #-12]
 800765c:	ed44 2a04 	vstr	s5, [r4, #-16]
 8007660:	ed43 3a04 	vstr	s7, [r3, #-16]
 8007664:	ed03 6a03 	vstr	s12, [r3, #-12]
 8007668:	ee77 7a67 	vsub.f32	s15, s14, s15
 800766c:	ee75 6ae0 	vsub.f32	s13, s11, s1
 8007670:	ed12 7a01 	vldr	s14, [r2, #-4]
 8007674:	ed52 5a02 	vldr	s11, [r2, #-8]
 8007678:	ee35 6a41 	vsub.f32	s12, s10, s2
 800767c:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8007680:	ee67 3a87 	vmul.f32	s7, s15, s14
 8007684:	ee26 5a87 	vmul.f32	s10, s13, s14
 8007688:	ee24 4aa5 	vmul.f32	s8, s9, s11
 800768c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007690:	ee64 4a87 	vmul.f32	s9, s9, s14
 8007694:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8007698:	ee26 7a07 	vmul.f32	s14, s12, s14
 800769c:	ee26 6a25 	vmul.f32	s12, s12, s11
 80076a0:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80076a4:	ee74 5a23 	vadd.f32	s11, s8, s7
 80076a8:	ee35 6a46 	vsub.f32	s12, s10, s12
 80076ac:	ee37 7a26 	vadd.f32	s14, s14, s13
 80076b0:	f1be 0e01 	subs.w	lr, lr, #1
 80076b4:	ed44 5a02 	vstr	s11, [r4, #-8]
 80076b8:	f105 0510 	add.w	r5, r5, #16
 80076bc:	ed44 7a01 	vstr	s15, [r4, #-4]
 80076c0:	f106 0610 	add.w	r6, r6, #16
 80076c4:	ed03 6a02 	vstr	s12, [r3, #-8]
 80076c8:	ed03 7a01 	vstr	s14, [r3, #-4]
 80076cc:	f102 0210 	add.w	r2, r2, #16
 80076d0:	f104 0410 	add.w	r4, r4, #16
 80076d4:	f103 0310 	add.w	r3, r3, #16
 80076d8:	f47f af5a 	bne.w	8007590 <arm_cfft_radix8by2_f32+0x34>
 80076dc:	687a      	ldr	r2, [r7, #4]
 80076de:	b28c      	uxth	r4, r1
 80076e0:	4621      	mov	r1, r4
 80076e2:	2302      	movs	r3, #2
 80076e4:	f000 fbca 	bl	8007e7c <arm_radix8_butterfly_f32>
 80076e8:	ecbd 8b08 	vpop	{d8-d11}
 80076ec:	4621      	mov	r1, r4
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	4640      	mov	r0, r8
 80076f2:	2302      	movs	r3, #2
 80076f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076f8:	f000 bbc0 	b.w	8007e7c <arm_radix8_butterfly_f32>

080076fc <arm_cfft_radix8by4_f32>:
 80076fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007700:	ed2d 8b0a 	vpush	{d8-d12}
 8007704:	8802      	ldrh	r2, [r0, #0]
 8007706:	ed91 6a00 	vldr	s12, [r1]
 800770a:	b08f      	sub	sp, #60	@ 0x3c
 800770c:	460f      	mov	r7, r1
 800770e:	0852      	lsrs	r2, r2, #1
 8007710:	6841      	ldr	r1, [r0, #4]
 8007712:	900c      	str	r0, [sp, #48]	@ 0x30
 8007714:	0093      	lsls	r3, r2, #2
 8007716:	4638      	mov	r0, r7
 8007718:	4418      	add	r0, r3
 800771a:	4606      	mov	r6, r0
 800771c:	9009      	str	r0, [sp, #36]	@ 0x24
 800771e:	4418      	add	r0, r3
 8007720:	edd0 6a00 	vldr	s13, [r0]
 8007724:	ed96 4a00 	vldr	s8, [r6]
 8007728:	edd6 2a01 	vldr	s5, [r6, #4]
 800772c:	edd0 7a01 	vldr	s15, [r0, #4]
 8007730:	900a      	str	r0, [sp, #40]	@ 0x28
 8007732:	ee76 5a26 	vadd.f32	s11, s12, s13
 8007736:	4604      	mov	r4, r0
 8007738:	4625      	mov	r5, r4
 800773a:	441c      	add	r4, r3
 800773c:	edd4 4a00 	vldr	s9, [r4]
 8007740:	ed97 7a01 	vldr	s14, [r7, #4]
 8007744:	ed94 3a01 	vldr	s6, [r4, #4]
 8007748:	9401      	str	r4, [sp, #4]
 800774a:	ee35 5a84 	vadd.f32	s10, s11, s8
 800774e:	4630      	mov	r0, r6
 8007750:	ee35 5a24 	vadd.f32	s10, s10, s9
 8007754:	463e      	mov	r6, r7
 8007756:	ee15 ea10 	vmov	lr, s10
 800775a:	ee76 6a66 	vsub.f32	s13, s12, s13
 800775e:	f846 eb08 	str.w	lr, [r6], #8
 8007762:	ee37 6a27 	vadd.f32	s12, s14, s15
 8007766:	ed90 5a01 	vldr	s10, [r0, #4]
 800776a:	9605      	str	r6, [sp, #20]
 800776c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007770:	9e01      	ldr	r6, [sp, #4]
 8007772:	9707      	str	r7, [sp, #28]
 8007774:	ee76 3aa2 	vadd.f32	s7, s13, s5
 8007778:	ed96 2a01 	vldr	s4, [r6, #4]
 800777c:	ee36 7a05 	vadd.f32	s14, s12, s10
 8007780:	ee75 5ac4 	vsub.f32	s11, s11, s8
 8007784:	ee37 5ac4 	vsub.f32	s10, s15, s8
 8007788:	ee77 7a84 	vadd.f32	s15, s15, s8
 800778c:	ee33 4ac3 	vsub.f32	s8, s7, s6
 8007790:	4604      	mov	r4, r0
 8007792:	46a3      	mov	fp, r4
 8007794:	ee37 7a02 	vadd.f32	s14, s14, s4
 8007798:	ee35 5a24 	vadd.f32	s10, s10, s9
 800779c:	ee14 8a10 	vmov	r8, s8
 80077a0:	46a4      	mov	ip, r4
 80077a2:	ee75 5ae4 	vsub.f32	s11, s11, s9
 80077a6:	ed87 7a01 	vstr	s14, [r7, #4]
 80077aa:	f84b 8b08 	str.w	r8, [fp], #8
 80077ae:	f1ac 0704 	sub.w	r7, ip, #4
 80077b2:	ed8c 5a01 	vstr	s10, [ip, #4]
 80077b6:	f101 0c08 	add.w	ip, r1, #8
 80077ba:	462c      	mov	r4, r5
 80077bc:	f8cd c010 	str.w	ip, [sp, #16]
 80077c0:	ee15 ca90 	vmov	ip, s11
 80077c4:	ee36 6a62 	vsub.f32	s12, s12, s5
 80077c8:	f844 cb08 	str.w	ip, [r4], #8
 80077cc:	ee76 6ae2 	vsub.f32	s13, s13, s5
 80077d0:	ee36 6a43 	vsub.f32	s12, s12, s6
 80077d4:	9406      	str	r4, [sp, #24]
 80077d6:	ee76 6a83 	vadd.f32	s13, s13, s6
 80077da:	f101 0410 	add.w	r4, r1, #16
 80077de:	0852      	lsrs	r2, r2, #1
 80077e0:	9402      	str	r4, [sp, #8]
 80077e2:	ed85 6a01 	vstr	s12, [r5, #4]
 80077e6:	462c      	mov	r4, r5
 80077e8:	f101 0518 	add.w	r5, r1, #24
 80077ec:	920b      	str	r2, [sp, #44]	@ 0x2c
 80077ee:	46b2      	mov	sl, r6
 80077f0:	9503      	str	r5, [sp, #12]
 80077f2:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80077f6:	3a02      	subs	r2, #2
 80077f8:	ee16 5a90 	vmov	r5, s13
 80077fc:	46b6      	mov	lr, r6
 80077fe:	4630      	mov	r0, r6
 8007800:	0852      	lsrs	r2, r2, #1
 8007802:	f84a 5b08 	str.w	r5, [sl], #8
 8007806:	f1a0 0604 	sub.w	r6, r0, #4
 800780a:	edce 7a01 	vstr	s15, [lr, #4]
 800780e:	9208      	str	r2, [sp, #32]
 8007810:	f000 8130 	beq.w	8007a74 <arm_cfft_radix8by4_f32+0x378>
 8007814:	4691      	mov	r9, r2
 8007816:	9a07      	ldr	r2, [sp, #28]
 8007818:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800781c:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
 8007820:	3b08      	subs	r3, #8
 8007822:	f102 0510 	add.w	r5, r2, #16
 8007826:	f101 0c20 	add.w	ip, r1, #32
 800782a:	f1a4 020c 	sub.w	r2, r4, #12
 800782e:	f101 0e30 	add.w	lr, r1, #48	@ 0x30
 8007832:	4433      	add	r3, r6
 8007834:	3410      	adds	r4, #16
 8007836:	4650      	mov	r0, sl
 8007838:	4659      	mov	r1, fp
 800783a:	ed55 3a02 	vldr	s7, [r5, #-8]
 800783e:	ed14 5a02 	vldr	s10, [r4, #-8]
 8007842:	ed91 7a00 	vldr	s14, [r1]
 8007846:	edd0 7a00 	vldr	s15, [r0]
 800784a:	ed54 5a01 	vldr	s11, [r4, #-4]
 800784e:	ed15 4a01 	vldr	s8, [r5, #-4]
 8007852:	edd0 6a01 	vldr	s13, [r0, #4]
 8007856:	ed91 6a01 	vldr	s12, [r1, #4]
 800785a:	ee33 8a85 	vadd.f32	s16, s7, s10
 800785e:	ee34 0a25 	vadd.f32	s0, s8, s11
 8007862:	ee78 4a07 	vadd.f32	s9, s16, s14
 8007866:	ee74 5a65 	vsub.f32	s11, s8, s11
 800786a:	ee74 4aa7 	vadd.f32	s9, s9, s15
 800786e:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8007872:	ed45 4a02 	vstr	s9, [r5, #-8]
 8007876:	edd1 4a01 	vldr	s9, [r1, #4]
 800787a:	ed90 4a01 	vldr	s8, [r0, #4]
 800787e:	ee70 4a24 	vadd.f32	s9, s0, s9
 8007882:	ee75 aa06 	vadd.f32	s21, s10, s12
 8007886:	ee74 4a84 	vadd.f32	s9, s9, s8
 800788a:	ee35 aac7 	vsub.f32	s20, s11, s14
 800788e:	ed45 4a01 	vstr	s9, [r5, #-4]
 8007892:	edd6 1a00 	vldr	s3, [r6]
 8007896:	edd7 0a00 	vldr	s1, [r7]
 800789a:	ed92 4a02 	vldr	s8, [r2, #8]
 800789e:	edd3 3a02 	vldr	s7, [r3, #8]
 80078a2:	ed93 2a01 	vldr	s4, [r3, #4]
 80078a6:	ed16 1a01 	vldr	s2, [r6, #-4]
 80078aa:	edd2 2a01 	vldr	s5, [r2, #4]
 80078ae:	ed57 9a01 	vldr	s19, [r7, #-4]
 80078b2:	ee70 4aa1 	vadd.f32	s9, s1, s3
 80078b6:	ee39 3a81 	vadd.f32	s6, s19, s2
 80078ba:	ee74 8a84 	vadd.f32	s17, s9, s8
 80078be:	ee70 1ae1 	vsub.f32	s3, s1, s3
 80078c2:	ee78 8aa3 	vadd.f32	s17, s17, s7
 80078c6:	ee7a aae6 	vsub.f32	s21, s21, s13
 80078ca:	ee18 aa90 	vmov	sl, s17
 80078ce:	f847 a908 	str.w	sl, [r7], #-8
 80078d2:	edd2 8a01 	vldr	s17, [r2, #4]
 80078d6:	ed93 9a01 	vldr	s18, [r3, #4]
 80078da:	ee73 8a28 	vadd.f32	s17, s6, s17
 80078de:	ee3a aa27 	vadd.f32	s20, s20, s15
 80078e2:	ee78 8a89 	vadd.f32	s17, s17, s18
 80078e6:	ee74 0a63 	vsub.f32	s1, s8, s7
 80078ea:	edc7 8a01 	vstr	s17, [r7, #4]
 80078ee:	ed18 ba02 	vldr	s22, [r8, #-8]
 80078f2:	ed58 8a01 	vldr	s17, [r8, #-4]
 80078f6:	ee39 1ac1 	vsub.f32	s2, s19, s2
 80078fa:	ee6a ba28 	vmul.f32	s23, s20, s17
 80078fe:	ee2a ca8b 	vmul.f32	s24, s21, s22
 8007902:	ee71 9ae2 	vsub.f32	s19, s3, s5
 8007906:	ee31 9a20 	vadd.f32	s18, s2, s1
 800790a:	ee79 9a82 	vadd.f32	s19, s19, s4
 800790e:	ee3c ca2b 	vadd.f32	s24, s24, s23
 8007912:	ee6a aaa8 	vmul.f32	s21, s21, s17
 8007916:	ee69 baa8 	vmul.f32	s23, s19, s17
 800791a:	ee2a aa0b 	vmul.f32	s20, s20, s22
 800791e:	ee69 9a8b 	vmul.f32	s19, s19, s22
 8007922:	ee69 8a28 	vmul.f32	s17, s18, s17
 8007926:	ee29 ba0b 	vmul.f32	s22, s18, s22
 800792a:	ee1c aa10 	vmov	sl, s24
 800792e:	ee78 8aa9 	vadd.f32	s17, s17, s19
 8007932:	f841 ab08 	str.w	sl, [r1], #8
 8007936:	ee3a aa6a 	vsub.f32	s20, s20, s21
 800793a:	ee3b bacb 	vsub.f32	s22, s23, s22
 800793e:	ee34 4ac4 	vsub.f32	s8, s9, s8
 8007942:	ee33 3a62 	vsub.f32	s6, s6, s5
 8007946:	ed01 aa01 	vstr	s20, [r1, #-4]
 800794a:	edc2 8a01 	vstr	s17, [r2, #4]
 800794e:	ed82 ba02 	vstr	s22, [r2, #8]
 8007952:	ed5c 4a04 	vldr	s9, [ip, #-16]
 8007956:	ee74 3a63 	vsub.f32	s7, s8, s7
 800795a:	ee38 8a47 	vsub.f32	s16, s16, s14
 800795e:	ed1c 4a03 	vldr	s8, [ip, #-12]
 8007962:	ee30 0a46 	vsub.f32	s0, s0, s12
 8007966:	ee33 3a42 	vsub.f32	s6, s6, s4
 800796a:	ee38 8a67 	vsub.f32	s16, s16, s15
 800796e:	ee30 0a66 	vsub.f32	s0, s0, s13
 8007972:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 8007976:	ee63 8a04 	vmul.f32	s17, s6, s8
 800797a:	ee28 aa24 	vmul.f32	s20, s16, s9
 800797e:	ee60 9a04 	vmul.f32	s19, s0, s8
 8007982:	ee28 8a04 	vmul.f32	s16, s16, s8
 8007986:	ee20 0a24 	vmul.f32	s0, s0, s9
 800798a:	ee63 3a84 	vmul.f32	s7, s7, s8
 800798e:	ee39 4a68 	vsub.f32	s8, s18, s17
 8007992:	ee7a 9a29 	vadd.f32	s19, s20, s19
 8007996:	ee14 aa10 	vmov	sl, s8
 800799a:	ee30 0a48 	vsub.f32	s0, s0, s16
 800799e:	ee63 4a24 	vmul.f32	s9, s6, s9
 80079a2:	ed44 9a02 	vstr	s19, [r4, #-8]
 80079a6:	ee73 3ae4 	vsub.f32	s7, s7, s9
 80079aa:	ed04 0a01 	vstr	s0, [r4, #-4]
 80079ae:	f846 a908 	str.w	sl, [r6], #-8
 80079b2:	ee35 6a46 	vsub.f32	s12, s10, s12
 80079b6:	ee35 7a87 	vadd.f32	s14, s11, s14
 80079ba:	edc6 3a01 	vstr	s7, [r6, #4]
 80079be:	ee76 6a26 	vadd.f32	s13, s12, s13
 80079c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80079c6:	ed1e 6a05 	vldr	s12, [lr, #-20]	@ 0xffffffec
 80079ca:	ed1e 7a06 	vldr	s14, [lr, #-24]	@ 0xffffffe8
 80079ce:	ee67 5a86 	vmul.f32	s11, s15, s12
 80079d2:	ee26 5a87 	vmul.f32	s10, s13, s14
 80079d6:	ee72 2a62 	vsub.f32	s5, s4, s5
 80079da:	ee30 1ac1 	vsub.f32	s2, s1, s2
 80079de:	ee72 2ae1 	vsub.f32	s5, s5, s3
 80079e2:	ee75 5a25 	vadd.f32	s11, s10, s11
 80079e6:	ee62 0a86 	vmul.f32	s1, s5, s12
 80079ea:	ee66 6a86 	vmul.f32	s13, s13, s12
 80079ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80079f2:	ee21 6a06 	vmul.f32	s12, s2, s12
 80079f6:	ee62 2a87 	vmul.f32	s5, s5, s14
 80079fa:	ee21 1a07 	vmul.f32	s2, s2, s14
 80079fe:	ee15 aa90 	vmov	sl, s11
 8007a02:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007a06:	f840 ab08 	str.w	sl, [r0], #8
 8007a0a:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8007a0e:	ee76 2a22 	vadd.f32	s5, s12, s5
 8007a12:	f1b9 0901 	subs.w	r9, r9, #1
 8007a16:	ed40 7a01 	vstr	s15, [r0, #-4]
 8007a1a:	f105 0508 	add.w	r5, r5, #8
 8007a1e:	ed83 1a02 	vstr	s2, [r3, #8]
 8007a22:	edc3 2a01 	vstr	s5, [r3, #4]
 8007a26:	f108 0808 	add.w	r8, r8, #8
 8007a2a:	f1a2 0208 	sub.w	r2, r2, #8
 8007a2e:	f10c 0c10 	add.w	ip, ip, #16
 8007a32:	f104 0408 	add.w	r4, r4, #8
 8007a36:	f10e 0e18 	add.w	lr, lr, #24
 8007a3a:	f1a3 0308 	sub.w	r3, r3, #8
 8007a3e:	f47f aefc 	bne.w	800783a <arm_cfft_radix8by4_f32+0x13e>
 8007a42:	9908      	ldr	r1, [sp, #32]
 8007a44:	9802      	ldr	r0, [sp, #8]
 8007a46:	f8dd a034 	ldr.w	sl, [sp, #52]	@ 0x34
 8007a4a:	00cb      	lsls	r3, r1, #3
 8007a4c:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8007a50:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8007a54:	9102      	str	r1, [sp, #8]
 8007a56:	9905      	ldr	r1, [sp, #20]
 8007a58:	4419      	add	r1, r3
 8007a5a:	9105      	str	r1, [sp, #20]
 8007a5c:	9904      	ldr	r1, [sp, #16]
 8007a5e:	4419      	add	r1, r3
 8007a60:	9104      	str	r1, [sp, #16]
 8007a62:	9906      	ldr	r1, [sp, #24]
 8007a64:	449b      	add	fp, r3
 8007a66:	4419      	add	r1, r3
 8007a68:	449a      	add	sl, r3
 8007a6a:	9b03      	ldr	r3, [sp, #12]
 8007a6c:	9106      	str	r1, [sp, #24]
 8007a6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a72:	9303      	str	r3, [sp, #12]
 8007a74:	9a05      	ldr	r2, [sp, #20]
 8007a76:	9806      	ldr	r0, [sp, #24]
 8007a78:	ed92 4a00 	vldr	s8, [r2]
 8007a7c:	ed90 7a00 	vldr	s14, [r0]
 8007a80:	ed9b 3a00 	vldr	s6, [fp]
 8007a84:	edda 3a00 	vldr	s7, [sl]
 8007a88:	edd2 4a01 	vldr	s9, [r2, #4]
 8007a8c:	edd0 6a01 	vldr	s13, [r0, #4]
 8007a90:	ed9a 2a01 	vldr	s4, [sl, #4]
 8007a94:	eddb 7a01 	vldr	s15, [fp, #4]
 8007a98:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 8007a9c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007a9e:	ee34 6a07 	vadd.f32	s12, s8, s14
 8007aa2:	ee74 5aa6 	vadd.f32	s11, s9, s13
 8007aa6:	ee36 5a03 	vadd.f32	s10, s12, s6
 8007aaa:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8007aae:	ee35 5a23 	vadd.f32	s10, s10, s7
 8007ab2:	ee34 7a47 	vsub.f32	s14, s8, s14
 8007ab6:	ed82 5a00 	vstr	s10, [r2]
 8007aba:	ed9b 5a01 	vldr	s10, [fp, #4]
 8007abe:	edda 4a01 	vldr	s9, [sl, #4]
 8007ac2:	ee35 5a85 	vadd.f32	s10, s11, s10
 8007ac6:	ee37 4a27 	vadd.f32	s8, s14, s15
 8007aca:	ee35 5a24 	vadd.f32	s10, s10, s9
 8007ace:	ee76 4ac3 	vsub.f32	s9, s13, s6
 8007ad2:	ed82 5a01 	vstr	s10, [r2, #4]
 8007ad6:	9a04      	ldr	r2, [sp, #16]
 8007ad8:	ee34 5aa3 	vadd.f32	s10, s9, s7
 8007adc:	edd2 1a00 	vldr	s3, [r2]
 8007ae0:	edd2 2a01 	vldr	s5, [r2, #4]
 8007ae4:	9a02      	ldr	r2, [sp, #8]
 8007ae6:	ee34 4a42 	vsub.f32	s8, s8, s4
 8007aea:	ee36 6a43 	vsub.f32	s12, s12, s6
 8007aee:	ee64 4a21 	vmul.f32	s9, s8, s3
 8007af2:	ee24 4a22 	vmul.f32	s8, s8, s5
 8007af6:	ee65 2a22 	vmul.f32	s5, s10, s5
 8007afa:	ee25 5a21 	vmul.f32	s10, s10, s3
 8007afe:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8007b02:	ee35 5a44 	vsub.f32	s10, s10, s8
 8007b06:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8007b0a:	edcb 2a00 	vstr	s5, [fp]
 8007b0e:	ed8b 5a01 	vstr	s10, [fp, #4]
 8007b12:	ed92 4a01 	vldr	s8, [r2, #4]
 8007b16:	ed92 5a00 	vldr	s10, [r2]
 8007b1a:	9a03      	ldr	r2, [sp, #12]
 8007b1c:	ee36 6a63 	vsub.f32	s12, s12, s7
 8007b20:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8007b24:	ee66 4a05 	vmul.f32	s9, s12, s10
 8007b28:	ee25 5a85 	vmul.f32	s10, s11, s10
 8007b2c:	ee26 6a04 	vmul.f32	s12, s12, s8
 8007b30:	ee65 5a84 	vmul.f32	s11, s11, s8
 8007b34:	ee35 6a46 	vsub.f32	s12, s10, s12
 8007b38:	ee74 5aa5 	vadd.f32	s11, s9, s11
 8007b3c:	ee76 6a83 	vadd.f32	s13, s13, s6
 8007b40:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007b44:	ed80 6a01 	vstr	s12, [r0, #4]
 8007b48:	edc0 5a00 	vstr	s11, [r0]
 8007b4c:	edd2 5a01 	vldr	s11, [r2, #4]
 8007b50:	9807      	ldr	r0, [sp, #28]
 8007b52:	ee77 7a02 	vadd.f32	s15, s14, s4
 8007b56:	ee36 7ae3 	vsub.f32	s14, s13, s7
 8007b5a:	edd2 6a00 	vldr	s13, [r2]
 8007b5e:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8007b62:	ee67 6a26 	vmul.f32	s13, s14, s13
 8007b66:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007b6a:	ee27 7a25 	vmul.f32	s14, s14, s11
 8007b6e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007b72:	ee36 7a07 	vadd.f32	s14, s12, s14
 8007b76:	edca 7a01 	vstr	s15, [sl, #4]
 8007b7a:	ed8a 7a00 	vstr	s14, [sl]
 8007b7e:	6872      	ldr	r2, [r6, #4]
 8007b80:	4621      	mov	r1, r4
 8007b82:	2304      	movs	r3, #4
 8007b84:	f000 f97a 	bl	8007e7c <arm_radix8_butterfly_f32>
 8007b88:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007b8a:	6872      	ldr	r2, [r6, #4]
 8007b8c:	4621      	mov	r1, r4
 8007b8e:	2304      	movs	r3, #4
 8007b90:	f000 f974 	bl	8007e7c <arm_radix8_butterfly_f32>
 8007b94:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007b96:	6872      	ldr	r2, [r6, #4]
 8007b98:	4621      	mov	r1, r4
 8007b9a:	2304      	movs	r3, #4
 8007b9c:	f000 f96e 	bl	8007e7c <arm_radix8_butterfly_f32>
 8007ba0:	6872      	ldr	r2, [r6, #4]
 8007ba2:	9801      	ldr	r0, [sp, #4]
 8007ba4:	4621      	mov	r1, r4
 8007ba6:	2304      	movs	r3, #4
 8007ba8:	b00f      	add	sp, #60	@ 0x3c
 8007baa:	ecbd 8b0a 	vpop	{d8-d12}
 8007bae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bb2:	f000 b963 	b.w	8007e7c <arm_radix8_butterfly_f32>
 8007bb6:	bf00      	nop

08007bb8 <arm_cfft_f32>:
 8007bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bbc:	2a01      	cmp	r2, #1
 8007bbe:	4606      	mov	r6, r0
 8007bc0:	4617      	mov	r7, r2
 8007bc2:	460c      	mov	r4, r1
 8007bc4:	4698      	mov	r8, r3
 8007bc6:	8805      	ldrh	r5, [r0, #0]
 8007bc8:	d054      	beq.n	8007c74 <arm_cfft_f32+0xbc>
 8007bca:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8007bce:	d04c      	beq.n	8007c6a <arm_cfft_f32+0xb2>
 8007bd0:	d916      	bls.n	8007c00 <arm_cfft_f32+0x48>
 8007bd2:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 8007bd6:	d01a      	beq.n	8007c0e <arm_cfft_f32+0x56>
 8007bd8:	d95c      	bls.n	8007c94 <arm_cfft_f32+0xdc>
 8007bda:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 8007bde:	d044      	beq.n	8007c6a <arm_cfft_f32+0xb2>
 8007be0:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8007be4:	d105      	bne.n	8007bf2 <arm_cfft_f32+0x3a>
 8007be6:	2301      	movs	r3, #1
 8007be8:	6872      	ldr	r2, [r6, #4]
 8007bea:	4629      	mov	r1, r5
 8007bec:	4620      	mov	r0, r4
 8007bee:	f000 f945 	bl	8007e7c <arm_radix8_butterfly_f32>
 8007bf2:	f1b8 0f00 	cmp.w	r8, #0
 8007bf6:	d111      	bne.n	8007c1c <arm_cfft_f32+0x64>
 8007bf8:	2f01      	cmp	r7, #1
 8007bfa:	d016      	beq.n	8007c2a <arm_cfft_f32+0x72>
 8007bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c00:	2d20      	cmp	r5, #32
 8007c02:	d032      	beq.n	8007c6a <arm_cfft_f32+0xb2>
 8007c04:	d94a      	bls.n	8007c9c <arm_cfft_f32+0xe4>
 8007c06:	2d40      	cmp	r5, #64	@ 0x40
 8007c08:	d0ed      	beq.n	8007be6 <arm_cfft_f32+0x2e>
 8007c0a:	2d80      	cmp	r5, #128	@ 0x80
 8007c0c:	d1f1      	bne.n	8007bf2 <arm_cfft_f32+0x3a>
 8007c0e:	4621      	mov	r1, r4
 8007c10:	4630      	mov	r0, r6
 8007c12:	f7ff fca3 	bl	800755c <arm_cfft_radix8by2_f32>
 8007c16:	f1b8 0f00 	cmp.w	r8, #0
 8007c1a:	d0ed      	beq.n	8007bf8 <arm_cfft_f32+0x40>
 8007c1c:	68b2      	ldr	r2, [r6, #8]
 8007c1e:	89b1      	ldrh	r1, [r6, #12]
 8007c20:	4620      	mov	r0, r4
 8007c22:	f7f8 fad9 	bl	80001d8 <arm_bitreversal_32>
 8007c26:	2f01      	cmp	r7, #1
 8007c28:	d1e8      	bne.n	8007bfc <arm_cfft_f32+0x44>
 8007c2a:	ee07 5a90 	vmov	s15, r5
 8007c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c32:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007c36:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007c3a:	2d00      	cmp	r5, #0
 8007c3c:	d0de      	beq.n	8007bfc <arm_cfft_f32+0x44>
 8007c3e:	f104 0108 	add.w	r1, r4, #8
 8007c42:	2300      	movs	r3, #0
 8007c44:	3301      	adds	r3, #1
 8007c46:	429d      	cmp	r5, r3
 8007c48:	f101 0108 	add.w	r1, r1, #8
 8007c4c:	ed11 7a04 	vldr	s14, [r1, #-16]
 8007c50:	ed51 7a03 	vldr	s15, [r1, #-12]
 8007c54:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007c58:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8007c5c:	ed01 7a04 	vstr	s14, [r1, #-16]
 8007c60:	ed41 7a03 	vstr	s15, [r1, #-12]
 8007c64:	d1ee      	bne.n	8007c44 <arm_cfft_f32+0x8c>
 8007c66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c6a:	4621      	mov	r1, r4
 8007c6c:	4630      	mov	r0, r6
 8007c6e:	f7ff fd45 	bl	80076fc <arm_cfft_radix8by4_f32>
 8007c72:	e7be      	b.n	8007bf2 <arm_cfft_f32+0x3a>
 8007c74:	b1ad      	cbz	r5, 8007ca2 <arm_cfft_f32+0xea>
 8007c76:	f101 030c 	add.w	r3, r1, #12
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	ed53 7a02 	vldr	s15, [r3, #-8]
 8007c80:	3201      	adds	r2, #1
 8007c82:	eef1 7a67 	vneg.f32	s15, s15
 8007c86:	4295      	cmp	r5, r2
 8007c88:	ed43 7a02 	vstr	s15, [r3, #-8]
 8007c8c:	f103 0308 	add.w	r3, r3, #8
 8007c90:	d1f4      	bne.n	8007c7c <arm_cfft_f32+0xc4>
 8007c92:	e79a      	b.n	8007bca <arm_cfft_f32+0x12>
 8007c94:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8007c98:	d0a5      	beq.n	8007be6 <arm_cfft_f32+0x2e>
 8007c9a:	e7aa      	b.n	8007bf2 <arm_cfft_f32+0x3a>
 8007c9c:	2d10      	cmp	r5, #16
 8007c9e:	d0b6      	beq.n	8007c0e <arm_cfft_f32+0x56>
 8007ca0:	e7a7      	b.n	8007bf2 <arm_cfft_f32+0x3a>
 8007ca2:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8007ca6:	d894      	bhi.n	8007bd2 <arm_cfft_f32+0x1a>
 8007ca8:	e7aa      	b.n	8007c00 <arm_cfft_f32+0x48>
 8007caa:	bf00      	nop

08007cac <arm_cmplx_mag_f32>:
 8007cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cb0:	ea5f 0892 	movs.w	r8, r2, lsr #2
 8007cb4:	b084      	sub	sp, #16
 8007cb6:	d07f      	beq.n	8007db8 <arm_cmplx_mag_f32+0x10c>
 8007cb8:	2700      	movs	r7, #0
 8007cba:	f100 0420 	add.w	r4, r0, #32
 8007cbe:	f101 0510 	add.w	r5, r1, #16
 8007cc2:	4646      	mov	r6, r8
 8007cc4:	e05a      	b.n	8007d7c <arm_cmplx_mag_f32+0xd0>
 8007cc6:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8007cca:	eeb4 0a40 	vcmp.f32	s0, s0
 8007cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cd2:	f040 80a4 	bne.w	8007e1e <arm_cmplx_mag_f32+0x172>
 8007cd6:	ed05 0a04 	vstr	s0, [r5, #-16]
 8007cda:	ed54 7a06 	vldr	s15, [r4, #-24]	@ 0xffffffe8
 8007cde:	ed14 0a05 	vldr	s0, [r4, #-20]	@ 0xffffffec
 8007ce2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007ce6:	ee20 0a00 	vmul.f32	s0, s0, s0
 8007cea:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007cee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cf6:	f2c0 808f 	blt.w	8007e18 <arm_cmplx_mag_f32+0x16c>
 8007cfa:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8007cfe:	eeb4 0a40 	vcmp.f32	s0, s0
 8007d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d06:	f040 80af 	bne.w	8007e68 <arm_cmplx_mag_f32+0x1bc>
 8007d0a:	ed05 0a03 	vstr	s0, [r5, #-12]
 8007d0e:	ed54 7a04 	vldr	s15, [r4, #-16]
 8007d12:	ed14 0a03 	vldr	s0, [r4, #-12]
 8007d16:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007d1a:	ee20 0a00 	vmul.f32	s0, s0, s0
 8007d1e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007d22:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d2a:	db72      	blt.n	8007e12 <arm_cmplx_mag_f32+0x166>
 8007d2c:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8007d30:	eeb4 0a40 	vcmp.f32	s0, s0
 8007d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d38:	f040 808c 	bne.w	8007e54 <arm_cmplx_mag_f32+0x1a8>
 8007d3c:	ed05 0a02 	vstr	s0, [r5, #-8]
 8007d40:	ed54 7a02 	vldr	s15, [r4, #-8]
 8007d44:	ed14 0a01 	vldr	s0, [r4, #-4]
 8007d48:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007d4c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8007d50:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007d54:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d5c:	db20      	blt.n	8007da0 <arm_cmplx_mag_f32+0xf4>
 8007d5e:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8007d62:	eeb4 0a40 	vcmp.f32	s0, s0
 8007d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d6a:	d169      	bne.n	8007e40 <arm_cmplx_mag_f32+0x194>
 8007d6c:	3e01      	subs	r6, #1
 8007d6e:	ed05 0a01 	vstr	s0, [r5, #-4]
 8007d72:	f104 0420 	add.w	r4, r4, #32
 8007d76:	f105 0510 	add.w	r5, r5, #16
 8007d7a:	d019      	beq.n	8007db0 <arm_cmplx_mag_f32+0x104>
 8007d7c:	ed54 7a08 	vldr	s15, [r4, #-32]	@ 0xffffffe0
 8007d80:	ed14 0a07 	vldr	s0, [r4, #-28]	@ 0xffffffe4
 8007d84:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007d88:	ee20 0a00 	vmul.f32	s0, s0, s0
 8007d8c:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007d90:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d98:	da95      	bge.n	8007cc6 <arm_cmplx_mag_f32+0x1a>
 8007d9a:	f845 7c10 	str.w	r7, [r5, #-16]
 8007d9e:	e79c      	b.n	8007cda <arm_cmplx_mag_f32+0x2e>
 8007da0:	3e01      	subs	r6, #1
 8007da2:	f845 7c04 	str.w	r7, [r5, #-4]
 8007da6:	f104 0420 	add.w	r4, r4, #32
 8007daa:	f105 0510 	add.w	r5, r5, #16
 8007dae:	d1e5      	bne.n	8007d7c <arm_cmplx_mag_f32+0xd0>
 8007db0:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 8007db4:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 8007db8:	f012 0503 	ands.w	r5, r2, #3
 8007dbc:	d026      	beq.n	8007e0c <arm_cmplx_mag_f32+0x160>
 8007dbe:	2600      	movs	r6, #0
 8007dc0:	f100 0408 	add.w	r4, r0, #8
 8007dc4:	e00c      	b.n	8007de0 <arm_cmplx_mag_f32+0x134>
 8007dc6:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8007dca:	eeb4 0a40 	vcmp.f32	s0, s0
 8007dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dd2:	d12e      	bne.n	8007e32 <arm_cmplx_mag_f32+0x186>
 8007dd4:	3d01      	subs	r5, #1
 8007dd6:	ed01 0a01 	vstr	s0, [r1, #-4]
 8007dda:	f104 0408 	add.w	r4, r4, #8
 8007dde:	d015      	beq.n	8007e0c <arm_cmplx_mag_f32+0x160>
 8007de0:	ed54 7a02 	vldr	s15, [r4, #-8]
 8007de4:	ed14 0a01 	vldr	s0, [r4, #-4]
 8007de8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007dec:	ee20 0a00 	vmul.f32	s0, s0, s0
 8007df0:	3104      	adds	r1, #4
 8007df2:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007df6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dfe:	dae2      	bge.n	8007dc6 <arm_cmplx_mag_f32+0x11a>
 8007e00:	3d01      	subs	r5, #1
 8007e02:	f841 6c04 	str.w	r6, [r1, #-4]
 8007e06:	f104 0408 	add.w	r4, r4, #8
 8007e0a:	d1e9      	bne.n	8007de0 <arm_cmplx_mag_f32+0x134>
 8007e0c:	b004      	add	sp, #16
 8007e0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e12:	f845 7c08 	str.w	r7, [r5, #-8]
 8007e16:	e793      	b.n	8007d40 <arm_cmplx_mag_f32+0x94>
 8007e18:	f845 7c0c 	str.w	r7, [r5, #-12]
 8007e1c:	e777      	b.n	8007d0e <arm_cmplx_mag_f32+0x62>
 8007e1e:	eeb0 0a67 	vmov.f32	s0, s15
 8007e22:	9203      	str	r2, [sp, #12]
 8007e24:	9102      	str	r1, [sp, #8]
 8007e26:	9001      	str	r0, [sp, #4]
 8007e28:	f000 fba2 	bl	8008570 <sqrtf>
 8007e2c:	a801      	add	r0, sp, #4
 8007e2e:	c807      	ldmia	r0, {r0, r1, r2}
 8007e30:	e751      	b.n	8007cd6 <arm_cmplx_mag_f32+0x2a>
 8007e32:	eeb0 0a67 	vmov.f32	s0, s15
 8007e36:	9101      	str	r1, [sp, #4]
 8007e38:	f000 fb9a 	bl	8008570 <sqrtf>
 8007e3c:	9901      	ldr	r1, [sp, #4]
 8007e3e:	e7c9      	b.n	8007dd4 <arm_cmplx_mag_f32+0x128>
 8007e40:	eeb0 0a67 	vmov.f32	s0, s15
 8007e44:	9203      	str	r2, [sp, #12]
 8007e46:	9102      	str	r1, [sp, #8]
 8007e48:	9001      	str	r0, [sp, #4]
 8007e4a:	f000 fb91 	bl	8008570 <sqrtf>
 8007e4e:	a801      	add	r0, sp, #4
 8007e50:	c807      	ldmia	r0, {r0, r1, r2}
 8007e52:	e78b      	b.n	8007d6c <arm_cmplx_mag_f32+0xc0>
 8007e54:	eeb0 0a67 	vmov.f32	s0, s15
 8007e58:	9203      	str	r2, [sp, #12]
 8007e5a:	9102      	str	r1, [sp, #8]
 8007e5c:	9001      	str	r0, [sp, #4]
 8007e5e:	f000 fb87 	bl	8008570 <sqrtf>
 8007e62:	a801      	add	r0, sp, #4
 8007e64:	c807      	ldmia	r0, {r0, r1, r2}
 8007e66:	e769      	b.n	8007d3c <arm_cmplx_mag_f32+0x90>
 8007e68:	eeb0 0a67 	vmov.f32	s0, s15
 8007e6c:	9203      	str	r2, [sp, #12]
 8007e6e:	9102      	str	r1, [sp, #8]
 8007e70:	9001      	str	r0, [sp, #4]
 8007e72:	f000 fb7d 	bl	8008570 <sqrtf>
 8007e76:	a801      	add	r0, sp, #4
 8007e78:	c807      	ldmia	r0, {r0, r1, r2}
 8007e7a:	e746      	b.n	8007d0a <arm_cmplx_mag_f32+0x5e>

08007e7c <arm_radix8_butterfly_f32>:
 8007e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e80:	ed2d 8b10 	vpush	{d8-d15}
 8007e84:	461c      	mov	r4, r3
 8007e86:	b09d      	sub	sp, #116	@ 0x74
 8007e88:	4603      	mov	r3, r0
 8007e8a:	3304      	adds	r3, #4
 8007e8c:	ed9f bac4 	vldr	s22, [pc, #784]	@ 80081a0 <arm_radix8_butterfly_f32+0x324>
 8007e90:	9019      	str	r0, [sp, #100]	@ 0x64
 8007e92:	921a      	str	r2, [sp, #104]	@ 0x68
 8007e94:	468b      	mov	fp, r1
 8007e96:	931b      	str	r3, [sp, #108]	@ 0x6c
 8007e98:	468a      	mov	sl, r1
 8007e9a:	46a1      	mov	r9, r4
 8007e9c:	4607      	mov	r7, r0
 8007e9e:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8007ea2:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8007ea6:	eb03 0508 	add.w	r5, r3, r8
 8007eaa:	195c      	adds	r4, r3, r5
 8007eac:	00de      	lsls	r6, r3, #3
 8007eae:	191a      	adds	r2, r3, r4
 8007eb0:	9600      	str	r6, [sp, #0]
 8007eb2:	1898      	adds	r0, r3, r2
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	9e00      	ldr	r6, [sp, #0]
 8007eb8:	9311      	str	r3, [sp, #68]	@ 0x44
 8007eba:	4401      	add	r1, r0
 8007ebc:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 8007ec0:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8007ec4:	19be      	adds	r6, r7, r6
 8007ec6:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 8007eca:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 8007ece:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
 8007ed2:	9f00      	ldr	r7, [sp, #0]
 8007ed4:	011b      	lsls	r3, r3, #4
 8007ed6:	eb06 0e07 	add.w	lr, r6, r7
 8007eda:	9f1b      	ldr	r7, [sp, #108]	@ 0x6c
 8007edc:	9302      	str	r3, [sp, #8]
 8007ede:	3204      	adds	r2, #4
 8007ee0:	3104      	adds	r1, #4
 8007ee2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007ee6:	f04f 0c00 	mov.w	ip, #0
 8007eea:	edde 7a00 	vldr	s15, [lr]
 8007eee:	edd6 6a00 	vldr	s13, [r6]
 8007ef2:	ed95 2a00 	vldr	s4, [r5]
 8007ef6:	ed17 aa01 	vldr	s20, [r7, #-4]
 8007efa:	edd4 4a00 	vldr	s9, [r4]
 8007efe:	ed90 5a00 	vldr	s10, [r0]
 8007f02:	ed12 7a01 	vldr	s14, [r2, #-4]
 8007f06:	ed51 0a01 	vldr	s1, [r1, #-4]
 8007f0a:	ee77 8a85 	vadd.f32	s17, s15, s10
 8007f0e:	ee76 3a87 	vadd.f32	s7, s13, s14
 8007f12:	ee32 4a20 	vadd.f32	s8, s4, s1
 8007f16:	ee3a 3a24 	vadd.f32	s6, s20, s9
 8007f1a:	ee33 6a84 	vadd.f32	s12, s7, s8
 8007f1e:	ee73 5a28 	vadd.f32	s11, s6, s17
 8007f22:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8007f26:	ee75 6a86 	vadd.f32	s13, s11, s12
 8007f2a:	ee75 5ac6 	vsub.f32	s11, s11, s12
 8007f2e:	ed47 6a01 	vstr	s13, [r7, #-4]
 8007f32:	edc4 5a00 	vstr	s11, [r4]
 8007f36:	ed92 9a00 	vldr	s18, [r2]
 8007f3a:	ed95 1a01 	vldr	s2, [r5, #4]
 8007f3e:	edd6 5a01 	vldr	s11, [r6, #4]
 8007f42:	ed91 6a00 	vldr	s12, [r1]
 8007f46:	edd7 2a00 	vldr	s5, [r7]
 8007f4a:	edd4 1a01 	vldr	s3, [r4, #4]
 8007f4e:	edde 6a01 	vldr	s13, [lr, #4]
 8007f52:	edd0 9a01 	vldr	s19, [r0, #4]
 8007f56:	ee72 0a60 	vsub.f32	s1, s4, s1
 8007f5a:	ee71 aa46 	vsub.f32	s21, s2, s12
 8007f5e:	ee35 2ac9 	vsub.f32	s4, s11, s18
 8007f62:	ee37 0a60 	vsub.f32	s0, s14, s1
 8007f66:	ee32 8a2a 	vadd.f32	s16, s4, s21
 8007f6a:	ee37 7a20 	vadd.f32	s14, s14, s1
 8007f6e:	ee32 2a6a 	vsub.f32	s4, s4, s21
 8007f72:	ee37 5ac5 	vsub.f32	s10, s15, s10
 8007f76:	ee75 5a89 	vadd.f32	s11, s11, s18
 8007f7a:	ee60 0a0b 	vmul.f32	s1, s0, s22
 8007f7e:	ee7a 4a64 	vsub.f32	s9, s20, s9
 8007f82:	ee31 6a06 	vadd.f32	s12, s2, s12
 8007f86:	ee36 9aa9 	vadd.f32	s18, s13, s19
 8007f8a:	ee32 1aa1 	vadd.f32	s2, s5, s3
 8007f8e:	ee76 6ae9 	vsub.f32	s13, s13, s19
 8007f92:	ee72 1ae1 	vsub.f32	s3, s5, s3
 8007f96:	ee28 8a0b 	vmul.f32	s16, s16, s22
 8007f9a:	ee62 2a0b 	vmul.f32	s5, s4, s22
 8007f9e:	ee67 7a0b 	vmul.f32	s15, s14, s22
 8007fa2:	ee33 3a68 	vsub.f32	s6, s6, s17
 8007fa6:	ee36 0a88 	vadd.f32	s0, s13, s16
 8007faa:	ee75 8a86 	vadd.f32	s17, s11, s12
 8007fae:	ee36 7ac8 	vsub.f32	s14, s13, s16
 8007fb2:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8007fb6:	ee74 6ae0 	vsub.f32	s13, s9, s1
 8007fba:	ee74 3aa0 	vadd.f32	s7, s9, s1
 8007fbe:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8007fc2:	ee75 4a27 	vadd.f32	s9, s10, s15
 8007fc6:	ee71 5a49 	vsub.f32	s11, s2, s18
 8007fca:	ee31 2a09 	vadd.f32	s4, s2, s18
 8007fce:	ee75 7a67 	vsub.f32	s15, s10, s15
 8007fd2:	ee31 1aa2 	vadd.f32	s2, s3, s5
 8007fd6:	ee71 2ae2 	vsub.f32	s5, s3, s5
 8007fda:	ee73 0a06 	vadd.f32	s1, s6, s12
 8007fde:	ee75 1ac4 	vsub.f32	s3, s11, s8
 8007fe2:	ee36 5a87 	vadd.f32	s10, s13, s14
 8007fe6:	ee32 8a28 	vadd.f32	s16, s4, s17
 8007fea:	ee33 6a46 	vsub.f32	s12, s6, s12
 8007fee:	ee34 4a25 	vadd.f32	s8, s8, s11
 8007ff2:	ee33 3a80 	vadd.f32	s6, s7, s0
 8007ff6:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8007ffa:	ee71 5a64 	vsub.f32	s11, s2, s9
 8007ffe:	ee72 6ae7 	vsub.f32	s13, s5, s15
 8008002:	ee32 2a68 	vsub.f32	s4, s4, s17
 8008006:	ee73 3ac0 	vsub.f32	s7, s7, s0
 800800a:	ee74 4a81 	vadd.f32	s9, s9, s2
 800800e:	ee77 7aa2 	vadd.f32	s15, s15, s5
 8008012:	44dc      	add	ip, fp
 8008014:	45e2      	cmp	sl, ip
 8008016:	ed87 8a00 	vstr	s16, [r7]
 800801a:	ed84 2a01 	vstr	s4, [r4, #4]
 800801e:	441f      	add	r7, r3
 8008020:	edce 0a00 	vstr	s1, [lr]
 8008024:	441c      	add	r4, r3
 8008026:	ed80 6a00 	vstr	s12, [r0]
 800802a:	edce 1a01 	vstr	s3, [lr, #4]
 800802e:	ed80 4a01 	vstr	s8, [r0, #4]
 8008032:	449e      	add	lr, r3
 8008034:	ed86 3a00 	vstr	s6, [r6]
 8008038:	4418      	add	r0, r3
 800803a:	ed41 3a01 	vstr	s7, [r1, #-4]
 800803e:	ed02 5a01 	vstr	s10, [r2, #-4]
 8008042:	ed85 7a00 	vstr	s14, [r5]
 8008046:	edc6 5a01 	vstr	s11, [r6, #4]
 800804a:	edc1 4a00 	vstr	s9, [r1]
 800804e:	441e      	add	r6, r3
 8008050:	edc2 6a00 	vstr	s13, [r2]
 8008054:	4419      	add	r1, r3
 8008056:	edc5 7a01 	vstr	s15, [r5, #4]
 800805a:	441a      	add	r2, r3
 800805c:	441d      	add	r5, r3
 800805e:	f63f af44 	bhi.w	8007eea <arm_radix8_butterfly_f32+0x6e>
 8008062:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008064:	2a07      	cmp	r2, #7
 8008066:	f240 81f5 	bls.w	8008454 <arm_radix8_butterfly_f32+0x5d8>
 800806a:	f108 0101 	add.w	r1, r8, #1
 800806e:	188f      	adds	r7, r1, r2
 8008070:	eb09 0849 	add.w	r8, r9, r9, lsl #1
 8008074:	19d6      	adds	r6, r2, r7
 8008076:	eb08 0c09 	add.w	ip, r8, r9
 800807a:	1994      	adds	r4, r2, r6
 800807c:	eb0c 0e09 	add.w	lr, ip, r9
 8008080:	4610      	mov	r0, r2
 8008082:	9701      	str	r7, [sp, #4]
 8008084:	4420      	add	r0, r4
 8008086:	eb0e 0709 	add.w	r7, lr, r9
 800808a:	1815      	adds	r5, r2, r0
 800808c:	eb07 0209 	add.w	r2, r7, r9
 8008090:	9203      	str	r2, [sp, #12]
 8008092:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008094:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008098:	9117      	str	r1, [sp, #92]	@ 0x5c
 800809a:	440a      	add	r2, r1
 800809c:	9900      	ldr	r1, [sp, #0]
 800809e:	3108      	adds	r1, #8
 80080a0:	9100      	str	r1, [sp, #0]
 80080a2:	9902      	ldr	r1, [sp, #8]
 80080a4:	3108      	adds	r1, #8
 80080a6:	9102      	str	r1, [sp, #8]
 80080a8:	9919      	ldr	r1, [sp, #100]	@ 0x64
 80080aa:	00ff      	lsls	r7, r7, #3
 80080ac:	9715      	str	r7, [sp, #84]	@ 0x54
 80080ae:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 80080b2:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80080b6:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 80080ba:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 80080bc:	9903      	ldr	r1, [sp, #12]
 80080be:	19d7      	adds	r7, r2, r7
 80080c0:	00c9      	lsls	r1, r1, #3
 80080c2:	9114      	str	r1, [sp, #80]	@ 0x50
 80080c4:	9710      	str	r7, [sp, #64]	@ 0x40
 80080c6:	9919      	ldr	r1, [sp, #100]	@ 0x64
 80080c8:	9f00      	ldr	r7, [sp, #0]
 80080ca:	19cf      	adds	r7, r1, r7
 80080cc:	970d      	str	r7, [sp, #52]	@ 0x34
 80080ce:	9f02      	ldr	r7, [sp, #8]
 80080d0:	19cf      	adds	r7, r1, r7
 80080d2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80080d6:	970c      	str	r7, [sp, #48]	@ 0x30
 80080d8:	9f01      	ldr	r7, [sp, #4]
 80080da:	f8cd e058 	str.w	lr, [sp, #88]	@ 0x58
 80080de:	3504      	adds	r5, #4
 80080e0:	3004      	adds	r0, #4
 80080e2:	eb01 0ec7 	add.w	lr, r1, r7, lsl #3
 80080e6:	9508      	str	r5, [sp, #32]
 80080e8:	9009      	str	r0, [sp, #36]	@ 0x24
 80080ea:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 80080ec:	981a      	ldr	r0, [sp, #104]	@ 0x68
 80080ee:	f8cd e02c 	str.w	lr, [sp, #44]	@ 0x2c
 80080f2:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80080f6:	eb01 0ec6 	add.w	lr, r1, r6, lsl #3
 80080fa:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80080fc:	f8cd e038 	str.w	lr, [sp, #56]	@ 0x38
 8008100:	1945      	adds	r5, r0, r5
 8008102:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8008106:	460f      	mov	r7, r1
 8008108:	3404      	adds	r4, #4
 800810a:	4641      	mov	r1, r8
 800810c:	1841      	adds	r1, r0, r1
 800810e:	f8cd c048 	str.w	ip, [sp, #72]	@ 0x48
 8008112:	940a      	str	r4, [sp, #40]	@ 0x28
 8008114:	eb00 0c06 	add.w	ip, r0, r6
 8008118:	f8cd 804c 	str.w	r8, [sp, #76]	@ 0x4c
 800811c:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800811e:	9506      	str	r5, [sp, #24]
 8008120:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8008122:	9105      	str	r1, [sp, #20]
 8008124:	4639      	mov	r1, r7
 8008126:	1905      	adds	r5, r0, r4
 8008128:	3108      	adds	r1, #8
 800812a:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 800812c:	9507      	str	r5, [sp, #28]
 800812e:	910f      	str	r1, [sp, #60]	@ 0x3c
 8008130:	ea4f 1509 	mov.w	r5, r9, lsl #4
 8008134:	2101      	movs	r1, #1
 8008136:	eb00 0e06 	add.w	lr, r0, r6
 800813a:	9518      	str	r5, [sp, #96]	@ 0x60
 800813c:	9404      	str	r4, [sp, #16]
 800813e:	9103      	str	r1, [sp, #12]
 8008140:	4620      	mov	r0, r4
 8008142:	4689      	mov	r9, r1
 8008144:	9e06      	ldr	r6, [sp, #24]
 8008146:	ed90 fa00 	vldr	s30, [r0]
 800814a:	edd6 7a01 	vldr	s15, [r6, #4]
 800814e:	edd0 ba01 	vldr	s23, [r0, #4]
 8008152:	edcd 7a00 	vstr	s15, [sp]
 8008156:	a80d      	add	r0, sp, #52	@ 0x34
 8008158:	edde 7a01 	vldr	s15, [lr, #4]
 800815c:	9c05      	ldr	r4, [sp, #20]
 800815e:	9d07      	ldr	r5, [sp, #28]
 8008160:	edd2 fa00 	vldr	s31, [r2]
 8008164:	ed92 ca01 	vldr	s24, [r2, #4]
 8008168:	edcd 7a01 	vstr	s15, [sp, #4]
 800816c:	c807      	ldmia	r0, {r0, r1, r2}
 800816e:	eddc 7a01 	vldr	s15, [ip, #4]
 8008172:	edd4 ea00 	vldr	s29, [r4]
 8008176:	ed95 ea00 	vldr	s28, [r5]
 800817a:	edd6 da00 	vldr	s27, [r6]
 800817e:	edd4 aa01 	vldr	s21, [r4, #4]
 8008182:	ed95 aa01 	vldr	s20, [r5, #4]
 8008186:	ed9e da00 	vldr	s26, [lr]
 800818a:	eddc ca00 	vldr	s25, [ip]
 800818e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008192:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8008194:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008196:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008198:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800819a:	edcd 7a02 	vstr	s15, [sp, #8]
 800819e:	e001      	b.n	80081a4 <arm_radix8_butterfly_f32+0x328>
 80081a0:	3f3504f3 	.word	0x3f3504f3
 80081a4:	ed16 6a01 	vldr	s12, [r6, #-4]
 80081a8:	ed91 5a00 	vldr	s10, [r1]
 80081ac:	ed57 9a01 	vldr	s19, [r7, #-4]
 80081b0:	edd5 7a00 	vldr	s15, [r5]
 80081b4:	ed18 7a01 	vldr	s14, [r8, #-4]
 80081b8:	edd2 3a00 	vldr	s7, [r2]
 80081bc:	ed94 3a00 	vldr	s6, [r4]
 80081c0:	ed90 2a00 	vldr	s4, [r0]
 80081c4:	ed92 0a01 	vldr	s0, [r2, #4]
 80081c8:	ee33 8a85 	vadd.f32	s16, s7, s10
 80081cc:	ee32 1a06 	vadd.f32	s2, s4, s12
 80081d0:	ee33 4a29 	vadd.f32	s8, s6, s19
 80081d4:	ee77 4a87 	vadd.f32	s9, s15, s14
 80081d8:	ee78 1a04 	vadd.f32	s3, s16, s8
 80081dc:	ee71 6a24 	vadd.f32	s13, s2, s9
 80081e0:	ee32 2a46 	vsub.f32	s4, s4, s12
 80081e4:	ee31 6aa6 	vadd.f32	s12, s3, s13
 80081e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80081ec:	ed82 6a00 	vstr	s12, [r2]
 80081f0:	edd5 8a01 	vldr	s17, [r5, #4]
 80081f4:	ed90 9a01 	vldr	s18, [r0, #4]
 80081f8:	edd6 2a00 	vldr	s5, [r6]
 80081fc:	ed98 7a00 	vldr	s14, [r8]
 8008200:	edd4 0a01 	vldr	s1, [r4, #4]
 8008204:	ed91 6a01 	vldr	s12, [r1, #4]
 8008208:	edd7 5a00 	vldr	s11, [r7]
 800820c:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8008210:	ee33 3a69 	vsub.f32	s6, s6, s19
 8008214:	ee39 5a62 	vsub.f32	s10, s18, s5
 8008218:	ee78 9ac7 	vsub.f32	s19, s17, s14
 800821c:	ee38 4a44 	vsub.f32	s8, s16, s8
 8008220:	ee38 7a87 	vadd.f32	s14, s17, s14
 8008224:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8008228:	ee79 2a22 	vadd.f32	s5, s18, s5
 800822c:	ee75 8a69 	vsub.f32	s17, s10, s19
 8008230:	ee32 9a27 	vadd.f32	s18, s4, s15
 8008234:	ee35 5a29 	vadd.f32	s10, s10, s19
 8008238:	ee72 7a67 	vsub.f32	s15, s4, s15
 800823c:	ee30 2a06 	vadd.f32	s4, s0, s12
 8008240:	ee69 9a0b 	vmul.f32	s19, s18, s22
 8008244:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8008248:	ee32 9a08 	vadd.f32	s18, s4, s16
 800824c:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8008250:	ee32 2a48 	vsub.f32	s4, s4, s16
 8008254:	ee71 4a64 	vsub.f32	s9, s2, s9
 8008258:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800825c:	ee32 1a87 	vadd.f32	s2, s5, s14
 8008260:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8008264:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8008268:	ee30 6a46 	vsub.f32	s12, s0, s12
 800826c:	ee73 0a29 	vadd.f32	s1, s6, s19
 8008270:	ee36 0a28 	vadd.f32	s0, s12, s17
 8008274:	ee33 3a69 	vsub.f32	s6, s6, s19
 8008278:	ee32 7a64 	vsub.f32	s14, s4, s9
 800827c:	ee73 9aa7 	vadd.f32	s19, s7, s15
 8008280:	ee36 6a68 	vsub.f32	s12, s12, s17
 8008284:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8008288:	ee75 8a85 	vadd.f32	s17, s11, s10
 800828c:	ee74 3a22 	vadd.f32	s7, s8, s5
 8008290:	ee35 5ac5 	vsub.f32	s10, s11, s10
 8008294:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8008298:	ee79 1a41 	vsub.f32	s3, s18, s2
 800829c:	ee39 8aa8 	vadd.f32	s16, s19, s17
 80082a0:	ee76 5a43 	vsub.f32	s11, s12, s6
 80082a4:	ee74 2a62 	vsub.f32	s5, s8, s5
 80082a8:	ee74 4a82 	vadd.f32	s9, s9, s4
 80082ac:	ee30 4a60 	vsub.f32	s8, s0, s1
 80082b0:	ee79 8ae8 	vsub.f32	s17, s19, s17
 80082b4:	ee30 0a80 	vadd.f32	s0, s1, s0
 80082b8:	ee77 9a85 	vadd.f32	s19, s15, s10
 80082bc:	ee33 6a06 	vadd.f32	s12, s6, s12
 80082c0:	ee77 7ac5 	vsub.f32	s15, s15, s10
 80082c4:	ee2e 2a21 	vmul.f32	s4, s28, s3
 80082c8:	ee2e 5a26 	vmul.f32	s10, s28, s13
 80082cc:	ee6f 0a23 	vmul.f32	s1, s30, s7
 80082d0:	ee2a 3a21 	vmul.f32	s6, s20, s3
 80082d4:	ee39 1a01 	vadd.f32	s2, s18, s2
 80082d8:	ee6a 6a26 	vmul.f32	s13, s20, s13
 80082dc:	ee2b 9a87 	vmul.f32	s18, s23, s14
 80082e0:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 80082e4:	ee2f 7a07 	vmul.f32	s14, s30, s14
 80082e8:	ee6f 1a84 	vmul.f32	s3, s31, s8
 80082ec:	ee35 3a03 	vadd.f32	s6, s10, s6
 80082f0:	ee72 6a66 	vsub.f32	s13, s4, s13
 80082f4:	ee2c 5a04 	vmul.f32	s10, s24, s8
 80082f8:	ee2f 2a88 	vmul.f32	s4, s31, s16
 80082fc:	ed9d 4a02 	vldr	s8, [sp, #8]
 8008300:	ed82 1a01 	vstr	s2, [r2, #4]
 8008304:	ee77 3a63 	vsub.f32	s7, s14, s7
 8008308:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800830c:	ed9d 7a01 	vldr	s14, [sp, #4]
 8008310:	ed81 3a00 	vstr	s6, [r1]
 8008314:	ee30 9a89 	vadd.f32	s18, s1, s18
 8008318:	ee32 2a05 	vadd.f32	s4, s4, s10
 800831c:	ee6d 0a22 	vmul.f32	s1, s26, s5
 8008320:	ee31 8ac8 	vsub.f32	s16, s3, s16
 8008324:	ee67 2a22 	vmul.f32	s5, s14, s5
 8008328:	ee64 1a00 	vmul.f32	s3, s8, s0
 800832c:	ee27 7a24 	vmul.f32	s14, s14, s9
 8008330:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 8008334:	ee6d 4a24 	vmul.f32	s9, s26, s9
 8008338:	ee64 8a28 	vmul.f32	s17, s8, s17
 800833c:	ed9d 4a00 	vldr	s8, [sp]
 8008340:	edc1 6a01 	vstr	s13, [r1, #4]
 8008344:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8008348:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 800834c:	ee64 9a29 	vmul.f32	s19, s8, s19
 8008350:	ee24 4a25 	vmul.f32	s8, s8, s11
 8008354:	ee30 7a87 	vadd.f32	s14, s1, s14
 8008358:	ee74 4a84 	vadd.f32	s9, s9, s8
 800835c:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 8008360:	ee2a 4a86 	vmul.f32	s8, s21, s12
 8008364:	ee2c 0a80 	vmul.f32	s0, s25, s0
 8008368:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 800836c:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 8008370:	ee2e 6a86 	vmul.f32	s12, s29, s12
 8008374:	ee75 1a21 	vadd.f32	s3, s10, s3
 8008378:	ee30 0a68 	vsub.f32	s0, s0, s17
 800837c:	ee75 9ae9 	vsub.f32	s19, s11, s19
 8008380:	ee70 0a84 	vadd.f32	s1, s1, s8
 8008384:	ee36 6a67 	vsub.f32	s12, s12, s15
 8008388:	44d9      	add	r9, fp
 800838a:	45ca      	cmp	sl, r9
 800838c:	ed84 9a00 	vstr	s18, [r4]
 8008390:	edc4 3a01 	vstr	s7, [r4, #4]
 8008394:	441a      	add	r2, r3
 8008396:	ed07 7a01 	vstr	s14, [r7, #-4]
 800839a:	edc7 2a00 	vstr	s5, [r7]
 800839e:	4419      	add	r1, r3
 80083a0:	ed80 2a00 	vstr	s4, [r0]
 80083a4:	ed80 8a01 	vstr	s16, [r0, #4]
 80083a8:	441c      	add	r4, r3
 80083aa:	ed48 1a01 	vstr	s3, [r8, #-4]
 80083ae:	ed88 0a00 	vstr	s0, [r8]
 80083b2:	441f      	add	r7, r3
 80083b4:	ed46 4a01 	vstr	s9, [r6, #-4]
 80083b8:	4418      	add	r0, r3
 80083ba:	edc6 9a00 	vstr	s19, [r6]
 80083be:	4498      	add	r8, r3
 80083c0:	edc5 0a00 	vstr	s1, [r5]
 80083c4:	ed85 6a01 	vstr	s12, [r5, #4]
 80083c8:	441e      	add	r6, r3
 80083ca:	441d      	add	r5, r3
 80083cc:	f63f aeea 	bhi.w	80081a4 <arm_radix8_butterfly_f32+0x328>
 80083d0:	9a03      	ldr	r2, [sp, #12]
 80083d2:	9818      	ldr	r0, [sp, #96]	@ 0x60
 80083d4:	3201      	adds	r2, #1
 80083d6:	4611      	mov	r1, r2
 80083d8:	9203      	str	r2, [sp, #12]
 80083da:	9a04      	ldr	r2, [sp, #16]
 80083dc:	4402      	add	r2, r0
 80083de:	9204      	str	r2, [sp, #16]
 80083e0:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80083e2:	9a05      	ldr	r2, [sp, #20]
 80083e4:	4402      	add	r2, r0
 80083e6:	9205      	str	r2, [sp, #20]
 80083e8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80083ea:	9a07      	ldr	r2, [sp, #28]
 80083ec:	4402      	add	r2, r0
 80083ee:	9207      	str	r2, [sp, #28]
 80083f0:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80083f2:	9a06      	ldr	r2, [sp, #24]
 80083f4:	4402      	add	r2, r0
 80083f6:	9206      	str	r2, [sp, #24]
 80083f8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80083fa:	4496      	add	lr, r2
 80083fc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80083fe:	4494      	add	ip, r2
 8008400:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008402:	3208      	adds	r2, #8
 8008404:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008406:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008408:	3208      	adds	r2, #8
 800840a:	920e      	str	r2, [sp, #56]	@ 0x38
 800840c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800840e:	3208      	adds	r2, #8
 8008410:	920d      	str	r2, [sp, #52]	@ 0x34
 8008412:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008414:	3208      	adds	r2, #8
 8008416:	920c      	str	r2, [sp, #48]	@ 0x30
 8008418:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800841a:	3208      	adds	r2, #8
 800841c:	920b      	str	r2, [sp, #44]	@ 0x2c
 800841e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008420:	3208      	adds	r2, #8
 8008422:	920a      	str	r2, [sp, #40]	@ 0x28
 8008424:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008426:	3208      	adds	r2, #8
 8008428:	9209      	str	r2, [sp, #36]	@ 0x24
 800842a:	9a08      	ldr	r2, [sp, #32]
 800842c:	3208      	adds	r2, #8
 800842e:	9208      	str	r2, [sp, #32]
 8008430:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8008432:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8008434:	4288      	cmp	r0, r1
 8008436:	4622      	mov	r2, r4
 8008438:	d007      	beq.n	800844a <arm_radix8_butterfly_f32+0x5ce>
 800843a:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 800843c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008440:	4621      	mov	r1, r4
 8008442:	4401      	add	r1, r0
 8008444:	9110      	str	r1, [sp, #64]	@ 0x40
 8008446:	9804      	ldr	r0, [sp, #16]
 8008448:	e67c      	b.n	8008144 <arm_radix8_butterfly_f32+0x2c8>
 800844a:	4683      	mov	fp, r0
 800844c:	f8bd 905c 	ldrh.w	r9, [sp, #92]	@ 0x5c
 8008450:	9f19      	ldr	r7, [sp, #100]	@ 0x64
 8008452:	e524      	b.n	8007e9e <arm_radix8_butterfly_f32+0x22>
 8008454:	b01d      	add	sp, #116	@ 0x74
 8008456:	ecbd 8b10 	vpop	{d8-d15}
 800845a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800845e:	bf00      	nop

08008460 <memset>:
 8008460:	4402      	add	r2, r0
 8008462:	4603      	mov	r3, r0
 8008464:	4293      	cmp	r3, r2
 8008466:	d100      	bne.n	800846a <memset+0xa>
 8008468:	4770      	bx	lr
 800846a:	f803 1b01 	strb.w	r1, [r3], #1
 800846e:	e7f9      	b.n	8008464 <memset+0x4>

08008470 <__errno>:
 8008470:	4b01      	ldr	r3, [pc, #4]	@ (8008478 <__errno+0x8>)
 8008472:	6818      	ldr	r0, [r3, #0]
 8008474:	4770      	bx	lr
 8008476:	bf00      	nop
 8008478:	20000174 	.word	0x20000174

0800847c <__libc_init_array>:
 800847c:	b570      	push	{r4, r5, r6, lr}
 800847e:	4d0d      	ldr	r5, [pc, #52]	@ (80084b4 <__libc_init_array+0x38>)
 8008480:	4c0d      	ldr	r4, [pc, #52]	@ (80084b8 <__libc_init_array+0x3c>)
 8008482:	1b64      	subs	r4, r4, r5
 8008484:	10a4      	asrs	r4, r4, #2
 8008486:	2600      	movs	r6, #0
 8008488:	42a6      	cmp	r6, r4
 800848a:	d109      	bne.n	80084a0 <__libc_init_array+0x24>
 800848c:	4d0b      	ldr	r5, [pc, #44]	@ (80084bc <__libc_init_array+0x40>)
 800848e:	4c0c      	ldr	r4, [pc, #48]	@ (80084c0 <__libc_init_array+0x44>)
 8008490:	f001 f86e 	bl	8009570 <_init>
 8008494:	1b64      	subs	r4, r4, r5
 8008496:	10a4      	asrs	r4, r4, #2
 8008498:	2600      	movs	r6, #0
 800849a:	42a6      	cmp	r6, r4
 800849c:	d105      	bne.n	80084aa <__libc_init_array+0x2e>
 800849e:	bd70      	pop	{r4, r5, r6, pc}
 80084a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80084a4:	4798      	blx	r3
 80084a6:	3601      	adds	r6, #1
 80084a8:	e7ee      	b.n	8008488 <__libc_init_array+0xc>
 80084aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80084ae:	4798      	blx	r3
 80084b0:	3601      	adds	r6, #1
 80084b2:	e7f2      	b.n	800849a <__libc_init_array+0x1e>
 80084b4:	0801d448 	.word	0x0801d448
 80084b8:	0801d448 	.word	0x0801d448
 80084bc:	0801d448 	.word	0x0801d448
 80084c0:	0801d44c 	.word	0x0801d44c
 80084c4:	00000000 	.word	0x00000000

080084c8 <sin>:
 80084c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80084ca:	ec53 2b10 	vmov	r2, r3, d0
 80084ce:	4826      	ldr	r0, [pc, #152]	@ (8008568 <sin+0xa0>)
 80084d0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80084d4:	4281      	cmp	r1, r0
 80084d6:	d807      	bhi.n	80084e8 <sin+0x20>
 80084d8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8008560 <sin+0x98>
 80084dc:	2000      	movs	r0, #0
 80084de:	b005      	add	sp, #20
 80084e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80084e4:	f000 b930 	b.w	8008748 <__kernel_sin>
 80084e8:	4820      	ldr	r0, [pc, #128]	@ (800856c <sin+0xa4>)
 80084ea:	4281      	cmp	r1, r0
 80084ec:	d908      	bls.n	8008500 <sin+0x38>
 80084ee:	4610      	mov	r0, r2
 80084f0:	4619      	mov	r1, r3
 80084f2:	f7f7 fed5 	bl	80002a0 <__aeabi_dsub>
 80084f6:	ec41 0b10 	vmov	d0, r0, r1
 80084fa:	b005      	add	sp, #20
 80084fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8008500:	4668      	mov	r0, sp
 8008502:	f000 f9dd 	bl	80088c0 <__ieee754_rem_pio2>
 8008506:	f000 0003 	and.w	r0, r0, #3
 800850a:	2801      	cmp	r0, #1
 800850c:	d00c      	beq.n	8008528 <sin+0x60>
 800850e:	2802      	cmp	r0, #2
 8008510:	d011      	beq.n	8008536 <sin+0x6e>
 8008512:	b9e8      	cbnz	r0, 8008550 <sin+0x88>
 8008514:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008518:	ed9d 0b00 	vldr	d0, [sp]
 800851c:	2001      	movs	r0, #1
 800851e:	f000 f913 	bl	8008748 <__kernel_sin>
 8008522:	ec51 0b10 	vmov	r0, r1, d0
 8008526:	e7e6      	b.n	80084f6 <sin+0x2e>
 8008528:	ed9d 1b02 	vldr	d1, [sp, #8]
 800852c:	ed9d 0b00 	vldr	d0, [sp]
 8008530:	f000 f842 	bl	80085b8 <__kernel_cos>
 8008534:	e7f5      	b.n	8008522 <sin+0x5a>
 8008536:	ed9d 1b02 	vldr	d1, [sp, #8]
 800853a:	ed9d 0b00 	vldr	d0, [sp]
 800853e:	2001      	movs	r0, #1
 8008540:	f000 f902 	bl	8008748 <__kernel_sin>
 8008544:	ec53 2b10 	vmov	r2, r3, d0
 8008548:	4610      	mov	r0, r2
 800854a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800854e:	e7d2      	b.n	80084f6 <sin+0x2e>
 8008550:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008554:	ed9d 0b00 	vldr	d0, [sp]
 8008558:	f000 f82e 	bl	80085b8 <__kernel_cos>
 800855c:	e7f2      	b.n	8008544 <sin+0x7c>
 800855e:	bf00      	nop
	...
 8008568:	3fe921fb 	.word	0x3fe921fb
 800856c:	7fefffff 	.word	0x7fefffff

08008570 <sqrtf>:
 8008570:	b508      	push	{r3, lr}
 8008572:	ed2d 8b02 	vpush	{d8}
 8008576:	eeb0 8a40 	vmov.f32	s16, s0
 800857a:	f000 f817 	bl	80085ac <__ieee754_sqrtf>
 800857e:	eeb4 8a48 	vcmp.f32	s16, s16
 8008582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008586:	d60c      	bvs.n	80085a2 <sqrtf+0x32>
 8008588:	eddf 8a07 	vldr	s17, [pc, #28]	@ 80085a8 <sqrtf+0x38>
 800858c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8008590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008594:	d505      	bpl.n	80085a2 <sqrtf+0x32>
 8008596:	f7ff ff6b 	bl	8008470 <__errno>
 800859a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800859e:	2321      	movs	r3, #33	@ 0x21
 80085a0:	6003      	str	r3, [r0, #0]
 80085a2:	ecbd 8b02 	vpop	{d8}
 80085a6:	bd08      	pop	{r3, pc}
 80085a8:	00000000 	.word	0x00000000

080085ac <__ieee754_sqrtf>:
 80085ac:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80085b0:	4770      	bx	lr
 80085b2:	0000      	movs	r0, r0
 80085b4:	0000      	movs	r0, r0
	...

080085b8 <__kernel_cos>:
 80085b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085bc:	ec57 6b10 	vmov	r6, r7, d0
 80085c0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80085c4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 80085c8:	ed8d 1b00 	vstr	d1, [sp]
 80085cc:	d206      	bcs.n	80085dc <__kernel_cos+0x24>
 80085ce:	4630      	mov	r0, r6
 80085d0:	4639      	mov	r1, r7
 80085d2:	f7f8 fab7 	bl	8000b44 <__aeabi_d2iz>
 80085d6:	2800      	cmp	r0, #0
 80085d8:	f000 8088 	beq.w	80086ec <__kernel_cos+0x134>
 80085dc:	4632      	mov	r2, r6
 80085de:	463b      	mov	r3, r7
 80085e0:	4630      	mov	r0, r6
 80085e2:	4639      	mov	r1, r7
 80085e4:	f7f8 f814 	bl	8000610 <__aeabi_dmul>
 80085e8:	4b51      	ldr	r3, [pc, #324]	@ (8008730 <__kernel_cos+0x178>)
 80085ea:	2200      	movs	r2, #0
 80085ec:	4604      	mov	r4, r0
 80085ee:	460d      	mov	r5, r1
 80085f0:	f7f8 f80e 	bl	8000610 <__aeabi_dmul>
 80085f4:	a340      	add	r3, pc, #256	@ (adr r3, 80086f8 <__kernel_cos+0x140>)
 80085f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085fa:	4682      	mov	sl, r0
 80085fc:	468b      	mov	fp, r1
 80085fe:	4620      	mov	r0, r4
 8008600:	4629      	mov	r1, r5
 8008602:	f7f8 f805 	bl	8000610 <__aeabi_dmul>
 8008606:	a33e      	add	r3, pc, #248	@ (adr r3, 8008700 <__kernel_cos+0x148>)
 8008608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800860c:	f7f7 fe4a 	bl	80002a4 <__adddf3>
 8008610:	4622      	mov	r2, r4
 8008612:	462b      	mov	r3, r5
 8008614:	f7f7 fffc 	bl	8000610 <__aeabi_dmul>
 8008618:	a33b      	add	r3, pc, #236	@ (adr r3, 8008708 <__kernel_cos+0x150>)
 800861a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800861e:	f7f7 fe3f 	bl	80002a0 <__aeabi_dsub>
 8008622:	4622      	mov	r2, r4
 8008624:	462b      	mov	r3, r5
 8008626:	f7f7 fff3 	bl	8000610 <__aeabi_dmul>
 800862a:	a339      	add	r3, pc, #228	@ (adr r3, 8008710 <__kernel_cos+0x158>)
 800862c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008630:	f7f7 fe38 	bl	80002a4 <__adddf3>
 8008634:	4622      	mov	r2, r4
 8008636:	462b      	mov	r3, r5
 8008638:	f7f7 ffea 	bl	8000610 <__aeabi_dmul>
 800863c:	a336      	add	r3, pc, #216	@ (adr r3, 8008718 <__kernel_cos+0x160>)
 800863e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008642:	f7f7 fe2d 	bl	80002a0 <__aeabi_dsub>
 8008646:	4622      	mov	r2, r4
 8008648:	462b      	mov	r3, r5
 800864a:	f7f7 ffe1 	bl	8000610 <__aeabi_dmul>
 800864e:	a334      	add	r3, pc, #208	@ (adr r3, 8008720 <__kernel_cos+0x168>)
 8008650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008654:	f7f7 fe26 	bl	80002a4 <__adddf3>
 8008658:	4622      	mov	r2, r4
 800865a:	462b      	mov	r3, r5
 800865c:	f7f7 ffd8 	bl	8000610 <__aeabi_dmul>
 8008660:	4622      	mov	r2, r4
 8008662:	462b      	mov	r3, r5
 8008664:	f7f7 ffd4 	bl	8000610 <__aeabi_dmul>
 8008668:	e9dd 2300 	ldrd	r2, r3, [sp]
 800866c:	4604      	mov	r4, r0
 800866e:	460d      	mov	r5, r1
 8008670:	4630      	mov	r0, r6
 8008672:	4639      	mov	r1, r7
 8008674:	f7f7 ffcc 	bl	8000610 <__aeabi_dmul>
 8008678:	460b      	mov	r3, r1
 800867a:	4602      	mov	r2, r0
 800867c:	4629      	mov	r1, r5
 800867e:	4620      	mov	r0, r4
 8008680:	f7f7 fe0e 	bl	80002a0 <__aeabi_dsub>
 8008684:	4b2b      	ldr	r3, [pc, #172]	@ (8008734 <__kernel_cos+0x17c>)
 8008686:	4598      	cmp	r8, r3
 8008688:	4606      	mov	r6, r0
 800868a:	460f      	mov	r7, r1
 800868c:	d810      	bhi.n	80086b0 <__kernel_cos+0xf8>
 800868e:	4602      	mov	r2, r0
 8008690:	460b      	mov	r3, r1
 8008692:	4650      	mov	r0, sl
 8008694:	4659      	mov	r1, fp
 8008696:	f7f7 fe03 	bl	80002a0 <__aeabi_dsub>
 800869a:	460b      	mov	r3, r1
 800869c:	4926      	ldr	r1, [pc, #152]	@ (8008738 <__kernel_cos+0x180>)
 800869e:	4602      	mov	r2, r0
 80086a0:	2000      	movs	r0, #0
 80086a2:	f7f7 fdfd 	bl	80002a0 <__aeabi_dsub>
 80086a6:	ec41 0b10 	vmov	d0, r0, r1
 80086aa:	b003      	add	sp, #12
 80086ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086b0:	4b22      	ldr	r3, [pc, #136]	@ (800873c <__kernel_cos+0x184>)
 80086b2:	4921      	ldr	r1, [pc, #132]	@ (8008738 <__kernel_cos+0x180>)
 80086b4:	4598      	cmp	r8, r3
 80086b6:	bf8c      	ite	hi
 80086b8:	4d21      	ldrhi	r5, [pc, #132]	@ (8008740 <__kernel_cos+0x188>)
 80086ba:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 80086be:	2400      	movs	r4, #0
 80086c0:	4622      	mov	r2, r4
 80086c2:	462b      	mov	r3, r5
 80086c4:	2000      	movs	r0, #0
 80086c6:	f7f7 fdeb 	bl	80002a0 <__aeabi_dsub>
 80086ca:	4622      	mov	r2, r4
 80086cc:	4680      	mov	r8, r0
 80086ce:	4689      	mov	r9, r1
 80086d0:	462b      	mov	r3, r5
 80086d2:	4650      	mov	r0, sl
 80086d4:	4659      	mov	r1, fp
 80086d6:	f7f7 fde3 	bl	80002a0 <__aeabi_dsub>
 80086da:	4632      	mov	r2, r6
 80086dc:	463b      	mov	r3, r7
 80086de:	f7f7 fddf 	bl	80002a0 <__aeabi_dsub>
 80086e2:	4602      	mov	r2, r0
 80086e4:	460b      	mov	r3, r1
 80086e6:	4640      	mov	r0, r8
 80086e8:	4649      	mov	r1, r9
 80086ea:	e7da      	b.n	80086a2 <__kernel_cos+0xea>
 80086ec:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8008728 <__kernel_cos+0x170>
 80086f0:	e7db      	b.n	80086aa <__kernel_cos+0xf2>
 80086f2:	bf00      	nop
 80086f4:	f3af 8000 	nop.w
 80086f8:	be8838d4 	.word	0xbe8838d4
 80086fc:	bda8fae9 	.word	0xbda8fae9
 8008700:	bdb4b1c4 	.word	0xbdb4b1c4
 8008704:	3e21ee9e 	.word	0x3e21ee9e
 8008708:	809c52ad 	.word	0x809c52ad
 800870c:	3e927e4f 	.word	0x3e927e4f
 8008710:	19cb1590 	.word	0x19cb1590
 8008714:	3efa01a0 	.word	0x3efa01a0
 8008718:	16c15177 	.word	0x16c15177
 800871c:	3f56c16c 	.word	0x3f56c16c
 8008720:	5555554c 	.word	0x5555554c
 8008724:	3fa55555 	.word	0x3fa55555
 8008728:	00000000 	.word	0x00000000
 800872c:	3ff00000 	.word	0x3ff00000
 8008730:	3fe00000 	.word	0x3fe00000
 8008734:	3fd33332 	.word	0x3fd33332
 8008738:	3ff00000 	.word	0x3ff00000
 800873c:	3fe90000 	.word	0x3fe90000
 8008740:	3fd20000 	.word	0x3fd20000
 8008744:	00000000 	.word	0x00000000

08008748 <__kernel_sin>:
 8008748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800874c:	ec55 4b10 	vmov	r4, r5, d0
 8008750:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8008754:	b085      	sub	sp, #20
 8008756:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800875a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800875e:	4680      	mov	r8, r0
 8008760:	d205      	bcs.n	800876e <__kernel_sin+0x26>
 8008762:	4620      	mov	r0, r4
 8008764:	4629      	mov	r1, r5
 8008766:	f7f8 f9ed 	bl	8000b44 <__aeabi_d2iz>
 800876a:	2800      	cmp	r0, #0
 800876c:	d052      	beq.n	8008814 <__kernel_sin+0xcc>
 800876e:	4622      	mov	r2, r4
 8008770:	462b      	mov	r3, r5
 8008772:	4620      	mov	r0, r4
 8008774:	4629      	mov	r1, r5
 8008776:	f7f7 ff4b 	bl	8000610 <__aeabi_dmul>
 800877a:	4682      	mov	sl, r0
 800877c:	468b      	mov	fp, r1
 800877e:	4602      	mov	r2, r0
 8008780:	460b      	mov	r3, r1
 8008782:	4620      	mov	r0, r4
 8008784:	4629      	mov	r1, r5
 8008786:	f7f7 ff43 	bl	8000610 <__aeabi_dmul>
 800878a:	a342      	add	r3, pc, #264	@ (adr r3, 8008894 <__kernel_sin+0x14c>)
 800878c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008790:	e9cd 0100 	strd	r0, r1, [sp]
 8008794:	4650      	mov	r0, sl
 8008796:	4659      	mov	r1, fp
 8008798:	f7f7 ff3a 	bl	8000610 <__aeabi_dmul>
 800879c:	a33f      	add	r3, pc, #252	@ (adr r3, 800889c <__kernel_sin+0x154>)
 800879e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087a2:	f7f7 fd7d 	bl	80002a0 <__aeabi_dsub>
 80087a6:	4652      	mov	r2, sl
 80087a8:	465b      	mov	r3, fp
 80087aa:	f7f7 ff31 	bl	8000610 <__aeabi_dmul>
 80087ae:	a33d      	add	r3, pc, #244	@ (adr r3, 80088a4 <__kernel_sin+0x15c>)
 80087b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b4:	f7f7 fd76 	bl	80002a4 <__adddf3>
 80087b8:	4652      	mov	r2, sl
 80087ba:	465b      	mov	r3, fp
 80087bc:	f7f7 ff28 	bl	8000610 <__aeabi_dmul>
 80087c0:	a33a      	add	r3, pc, #232	@ (adr r3, 80088ac <__kernel_sin+0x164>)
 80087c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c6:	f7f7 fd6b 	bl	80002a0 <__aeabi_dsub>
 80087ca:	4652      	mov	r2, sl
 80087cc:	465b      	mov	r3, fp
 80087ce:	f7f7 ff1f 	bl	8000610 <__aeabi_dmul>
 80087d2:	a338      	add	r3, pc, #224	@ (adr r3, 80088b4 <__kernel_sin+0x16c>)
 80087d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087d8:	f7f7 fd64 	bl	80002a4 <__adddf3>
 80087dc:	4606      	mov	r6, r0
 80087de:	460f      	mov	r7, r1
 80087e0:	f1b8 0f00 	cmp.w	r8, #0
 80087e4:	d11b      	bne.n	800881e <__kernel_sin+0xd6>
 80087e6:	4602      	mov	r2, r0
 80087e8:	460b      	mov	r3, r1
 80087ea:	4650      	mov	r0, sl
 80087ec:	4659      	mov	r1, fp
 80087ee:	f7f7 ff0f 	bl	8000610 <__aeabi_dmul>
 80087f2:	a325      	add	r3, pc, #148	@ (adr r3, 8008888 <__kernel_sin+0x140>)
 80087f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f8:	f7f7 fd52 	bl	80002a0 <__aeabi_dsub>
 80087fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008800:	f7f7 ff06 	bl	8000610 <__aeabi_dmul>
 8008804:	4602      	mov	r2, r0
 8008806:	460b      	mov	r3, r1
 8008808:	4620      	mov	r0, r4
 800880a:	4629      	mov	r1, r5
 800880c:	f7f7 fd4a 	bl	80002a4 <__adddf3>
 8008810:	4604      	mov	r4, r0
 8008812:	460d      	mov	r5, r1
 8008814:	ec45 4b10 	vmov	d0, r4, r5
 8008818:	b005      	add	sp, #20
 800881a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800881e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008822:	4b1b      	ldr	r3, [pc, #108]	@ (8008890 <__kernel_sin+0x148>)
 8008824:	2200      	movs	r2, #0
 8008826:	f7f7 fef3 	bl	8000610 <__aeabi_dmul>
 800882a:	4632      	mov	r2, r6
 800882c:	4680      	mov	r8, r0
 800882e:	4689      	mov	r9, r1
 8008830:	463b      	mov	r3, r7
 8008832:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008836:	f7f7 feeb 	bl	8000610 <__aeabi_dmul>
 800883a:	4602      	mov	r2, r0
 800883c:	460b      	mov	r3, r1
 800883e:	4640      	mov	r0, r8
 8008840:	4649      	mov	r1, r9
 8008842:	f7f7 fd2d 	bl	80002a0 <__aeabi_dsub>
 8008846:	4652      	mov	r2, sl
 8008848:	465b      	mov	r3, fp
 800884a:	f7f7 fee1 	bl	8000610 <__aeabi_dmul>
 800884e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008852:	f7f7 fd25 	bl	80002a0 <__aeabi_dsub>
 8008856:	a30c      	add	r3, pc, #48	@ (adr r3, 8008888 <__kernel_sin+0x140>)
 8008858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800885c:	4606      	mov	r6, r0
 800885e:	460f      	mov	r7, r1
 8008860:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008864:	f7f7 fed4 	bl	8000610 <__aeabi_dmul>
 8008868:	4602      	mov	r2, r0
 800886a:	460b      	mov	r3, r1
 800886c:	4630      	mov	r0, r6
 800886e:	4639      	mov	r1, r7
 8008870:	f7f7 fd18 	bl	80002a4 <__adddf3>
 8008874:	4602      	mov	r2, r0
 8008876:	460b      	mov	r3, r1
 8008878:	4620      	mov	r0, r4
 800887a:	4629      	mov	r1, r5
 800887c:	f7f7 fd10 	bl	80002a0 <__aeabi_dsub>
 8008880:	e7c6      	b.n	8008810 <__kernel_sin+0xc8>
 8008882:	bf00      	nop
 8008884:	f3af 8000 	nop.w
 8008888:	55555549 	.word	0x55555549
 800888c:	3fc55555 	.word	0x3fc55555
 8008890:	3fe00000 	.word	0x3fe00000
 8008894:	5acfd57c 	.word	0x5acfd57c
 8008898:	3de5d93a 	.word	0x3de5d93a
 800889c:	8a2b9ceb 	.word	0x8a2b9ceb
 80088a0:	3e5ae5e6 	.word	0x3e5ae5e6
 80088a4:	57b1fe7d 	.word	0x57b1fe7d
 80088a8:	3ec71de3 	.word	0x3ec71de3
 80088ac:	19c161d5 	.word	0x19c161d5
 80088b0:	3f2a01a0 	.word	0x3f2a01a0
 80088b4:	1110f8a6 	.word	0x1110f8a6
 80088b8:	3f811111 	.word	0x3f811111
 80088bc:	00000000 	.word	0x00000000

080088c0 <__ieee754_rem_pio2>:
 80088c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088c4:	ec57 6b10 	vmov	r6, r7, d0
 80088c8:	4bc5      	ldr	r3, [pc, #788]	@ (8008be0 <__ieee754_rem_pio2+0x320>)
 80088ca:	b08d      	sub	sp, #52	@ 0x34
 80088cc:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80088d0:	4598      	cmp	r8, r3
 80088d2:	4604      	mov	r4, r0
 80088d4:	9704      	str	r7, [sp, #16]
 80088d6:	d807      	bhi.n	80088e8 <__ieee754_rem_pio2+0x28>
 80088d8:	2200      	movs	r2, #0
 80088da:	2300      	movs	r3, #0
 80088dc:	ed80 0b00 	vstr	d0, [r0]
 80088e0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80088e4:	2500      	movs	r5, #0
 80088e6:	e028      	b.n	800893a <__ieee754_rem_pio2+0x7a>
 80088e8:	4bbe      	ldr	r3, [pc, #760]	@ (8008be4 <__ieee754_rem_pio2+0x324>)
 80088ea:	4598      	cmp	r8, r3
 80088ec:	d878      	bhi.n	80089e0 <__ieee754_rem_pio2+0x120>
 80088ee:	9b04      	ldr	r3, [sp, #16]
 80088f0:	4dbd      	ldr	r5, [pc, #756]	@ (8008be8 <__ieee754_rem_pio2+0x328>)
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	4630      	mov	r0, r6
 80088f6:	a3ac      	add	r3, pc, #688	@ (adr r3, 8008ba8 <__ieee754_rem_pio2+0x2e8>)
 80088f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088fc:	4639      	mov	r1, r7
 80088fe:	dd38      	ble.n	8008972 <__ieee754_rem_pio2+0xb2>
 8008900:	f7f7 fcce 	bl	80002a0 <__aeabi_dsub>
 8008904:	45a8      	cmp	r8, r5
 8008906:	4606      	mov	r6, r0
 8008908:	460f      	mov	r7, r1
 800890a:	d01a      	beq.n	8008942 <__ieee754_rem_pio2+0x82>
 800890c:	a3a8      	add	r3, pc, #672	@ (adr r3, 8008bb0 <__ieee754_rem_pio2+0x2f0>)
 800890e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008912:	f7f7 fcc5 	bl	80002a0 <__aeabi_dsub>
 8008916:	4602      	mov	r2, r0
 8008918:	460b      	mov	r3, r1
 800891a:	4680      	mov	r8, r0
 800891c:	4689      	mov	r9, r1
 800891e:	4630      	mov	r0, r6
 8008920:	4639      	mov	r1, r7
 8008922:	f7f7 fcbd 	bl	80002a0 <__aeabi_dsub>
 8008926:	a3a2      	add	r3, pc, #648	@ (adr r3, 8008bb0 <__ieee754_rem_pio2+0x2f0>)
 8008928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800892c:	f7f7 fcb8 	bl	80002a0 <__aeabi_dsub>
 8008930:	e9c4 8900 	strd	r8, r9, [r4]
 8008934:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008938:	2501      	movs	r5, #1
 800893a:	4628      	mov	r0, r5
 800893c:	b00d      	add	sp, #52	@ 0x34
 800893e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008942:	a39d      	add	r3, pc, #628	@ (adr r3, 8008bb8 <__ieee754_rem_pio2+0x2f8>)
 8008944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008948:	f7f7 fcaa 	bl	80002a0 <__aeabi_dsub>
 800894c:	a39c      	add	r3, pc, #624	@ (adr r3, 8008bc0 <__ieee754_rem_pio2+0x300>)
 800894e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008952:	4606      	mov	r6, r0
 8008954:	460f      	mov	r7, r1
 8008956:	f7f7 fca3 	bl	80002a0 <__aeabi_dsub>
 800895a:	4602      	mov	r2, r0
 800895c:	460b      	mov	r3, r1
 800895e:	4680      	mov	r8, r0
 8008960:	4689      	mov	r9, r1
 8008962:	4630      	mov	r0, r6
 8008964:	4639      	mov	r1, r7
 8008966:	f7f7 fc9b 	bl	80002a0 <__aeabi_dsub>
 800896a:	a395      	add	r3, pc, #596	@ (adr r3, 8008bc0 <__ieee754_rem_pio2+0x300>)
 800896c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008970:	e7dc      	b.n	800892c <__ieee754_rem_pio2+0x6c>
 8008972:	f7f7 fc97 	bl	80002a4 <__adddf3>
 8008976:	45a8      	cmp	r8, r5
 8008978:	4606      	mov	r6, r0
 800897a:	460f      	mov	r7, r1
 800897c:	d018      	beq.n	80089b0 <__ieee754_rem_pio2+0xf0>
 800897e:	a38c      	add	r3, pc, #560	@ (adr r3, 8008bb0 <__ieee754_rem_pio2+0x2f0>)
 8008980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008984:	f7f7 fc8e 	bl	80002a4 <__adddf3>
 8008988:	4602      	mov	r2, r0
 800898a:	460b      	mov	r3, r1
 800898c:	4680      	mov	r8, r0
 800898e:	4689      	mov	r9, r1
 8008990:	4630      	mov	r0, r6
 8008992:	4639      	mov	r1, r7
 8008994:	f7f7 fc84 	bl	80002a0 <__aeabi_dsub>
 8008998:	a385      	add	r3, pc, #532	@ (adr r3, 8008bb0 <__ieee754_rem_pio2+0x2f0>)
 800899a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800899e:	f7f7 fc81 	bl	80002a4 <__adddf3>
 80089a2:	f04f 35ff 	mov.w	r5, #4294967295
 80089a6:	e9c4 8900 	strd	r8, r9, [r4]
 80089aa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80089ae:	e7c4      	b.n	800893a <__ieee754_rem_pio2+0x7a>
 80089b0:	a381      	add	r3, pc, #516	@ (adr r3, 8008bb8 <__ieee754_rem_pio2+0x2f8>)
 80089b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089b6:	f7f7 fc75 	bl	80002a4 <__adddf3>
 80089ba:	a381      	add	r3, pc, #516	@ (adr r3, 8008bc0 <__ieee754_rem_pio2+0x300>)
 80089bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089c0:	4606      	mov	r6, r0
 80089c2:	460f      	mov	r7, r1
 80089c4:	f7f7 fc6e 	bl	80002a4 <__adddf3>
 80089c8:	4602      	mov	r2, r0
 80089ca:	460b      	mov	r3, r1
 80089cc:	4680      	mov	r8, r0
 80089ce:	4689      	mov	r9, r1
 80089d0:	4630      	mov	r0, r6
 80089d2:	4639      	mov	r1, r7
 80089d4:	f7f7 fc64 	bl	80002a0 <__aeabi_dsub>
 80089d8:	a379      	add	r3, pc, #484	@ (adr r3, 8008bc0 <__ieee754_rem_pio2+0x300>)
 80089da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089de:	e7de      	b.n	800899e <__ieee754_rem_pio2+0xde>
 80089e0:	4b82      	ldr	r3, [pc, #520]	@ (8008bec <__ieee754_rem_pio2+0x32c>)
 80089e2:	4598      	cmp	r8, r3
 80089e4:	f200 80d1 	bhi.w	8008b8a <__ieee754_rem_pio2+0x2ca>
 80089e8:	f000 f966 	bl	8008cb8 <fabs>
 80089ec:	ec57 6b10 	vmov	r6, r7, d0
 80089f0:	a375      	add	r3, pc, #468	@ (adr r3, 8008bc8 <__ieee754_rem_pio2+0x308>)
 80089f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f6:	4630      	mov	r0, r6
 80089f8:	4639      	mov	r1, r7
 80089fa:	f7f7 fe09 	bl	8000610 <__aeabi_dmul>
 80089fe:	4b7c      	ldr	r3, [pc, #496]	@ (8008bf0 <__ieee754_rem_pio2+0x330>)
 8008a00:	2200      	movs	r2, #0
 8008a02:	f7f7 fc4f 	bl	80002a4 <__adddf3>
 8008a06:	f7f8 f89d 	bl	8000b44 <__aeabi_d2iz>
 8008a0a:	4605      	mov	r5, r0
 8008a0c:	f7f7 fd96 	bl	800053c <__aeabi_i2d>
 8008a10:	4602      	mov	r2, r0
 8008a12:	460b      	mov	r3, r1
 8008a14:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008a18:	a363      	add	r3, pc, #396	@ (adr r3, 8008ba8 <__ieee754_rem_pio2+0x2e8>)
 8008a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a1e:	f7f7 fdf7 	bl	8000610 <__aeabi_dmul>
 8008a22:	4602      	mov	r2, r0
 8008a24:	460b      	mov	r3, r1
 8008a26:	4630      	mov	r0, r6
 8008a28:	4639      	mov	r1, r7
 8008a2a:	f7f7 fc39 	bl	80002a0 <__aeabi_dsub>
 8008a2e:	a360      	add	r3, pc, #384	@ (adr r3, 8008bb0 <__ieee754_rem_pio2+0x2f0>)
 8008a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a34:	4682      	mov	sl, r0
 8008a36:	468b      	mov	fp, r1
 8008a38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a3c:	f7f7 fde8 	bl	8000610 <__aeabi_dmul>
 8008a40:	2d1f      	cmp	r5, #31
 8008a42:	4606      	mov	r6, r0
 8008a44:	460f      	mov	r7, r1
 8008a46:	dc0c      	bgt.n	8008a62 <__ieee754_rem_pio2+0x1a2>
 8008a48:	4b6a      	ldr	r3, [pc, #424]	@ (8008bf4 <__ieee754_rem_pio2+0x334>)
 8008a4a:	1e6a      	subs	r2, r5, #1
 8008a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a50:	4543      	cmp	r3, r8
 8008a52:	d006      	beq.n	8008a62 <__ieee754_rem_pio2+0x1a2>
 8008a54:	4632      	mov	r2, r6
 8008a56:	463b      	mov	r3, r7
 8008a58:	4650      	mov	r0, sl
 8008a5a:	4659      	mov	r1, fp
 8008a5c:	f7f7 fc20 	bl	80002a0 <__aeabi_dsub>
 8008a60:	e00e      	b.n	8008a80 <__ieee754_rem_pio2+0x1c0>
 8008a62:	463b      	mov	r3, r7
 8008a64:	4632      	mov	r2, r6
 8008a66:	4650      	mov	r0, sl
 8008a68:	4659      	mov	r1, fp
 8008a6a:	f7f7 fc19 	bl	80002a0 <__aeabi_dsub>
 8008a6e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008a72:	9305      	str	r3, [sp, #20]
 8008a74:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008a78:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8008a7c:	2b10      	cmp	r3, #16
 8008a7e:	dc02      	bgt.n	8008a86 <__ieee754_rem_pio2+0x1c6>
 8008a80:	e9c4 0100 	strd	r0, r1, [r4]
 8008a84:	e039      	b.n	8008afa <__ieee754_rem_pio2+0x23a>
 8008a86:	a34c      	add	r3, pc, #304	@ (adr r3, 8008bb8 <__ieee754_rem_pio2+0x2f8>)
 8008a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a90:	f7f7 fdbe 	bl	8000610 <__aeabi_dmul>
 8008a94:	4606      	mov	r6, r0
 8008a96:	460f      	mov	r7, r1
 8008a98:	4602      	mov	r2, r0
 8008a9a:	460b      	mov	r3, r1
 8008a9c:	4650      	mov	r0, sl
 8008a9e:	4659      	mov	r1, fp
 8008aa0:	f7f7 fbfe 	bl	80002a0 <__aeabi_dsub>
 8008aa4:	4602      	mov	r2, r0
 8008aa6:	460b      	mov	r3, r1
 8008aa8:	4680      	mov	r8, r0
 8008aaa:	4689      	mov	r9, r1
 8008aac:	4650      	mov	r0, sl
 8008aae:	4659      	mov	r1, fp
 8008ab0:	f7f7 fbf6 	bl	80002a0 <__aeabi_dsub>
 8008ab4:	4632      	mov	r2, r6
 8008ab6:	463b      	mov	r3, r7
 8008ab8:	f7f7 fbf2 	bl	80002a0 <__aeabi_dsub>
 8008abc:	a340      	add	r3, pc, #256	@ (adr r3, 8008bc0 <__ieee754_rem_pio2+0x300>)
 8008abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac2:	4606      	mov	r6, r0
 8008ac4:	460f      	mov	r7, r1
 8008ac6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008aca:	f7f7 fda1 	bl	8000610 <__aeabi_dmul>
 8008ace:	4632      	mov	r2, r6
 8008ad0:	463b      	mov	r3, r7
 8008ad2:	f7f7 fbe5 	bl	80002a0 <__aeabi_dsub>
 8008ad6:	4602      	mov	r2, r0
 8008ad8:	460b      	mov	r3, r1
 8008ada:	4606      	mov	r6, r0
 8008adc:	460f      	mov	r7, r1
 8008ade:	4640      	mov	r0, r8
 8008ae0:	4649      	mov	r1, r9
 8008ae2:	f7f7 fbdd 	bl	80002a0 <__aeabi_dsub>
 8008ae6:	9a05      	ldr	r2, [sp, #20]
 8008ae8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008aec:	1ad3      	subs	r3, r2, r3
 8008aee:	2b31      	cmp	r3, #49	@ 0x31
 8008af0:	dc20      	bgt.n	8008b34 <__ieee754_rem_pio2+0x274>
 8008af2:	e9c4 0100 	strd	r0, r1, [r4]
 8008af6:	46c2      	mov	sl, r8
 8008af8:	46cb      	mov	fp, r9
 8008afa:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008afe:	4650      	mov	r0, sl
 8008b00:	4642      	mov	r2, r8
 8008b02:	464b      	mov	r3, r9
 8008b04:	4659      	mov	r1, fp
 8008b06:	f7f7 fbcb 	bl	80002a0 <__aeabi_dsub>
 8008b0a:	463b      	mov	r3, r7
 8008b0c:	4632      	mov	r2, r6
 8008b0e:	f7f7 fbc7 	bl	80002a0 <__aeabi_dsub>
 8008b12:	9b04      	ldr	r3, [sp, #16]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008b1a:	f6bf af0e 	bge.w	800893a <__ieee754_rem_pio2+0x7a>
 8008b1e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8008b22:	6063      	str	r3, [r4, #4]
 8008b24:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008b28:	f8c4 8000 	str.w	r8, [r4]
 8008b2c:	60a0      	str	r0, [r4, #8]
 8008b2e:	60e3      	str	r3, [r4, #12]
 8008b30:	426d      	negs	r5, r5
 8008b32:	e702      	b.n	800893a <__ieee754_rem_pio2+0x7a>
 8008b34:	a326      	add	r3, pc, #152	@ (adr r3, 8008bd0 <__ieee754_rem_pio2+0x310>)
 8008b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b3e:	f7f7 fd67 	bl	8000610 <__aeabi_dmul>
 8008b42:	4606      	mov	r6, r0
 8008b44:	460f      	mov	r7, r1
 8008b46:	4602      	mov	r2, r0
 8008b48:	460b      	mov	r3, r1
 8008b4a:	4640      	mov	r0, r8
 8008b4c:	4649      	mov	r1, r9
 8008b4e:	f7f7 fba7 	bl	80002a0 <__aeabi_dsub>
 8008b52:	4602      	mov	r2, r0
 8008b54:	460b      	mov	r3, r1
 8008b56:	4682      	mov	sl, r0
 8008b58:	468b      	mov	fp, r1
 8008b5a:	4640      	mov	r0, r8
 8008b5c:	4649      	mov	r1, r9
 8008b5e:	f7f7 fb9f 	bl	80002a0 <__aeabi_dsub>
 8008b62:	4632      	mov	r2, r6
 8008b64:	463b      	mov	r3, r7
 8008b66:	f7f7 fb9b 	bl	80002a0 <__aeabi_dsub>
 8008b6a:	a31b      	add	r3, pc, #108	@ (adr r3, 8008bd8 <__ieee754_rem_pio2+0x318>)
 8008b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b70:	4606      	mov	r6, r0
 8008b72:	460f      	mov	r7, r1
 8008b74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b78:	f7f7 fd4a 	bl	8000610 <__aeabi_dmul>
 8008b7c:	4632      	mov	r2, r6
 8008b7e:	463b      	mov	r3, r7
 8008b80:	f7f7 fb8e 	bl	80002a0 <__aeabi_dsub>
 8008b84:	4606      	mov	r6, r0
 8008b86:	460f      	mov	r7, r1
 8008b88:	e764      	b.n	8008a54 <__ieee754_rem_pio2+0x194>
 8008b8a:	4b1b      	ldr	r3, [pc, #108]	@ (8008bf8 <__ieee754_rem_pio2+0x338>)
 8008b8c:	4598      	cmp	r8, r3
 8008b8e:	d935      	bls.n	8008bfc <__ieee754_rem_pio2+0x33c>
 8008b90:	4632      	mov	r2, r6
 8008b92:	463b      	mov	r3, r7
 8008b94:	4630      	mov	r0, r6
 8008b96:	4639      	mov	r1, r7
 8008b98:	f7f7 fb82 	bl	80002a0 <__aeabi_dsub>
 8008b9c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008ba0:	e9c4 0100 	strd	r0, r1, [r4]
 8008ba4:	e69e      	b.n	80088e4 <__ieee754_rem_pio2+0x24>
 8008ba6:	bf00      	nop
 8008ba8:	54400000 	.word	0x54400000
 8008bac:	3ff921fb 	.word	0x3ff921fb
 8008bb0:	1a626331 	.word	0x1a626331
 8008bb4:	3dd0b461 	.word	0x3dd0b461
 8008bb8:	1a600000 	.word	0x1a600000
 8008bbc:	3dd0b461 	.word	0x3dd0b461
 8008bc0:	2e037073 	.word	0x2e037073
 8008bc4:	3ba3198a 	.word	0x3ba3198a
 8008bc8:	6dc9c883 	.word	0x6dc9c883
 8008bcc:	3fe45f30 	.word	0x3fe45f30
 8008bd0:	2e000000 	.word	0x2e000000
 8008bd4:	3ba3198a 	.word	0x3ba3198a
 8008bd8:	252049c1 	.word	0x252049c1
 8008bdc:	397b839a 	.word	0x397b839a
 8008be0:	3fe921fb 	.word	0x3fe921fb
 8008be4:	4002d97b 	.word	0x4002d97b
 8008be8:	3ff921fb 	.word	0x3ff921fb
 8008bec:	413921fb 	.word	0x413921fb
 8008bf0:	3fe00000 	.word	0x3fe00000
 8008bf4:	0801d264 	.word	0x0801d264
 8008bf8:	7fefffff 	.word	0x7fefffff
 8008bfc:	ea4f 5528 	mov.w	r5, r8, asr #20
 8008c00:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8008c04:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8008c08:	4630      	mov	r0, r6
 8008c0a:	460f      	mov	r7, r1
 8008c0c:	f7f7 ff9a 	bl	8000b44 <__aeabi_d2iz>
 8008c10:	f7f7 fc94 	bl	800053c <__aeabi_i2d>
 8008c14:	4602      	mov	r2, r0
 8008c16:	460b      	mov	r3, r1
 8008c18:	4630      	mov	r0, r6
 8008c1a:	4639      	mov	r1, r7
 8008c1c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008c20:	f7f7 fb3e 	bl	80002a0 <__aeabi_dsub>
 8008c24:	4b22      	ldr	r3, [pc, #136]	@ (8008cb0 <__ieee754_rem_pio2+0x3f0>)
 8008c26:	2200      	movs	r2, #0
 8008c28:	f7f7 fcf2 	bl	8000610 <__aeabi_dmul>
 8008c2c:	460f      	mov	r7, r1
 8008c2e:	4606      	mov	r6, r0
 8008c30:	f7f7 ff88 	bl	8000b44 <__aeabi_d2iz>
 8008c34:	f7f7 fc82 	bl	800053c <__aeabi_i2d>
 8008c38:	4602      	mov	r2, r0
 8008c3a:	460b      	mov	r3, r1
 8008c3c:	4630      	mov	r0, r6
 8008c3e:	4639      	mov	r1, r7
 8008c40:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008c44:	f7f7 fb2c 	bl	80002a0 <__aeabi_dsub>
 8008c48:	4b19      	ldr	r3, [pc, #100]	@ (8008cb0 <__ieee754_rem_pio2+0x3f0>)
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	f7f7 fce0 	bl	8000610 <__aeabi_dmul>
 8008c50:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8008c54:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8008c58:	f04f 0803 	mov.w	r8, #3
 8008c5c:	2600      	movs	r6, #0
 8008c5e:	2700      	movs	r7, #0
 8008c60:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8008c64:	4632      	mov	r2, r6
 8008c66:	463b      	mov	r3, r7
 8008c68:	46c2      	mov	sl, r8
 8008c6a:	f108 38ff 	add.w	r8, r8, #4294967295
 8008c6e:	f7f7 ff37 	bl	8000ae0 <__aeabi_dcmpeq>
 8008c72:	2800      	cmp	r0, #0
 8008c74:	d1f4      	bne.n	8008c60 <__ieee754_rem_pio2+0x3a0>
 8008c76:	4b0f      	ldr	r3, [pc, #60]	@ (8008cb4 <__ieee754_rem_pio2+0x3f4>)
 8008c78:	9301      	str	r3, [sp, #4]
 8008c7a:	2302      	movs	r3, #2
 8008c7c:	9300      	str	r3, [sp, #0]
 8008c7e:	462a      	mov	r2, r5
 8008c80:	4653      	mov	r3, sl
 8008c82:	4621      	mov	r1, r4
 8008c84:	a806      	add	r0, sp, #24
 8008c86:	f000 f81f 	bl	8008cc8 <__kernel_rem_pio2>
 8008c8a:	9b04      	ldr	r3, [sp, #16]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	4605      	mov	r5, r0
 8008c90:	f6bf ae53 	bge.w	800893a <__ieee754_rem_pio2+0x7a>
 8008c94:	e9d4 2100 	ldrd	r2, r1, [r4]
 8008c98:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008c9c:	e9c4 2300 	strd	r2, r3, [r4]
 8008ca0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8008ca4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008ca8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8008cac:	e740      	b.n	8008b30 <__ieee754_rem_pio2+0x270>
 8008cae:	bf00      	nop
 8008cb0:	41700000 	.word	0x41700000
 8008cb4:	0801d2e4 	.word	0x0801d2e4

08008cb8 <fabs>:
 8008cb8:	ec51 0b10 	vmov	r0, r1, d0
 8008cbc:	4602      	mov	r2, r0
 8008cbe:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008cc2:	ec43 2b10 	vmov	d0, r2, r3
 8008cc6:	4770      	bx	lr

08008cc8 <__kernel_rem_pio2>:
 8008cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ccc:	ed2d 8b02 	vpush	{d8}
 8008cd0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8008cd4:	f112 0f14 	cmn.w	r2, #20
 8008cd8:	9306      	str	r3, [sp, #24]
 8008cda:	9104      	str	r1, [sp, #16]
 8008cdc:	4bbe      	ldr	r3, [pc, #760]	@ (8008fd8 <__kernel_rem_pio2+0x310>)
 8008cde:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8008ce0:	9008      	str	r0, [sp, #32]
 8008ce2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008ce6:	9300      	str	r3, [sp, #0]
 8008ce8:	9b06      	ldr	r3, [sp, #24]
 8008cea:	f103 33ff 	add.w	r3, r3, #4294967295
 8008cee:	bfa8      	it	ge
 8008cf0:	1ed4      	subge	r4, r2, #3
 8008cf2:	9305      	str	r3, [sp, #20]
 8008cf4:	bfb2      	itee	lt
 8008cf6:	2400      	movlt	r4, #0
 8008cf8:	2318      	movge	r3, #24
 8008cfa:	fb94 f4f3 	sdivge	r4, r4, r3
 8008cfe:	f06f 0317 	mvn.w	r3, #23
 8008d02:	fb04 3303 	mla	r3, r4, r3, r3
 8008d06:	eb03 0b02 	add.w	fp, r3, r2
 8008d0a:	9b00      	ldr	r3, [sp, #0]
 8008d0c:	9a05      	ldr	r2, [sp, #20]
 8008d0e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8008fc8 <__kernel_rem_pio2+0x300>
 8008d12:	eb03 0802 	add.w	r8, r3, r2
 8008d16:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8008d18:	1aa7      	subs	r7, r4, r2
 8008d1a:	ae20      	add	r6, sp, #128	@ 0x80
 8008d1c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008d20:	2500      	movs	r5, #0
 8008d22:	4545      	cmp	r5, r8
 8008d24:	dd13      	ble.n	8008d4e <__kernel_rem_pio2+0x86>
 8008d26:	9b06      	ldr	r3, [sp, #24]
 8008d28:	aa20      	add	r2, sp, #128	@ 0x80
 8008d2a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8008d2e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8008d32:	f04f 0800 	mov.w	r8, #0
 8008d36:	9b00      	ldr	r3, [sp, #0]
 8008d38:	4598      	cmp	r8, r3
 8008d3a:	dc31      	bgt.n	8008da0 <__kernel_rem_pio2+0xd8>
 8008d3c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8008fc8 <__kernel_rem_pio2+0x300>
 8008d40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008d44:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008d48:	462f      	mov	r7, r5
 8008d4a:	2600      	movs	r6, #0
 8008d4c:	e01b      	b.n	8008d86 <__kernel_rem_pio2+0xbe>
 8008d4e:	42ef      	cmn	r7, r5
 8008d50:	d407      	bmi.n	8008d62 <__kernel_rem_pio2+0x9a>
 8008d52:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008d56:	f7f7 fbf1 	bl	800053c <__aeabi_i2d>
 8008d5a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008d5e:	3501      	adds	r5, #1
 8008d60:	e7df      	b.n	8008d22 <__kernel_rem_pio2+0x5a>
 8008d62:	ec51 0b18 	vmov	r0, r1, d8
 8008d66:	e7f8      	b.n	8008d5a <__kernel_rem_pio2+0x92>
 8008d68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d6c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008d70:	f7f7 fc4e 	bl	8000610 <__aeabi_dmul>
 8008d74:	4602      	mov	r2, r0
 8008d76:	460b      	mov	r3, r1
 8008d78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d7c:	f7f7 fa92 	bl	80002a4 <__adddf3>
 8008d80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d84:	3601      	adds	r6, #1
 8008d86:	9b05      	ldr	r3, [sp, #20]
 8008d88:	429e      	cmp	r6, r3
 8008d8a:	f1a7 0708 	sub.w	r7, r7, #8
 8008d8e:	ddeb      	ble.n	8008d68 <__kernel_rem_pio2+0xa0>
 8008d90:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008d94:	f108 0801 	add.w	r8, r8, #1
 8008d98:	ecaa 7b02 	vstmia	sl!, {d7}
 8008d9c:	3508      	adds	r5, #8
 8008d9e:	e7ca      	b.n	8008d36 <__kernel_rem_pio2+0x6e>
 8008da0:	9b00      	ldr	r3, [sp, #0]
 8008da2:	f8dd 8000 	ldr.w	r8, [sp]
 8008da6:	aa0c      	add	r2, sp, #48	@ 0x30
 8008da8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008dac:	930a      	str	r3, [sp, #40]	@ 0x28
 8008dae:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8008db0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008db4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008db6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8008dba:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008dbc:	ab98      	add	r3, sp, #608	@ 0x260
 8008dbe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008dc2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8008dc6:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008dca:	ac0c      	add	r4, sp, #48	@ 0x30
 8008dcc:	ab70      	add	r3, sp, #448	@ 0x1c0
 8008dce:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8008dd2:	46a1      	mov	r9, r4
 8008dd4:	46c2      	mov	sl, r8
 8008dd6:	f1ba 0f00 	cmp.w	sl, #0
 8008dda:	f1a5 0508 	sub.w	r5, r5, #8
 8008dde:	dc77      	bgt.n	8008ed0 <__kernel_rem_pio2+0x208>
 8008de0:	4658      	mov	r0, fp
 8008de2:	ed9d 0b02 	vldr	d0, [sp, #8]
 8008de6:	f000 fac7 	bl	8009378 <scalbn>
 8008dea:	ec57 6b10 	vmov	r6, r7, d0
 8008dee:	2200      	movs	r2, #0
 8008df0:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8008df4:	4630      	mov	r0, r6
 8008df6:	4639      	mov	r1, r7
 8008df8:	f7f7 fc0a 	bl	8000610 <__aeabi_dmul>
 8008dfc:	ec41 0b10 	vmov	d0, r0, r1
 8008e00:	f000 fb3a 	bl	8009478 <floor>
 8008e04:	4b75      	ldr	r3, [pc, #468]	@ (8008fdc <__kernel_rem_pio2+0x314>)
 8008e06:	ec51 0b10 	vmov	r0, r1, d0
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	f7f7 fc00 	bl	8000610 <__aeabi_dmul>
 8008e10:	4602      	mov	r2, r0
 8008e12:	460b      	mov	r3, r1
 8008e14:	4630      	mov	r0, r6
 8008e16:	4639      	mov	r1, r7
 8008e18:	f7f7 fa42 	bl	80002a0 <__aeabi_dsub>
 8008e1c:	460f      	mov	r7, r1
 8008e1e:	4606      	mov	r6, r0
 8008e20:	f7f7 fe90 	bl	8000b44 <__aeabi_d2iz>
 8008e24:	9002      	str	r0, [sp, #8]
 8008e26:	f7f7 fb89 	bl	800053c <__aeabi_i2d>
 8008e2a:	4602      	mov	r2, r0
 8008e2c:	460b      	mov	r3, r1
 8008e2e:	4630      	mov	r0, r6
 8008e30:	4639      	mov	r1, r7
 8008e32:	f7f7 fa35 	bl	80002a0 <__aeabi_dsub>
 8008e36:	f1bb 0f00 	cmp.w	fp, #0
 8008e3a:	4606      	mov	r6, r0
 8008e3c:	460f      	mov	r7, r1
 8008e3e:	dd6c      	ble.n	8008f1a <__kernel_rem_pio2+0x252>
 8008e40:	f108 31ff 	add.w	r1, r8, #4294967295
 8008e44:	ab0c      	add	r3, sp, #48	@ 0x30
 8008e46:	9d02      	ldr	r5, [sp, #8]
 8008e48:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008e4c:	f1cb 0018 	rsb	r0, fp, #24
 8008e50:	fa43 f200 	asr.w	r2, r3, r0
 8008e54:	4415      	add	r5, r2
 8008e56:	4082      	lsls	r2, r0
 8008e58:	1a9b      	subs	r3, r3, r2
 8008e5a:	aa0c      	add	r2, sp, #48	@ 0x30
 8008e5c:	9502      	str	r5, [sp, #8]
 8008e5e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8008e62:	f1cb 0217 	rsb	r2, fp, #23
 8008e66:	fa43 f902 	asr.w	r9, r3, r2
 8008e6a:	f1b9 0f00 	cmp.w	r9, #0
 8008e6e:	dd64      	ble.n	8008f3a <__kernel_rem_pio2+0x272>
 8008e70:	9b02      	ldr	r3, [sp, #8]
 8008e72:	2200      	movs	r2, #0
 8008e74:	3301      	adds	r3, #1
 8008e76:	9302      	str	r3, [sp, #8]
 8008e78:	4615      	mov	r5, r2
 8008e7a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8008e7e:	4590      	cmp	r8, r2
 8008e80:	f300 80b8 	bgt.w	8008ff4 <__kernel_rem_pio2+0x32c>
 8008e84:	f1bb 0f00 	cmp.w	fp, #0
 8008e88:	dd07      	ble.n	8008e9a <__kernel_rem_pio2+0x1d2>
 8008e8a:	f1bb 0f01 	cmp.w	fp, #1
 8008e8e:	f000 80bf 	beq.w	8009010 <__kernel_rem_pio2+0x348>
 8008e92:	f1bb 0f02 	cmp.w	fp, #2
 8008e96:	f000 80c6 	beq.w	8009026 <__kernel_rem_pio2+0x35e>
 8008e9a:	f1b9 0f02 	cmp.w	r9, #2
 8008e9e:	d14c      	bne.n	8008f3a <__kernel_rem_pio2+0x272>
 8008ea0:	4632      	mov	r2, r6
 8008ea2:	463b      	mov	r3, r7
 8008ea4:	494e      	ldr	r1, [pc, #312]	@ (8008fe0 <__kernel_rem_pio2+0x318>)
 8008ea6:	2000      	movs	r0, #0
 8008ea8:	f7f7 f9fa 	bl	80002a0 <__aeabi_dsub>
 8008eac:	4606      	mov	r6, r0
 8008eae:	460f      	mov	r7, r1
 8008eb0:	2d00      	cmp	r5, #0
 8008eb2:	d042      	beq.n	8008f3a <__kernel_rem_pio2+0x272>
 8008eb4:	4658      	mov	r0, fp
 8008eb6:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8008fd0 <__kernel_rem_pio2+0x308>
 8008eba:	f000 fa5d 	bl	8009378 <scalbn>
 8008ebe:	4630      	mov	r0, r6
 8008ec0:	4639      	mov	r1, r7
 8008ec2:	ec53 2b10 	vmov	r2, r3, d0
 8008ec6:	f7f7 f9eb 	bl	80002a0 <__aeabi_dsub>
 8008eca:	4606      	mov	r6, r0
 8008ecc:	460f      	mov	r7, r1
 8008ece:	e034      	b.n	8008f3a <__kernel_rem_pio2+0x272>
 8008ed0:	4b44      	ldr	r3, [pc, #272]	@ (8008fe4 <__kernel_rem_pio2+0x31c>)
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ed8:	f7f7 fb9a 	bl	8000610 <__aeabi_dmul>
 8008edc:	f7f7 fe32 	bl	8000b44 <__aeabi_d2iz>
 8008ee0:	f7f7 fb2c 	bl	800053c <__aeabi_i2d>
 8008ee4:	4b40      	ldr	r3, [pc, #256]	@ (8008fe8 <__kernel_rem_pio2+0x320>)
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	4606      	mov	r6, r0
 8008eea:	460f      	mov	r7, r1
 8008eec:	f7f7 fb90 	bl	8000610 <__aeabi_dmul>
 8008ef0:	4602      	mov	r2, r0
 8008ef2:	460b      	mov	r3, r1
 8008ef4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ef8:	f7f7 f9d2 	bl	80002a0 <__aeabi_dsub>
 8008efc:	f7f7 fe22 	bl	8000b44 <__aeabi_d2iz>
 8008f00:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008f04:	f849 0b04 	str.w	r0, [r9], #4
 8008f08:	4639      	mov	r1, r7
 8008f0a:	4630      	mov	r0, r6
 8008f0c:	f7f7 f9ca 	bl	80002a4 <__adddf3>
 8008f10:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008f14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f18:	e75d      	b.n	8008dd6 <__kernel_rem_pio2+0x10e>
 8008f1a:	d107      	bne.n	8008f2c <__kernel_rem_pio2+0x264>
 8008f1c:	f108 33ff 	add.w	r3, r8, #4294967295
 8008f20:	aa0c      	add	r2, sp, #48	@ 0x30
 8008f22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f26:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8008f2a:	e79e      	b.n	8008e6a <__kernel_rem_pio2+0x1a2>
 8008f2c:	4b2f      	ldr	r3, [pc, #188]	@ (8008fec <__kernel_rem_pio2+0x324>)
 8008f2e:	2200      	movs	r2, #0
 8008f30:	f7f7 fdf4 	bl	8000b1c <__aeabi_dcmpge>
 8008f34:	2800      	cmp	r0, #0
 8008f36:	d143      	bne.n	8008fc0 <__kernel_rem_pio2+0x2f8>
 8008f38:	4681      	mov	r9, r0
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	4630      	mov	r0, r6
 8008f40:	4639      	mov	r1, r7
 8008f42:	f7f7 fdcd 	bl	8000ae0 <__aeabi_dcmpeq>
 8008f46:	2800      	cmp	r0, #0
 8008f48:	f000 80bf 	beq.w	80090ca <__kernel_rem_pio2+0x402>
 8008f4c:	f108 33ff 	add.w	r3, r8, #4294967295
 8008f50:	2200      	movs	r2, #0
 8008f52:	9900      	ldr	r1, [sp, #0]
 8008f54:	428b      	cmp	r3, r1
 8008f56:	da6e      	bge.n	8009036 <__kernel_rem_pio2+0x36e>
 8008f58:	2a00      	cmp	r2, #0
 8008f5a:	f000 8089 	beq.w	8009070 <__kernel_rem_pio2+0x3a8>
 8008f5e:	f108 38ff 	add.w	r8, r8, #4294967295
 8008f62:	ab0c      	add	r3, sp, #48	@ 0x30
 8008f64:	f1ab 0b18 	sub.w	fp, fp, #24
 8008f68:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d0f6      	beq.n	8008f5e <__kernel_rem_pio2+0x296>
 8008f70:	4658      	mov	r0, fp
 8008f72:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8008fd0 <__kernel_rem_pio2+0x308>
 8008f76:	f000 f9ff 	bl	8009378 <scalbn>
 8008f7a:	f108 0301 	add.w	r3, r8, #1
 8008f7e:	00da      	lsls	r2, r3, #3
 8008f80:	9205      	str	r2, [sp, #20]
 8008f82:	ec55 4b10 	vmov	r4, r5, d0
 8008f86:	aa70      	add	r2, sp, #448	@ 0x1c0
 8008f88:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8008fe4 <__kernel_rem_pio2+0x31c>
 8008f8c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8008f90:	4646      	mov	r6, r8
 8008f92:	f04f 0a00 	mov.w	sl, #0
 8008f96:	2e00      	cmp	r6, #0
 8008f98:	f280 80cf 	bge.w	800913a <__kernel_rem_pio2+0x472>
 8008f9c:	4644      	mov	r4, r8
 8008f9e:	2c00      	cmp	r4, #0
 8008fa0:	f2c0 80fd 	blt.w	800919e <__kernel_rem_pio2+0x4d6>
 8008fa4:	4b12      	ldr	r3, [pc, #72]	@ (8008ff0 <__kernel_rem_pio2+0x328>)
 8008fa6:	461f      	mov	r7, r3
 8008fa8:	ab70      	add	r3, sp, #448	@ 0x1c0
 8008faa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008fae:	9306      	str	r3, [sp, #24]
 8008fb0:	f04f 0a00 	mov.w	sl, #0
 8008fb4:	f04f 0b00 	mov.w	fp, #0
 8008fb8:	2600      	movs	r6, #0
 8008fba:	eba8 0504 	sub.w	r5, r8, r4
 8008fbe:	e0e2      	b.n	8009186 <__kernel_rem_pio2+0x4be>
 8008fc0:	f04f 0902 	mov.w	r9, #2
 8008fc4:	e754      	b.n	8008e70 <__kernel_rem_pio2+0x1a8>
 8008fc6:	bf00      	nop
	...
 8008fd4:	3ff00000 	.word	0x3ff00000
 8008fd8:	0801d430 	.word	0x0801d430
 8008fdc:	40200000 	.word	0x40200000
 8008fe0:	3ff00000 	.word	0x3ff00000
 8008fe4:	3e700000 	.word	0x3e700000
 8008fe8:	41700000 	.word	0x41700000
 8008fec:	3fe00000 	.word	0x3fe00000
 8008ff0:	0801d3f0 	.word	0x0801d3f0
 8008ff4:	f854 3b04 	ldr.w	r3, [r4], #4
 8008ff8:	b945      	cbnz	r5, 800900c <__kernel_rem_pio2+0x344>
 8008ffa:	b123      	cbz	r3, 8009006 <__kernel_rem_pio2+0x33e>
 8008ffc:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8009000:	f844 3c04 	str.w	r3, [r4, #-4]
 8009004:	2301      	movs	r3, #1
 8009006:	3201      	adds	r2, #1
 8009008:	461d      	mov	r5, r3
 800900a:	e738      	b.n	8008e7e <__kernel_rem_pio2+0x1b6>
 800900c:	1acb      	subs	r3, r1, r3
 800900e:	e7f7      	b.n	8009000 <__kernel_rem_pio2+0x338>
 8009010:	f108 32ff 	add.w	r2, r8, #4294967295
 8009014:	ab0c      	add	r3, sp, #48	@ 0x30
 8009016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800901a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800901e:	a90c      	add	r1, sp, #48	@ 0x30
 8009020:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009024:	e739      	b.n	8008e9a <__kernel_rem_pio2+0x1d2>
 8009026:	f108 32ff 	add.w	r2, r8, #4294967295
 800902a:	ab0c      	add	r3, sp, #48	@ 0x30
 800902c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009030:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009034:	e7f3      	b.n	800901e <__kernel_rem_pio2+0x356>
 8009036:	a90c      	add	r1, sp, #48	@ 0x30
 8009038:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800903c:	3b01      	subs	r3, #1
 800903e:	430a      	orrs	r2, r1
 8009040:	e787      	b.n	8008f52 <__kernel_rem_pio2+0x28a>
 8009042:	3401      	adds	r4, #1
 8009044:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009048:	2a00      	cmp	r2, #0
 800904a:	d0fa      	beq.n	8009042 <__kernel_rem_pio2+0x37a>
 800904c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800904e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009052:	eb0d 0503 	add.w	r5, sp, r3
 8009056:	9b06      	ldr	r3, [sp, #24]
 8009058:	aa20      	add	r2, sp, #128	@ 0x80
 800905a:	4443      	add	r3, r8
 800905c:	f108 0701 	add.w	r7, r8, #1
 8009060:	3d98      	subs	r5, #152	@ 0x98
 8009062:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8009066:	4444      	add	r4, r8
 8009068:	42bc      	cmp	r4, r7
 800906a:	da04      	bge.n	8009076 <__kernel_rem_pio2+0x3ae>
 800906c:	46a0      	mov	r8, r4
 800906e:	e6a2      	b.n	8008db6 <__kernel_rem_pio2+0xee>
 8009070:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009072:	2401      	movs	r4, #1
 8009074:	e7e6      	b.n	8009044 <__kernel_rem_pio2+0x37c>
 8009076:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009078:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800907c:	f7f7 fa5e 	bl	800053c <__aeabi_i2d>
 8009080:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8009348 <__kernel_rem_pio2+0x680>
 8009084:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009088:	ed8d 7b02 	vstr	d7, [sp, #8]
 800908c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009090:	46b2      	mov	sl, r6
 8009092:	f04f 0800 	mov.w	r8, #0
 8009096:	9b05      	ldr	r3, [sp, #20]
 8009098:	4598      	cmp	r8, r3
 800909a:	dd05      	ble.n	80090a8 <__kernel_rem_pio2+0x3e0>
 800909c:	ed9d 7b02 	vldr	d7, [sp, #8]
 80090a0:	3701      	adds	r7, #1
 80090a2:	eca5 7b02 	vstmia	r5!, {d7}
 80090a6:	e7df      	b.n	8009068 <__kernel_rem_pio2+0x3a0>
 80090a8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 80090ac:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80090b0:	f7f7 faae 	bl	8000610 <__aeabi_dmul>
 80090b4:	4602      	mov	r2, r0
 80090b6:	460b      	mov	r3, r1
 80090b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80090bc:	f7f7 f8f2 	bl	80002a4 <__adddf3>
 80090c0:	f108 0801 	add.w	r8, r8, #1
 80090c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80090c8:	e7e5      	b.n	8009096 <__kernel_rem_pio2+0x3ce>
 80090ca:	f1cb 0000 	rsb	r0, fp, #0
 80090ce:	ec47 6b10 	vmov	d0, r6, r7
 80090d2:	f000 f951 	bl	8009378 <scalbn>
 80090d6:	ec55 4b10 	vmov	r4, r5, d0
 80090da:	4b9d      	ldr	r3, [pc, #628]	@ (8009350 <__kernel_rem_pio2+0x688>)
 80090dc:	2200      	movs	r2, #0
 80090de:	4620      	mov	r0, r4
 80090e0:	4629      	mov	r1, r5
 80090e2:	f7f7 fd1b 	bl	8000b1c <__aeabi_dcmpge>
 80090e6:	b300      	cbz	r0, 800912a <__kernel_rem_pio2+0x462>
 80090e8:	4b9a      	ldr	r3, [pc, #616]	@ (8009354 <__kernel_rem_pio2+0x68c>)
 80090ea:	2200      	movs	r2, #0
 80090ec:	4620      	mov	r0, r4
 80090ee:	4629      	mov	r1, r5
 80090f0:	f7f7 fa8e 	bl	8000610 <__aeabi_dmul>
 80090f4:	f7f7 fd26 	bl	8000b44 <__aeabi_d2iz>
 80090f8:	4606      	mov	r6, r0
 80090fa:	f7f7 fa1f 	bl	800053c <__aeabi_i2d>
 80090fe:	4b94      	ldr	r3, [pc, #592]	@ (8009350 <__kernel_rem_pio2+0x688>)
 8009100:	2200      	movs	r2, #0
 8009102:	f7f7 fa85 	bl	8000610 <__aeabi_dmul>
 8009106:	460b      	mov	r3, r1
 8009108:	4602      	mov	r2, r0
 800910a:	4629      	mov	r1, r5
 800910c:	4620      	mov	r0, r4
 800910e:	f7f7 f8c7 	bl	80002a0 <__aeabi_dsub>
 8009112:	f7f7 fd17 	bl	8000b44 <__aeabi_d2iz>
 8009116:	ab0c      	add	r3, sp, #48	@ 0x30
 8009118:	f10b 0b18 	add.w	fp, fp, #24
 800911c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8009120:	f108 0801 	add.w	r8, r8, #1
 8009124:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8009128:	e722      	b.n	8008f70 <__kernel_rem_pio2+0x2a8>
 800912a:	4620      	mov	r0, r4
 800912c:	4629      	mov	r1, r5
 800912e:	f7f7 fd09 	bl	8000b44 <__aeabi_d2iz>
 8009132:	ab0c      	add	r3, sp, #48	@ 0x30
 8009134:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8009138:	e71a      	b.n	8008f70 <__kernel_rem_pio2+0x2a8>
 800913a:	ab0c      	add	r3, sp, #48	@ 0x30
 800913c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009140:	f7f7 f9fc 	bl	800053c <__aeabi_i2d>
 8009144:	4622      	mov	r2, r4
 8009146:	462b      	mov	r3, r5
 8009148:	f7f7 fa62 	bl	8000610 <__aeabi_dmul>
 800914c:	4652      	mov	r2, sl
 800914e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8009152:	465b      	mov	r3, fp
 8009154:	4620      	mov	r0, r4
 8009156:	4629      	mov	r1, r5
 8009158:	f7f7 fa5a 	bl	8000610 <__aeabi_dmul>
 800915c:	3e01      	subs	r6, #1
 800915e:	4604      	mov	r4, r0
 8009160:	460d      	mov	r5, r1
 8009162:	e718      	b.n	8008f96 <__kernel_rem_pio2+0x2ce>
 8009164:	9906      	ldr	r1, [sp, #24]
 8009166:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800916a:	9106      	str	r1, [sp, #24]
 800916c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8009170:	f7f7 fa4e 	bl	8000610 <__aeabi_dmul>
 8009174:	4602      	mov	r2, r0
 8009176:	460b      	mov	r3, r1
 8009178:	4650      	mov	r0, sl
 800917a:	4659      	mov	r1, fp
 800917c:	f7f7 f892 	bl	80002a4 <__adddf3>
 8009180:	3601      	adds	r6, #1
 8009182:	4682      	mov	sl, r0
 8009184:	468b      	mov	fp, r1
 8009186:	9b00      	ldr	r3, [sp, #0]
 8009188:	429e      	cmp	r6, r3
 800918a:	dc01      	bgt.n	8009190 <__kernel_rem_pio2+0x4c8>
 800918c:	42b5      	cmp	r5, r6
 800918e:	dae9      	bge.n	8009164 <__kernel_rem_pio2+0x49c>
 8009190:	ab48      	add	r3, sp, #288	@ 0x120
 8009192:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009196:	e9c5 ab00 	strd	sl, fp, [r5]
 800919a:	3c01      	subs	r4, #1
 800919c:	e6ff      	b.n	8008f9e <__kernel_rem_pio2+0x2d6>
 800919e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80091a0:	2b02      	cmp	r3, #2
 80091a2:	dc0b      	bgt.n	80091bc <__kernel_rem_pio2+0x4f4>
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	dc39      	bgt.n	800921c <__kernel_rem_pio2+0x554>
 80091a8:	d05d      	beq.n	8009266 <__kernel_rem_pio2+0x59e>
 80091aa:	9b02      	ldr	r3, [sp, #8]
 80091ac:	f003 0007 	and.w	r0, r3, #7
 80091b0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 80091b4:	ecbd 8b02 	vpop	{d8}
 80091b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091bc:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80091be:	2b03      	cmp	r3, #3
 80091c0:	d1f3      	bne.n	80091aa <__kernel_rem_pio2+0x4e2>
 80091c2:	9b05      	ldr	r3, [sp, #20]
 80091c4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80091c8:	eb0d 0403 	add.w	r4, sp, r3
 80091cc:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 80091d0:	4625      	mov	r5, r4
 80091d2:	46c2      	mov	sl, r8
 80091d4:	f1ba 0f00 	cmp.w	sl, #0
 80091d8:	f1a5 0508 	sub.w	r5, r5, #8
 80091dc:	dc6b      	bgt.n	80092b6 <__kernel_rem_pio2+0x5ee>
 80091de:	4645      	mov	r5, r8
 80091e0:	2d01      	cmp	r5, #1
 80091e2:	f1a4 0408 	sub.w	r4, r4, #8
 80091e6:	f300 8087 	bgt.w	80092f8 <__kernel_rem_pio2+0x630>
 80091ea:	9c05      	ldr	r4, [sp, #20]
 80091ec:	ab48      	add	r3, sp, #288	@ 0x120
 80091ee:	441c      	add	r4, r3
 80091f0:	2000      	movs	r0, #0
 80091f2:	2100      	movs	r1, #0
 80091f4:	f1b8 0f01 	cmp.w	r8, #1
 80091f8:	f300 809c 	bgt.w	8009334 <__kernel_rem_pio2+0x66c>
 80091fc:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8009200:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8009204:	f1b9 0f00 	cmp.w	r9, #0
 8009208:	f040 80a6 	bne.w	8009358 <__kernel_rem_pio2+0x690>
 800920c:	9b04      	ldr	r3, [sp, #16]
 800920e:	e9c3 7800 	strd	r7, r8, [r3]
 8009212:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8009216:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800921a:	e7c6      	b.n	80091aa <__kernel_rem_pio2+0x4e2>
 800921c:	9d05      	ldr	r5, [sp, #20]
 800921e:	ab48      	add	r3, sp, #288	@ 0x120
 8009220:	441d      	add	r5, r3
 8009222:	4644      	mov	r4, r8
 8009224:	2000      	movs	r0, #0
 8009226:	2100      	movs	r1, #0
 8009228:	2c00      	cmp	r4, #0
 800922a:	da35      	bge.n	8009298 <__kernel_rem_pio2+0x5d0>
 800922c:	f1b9 0f00 	cmp.w	r9, #0
 8009230:	d038      	beq.n	80092a4 <__kernel_rem_pio2+0x5dc>
 8009232:	4602      	mov	r2, r0
 8009234:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009238:	9c04      	ldr	r4, [sp, #16]
 800923a:	e9c4 2300 	strd	r2, r3, [r4]
 800923e:	4602      	mov	r2, r0
 8009240:	460b      	mov	r3, r1
 8009242:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8009246:	f7f7 f82b 	bl	80002a0 <__aeabi_dsub>
 800924a:	ad4a      	add	r5, sp, #296	@ 0x128
 800924c:	2401      	movs	r4, #1
 800924e:	45a0      	cmp	r8, r4
 8009250:	da2b      	bge.n	80092aa <__kernel_rem_pio2+0x5e2>
 8009252:	f1b9 0f00 	cmp.w	r9, #0
 8009256:	d002      	beq.n	800925e <__kernel_rem_pio2+0x596>
 8009258:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800925c:	4619      	mov	r1, r3
 800925e:	9b04      	ldr	r3, [sp, #16]
 8009260:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8009264:	e7a1      	b.n	80091aa <__kernel_rem_pio2+0x4e2>
 8009266:	9c05      	ldr	r4, [sp, #20]
 8009268:	ab48      	add	r3, sp, #288	@ 0x120
 800926a:	441c      	add	r4, r3
 800926c:	2000      	movs	r0, #0
 800926e:	2100      	movs	r1, #0
 8009270:	f1b8 0f00 	cmp.w	r8, #0
 8009274:	da09      	bge.n	800928a <__kernel_rem_pio2+0x5c2>
 8009276:	f1b9 0f00 	cmp.w	r9, #0
 800927a:	d002      	beq.n	8009282 <__kernel_rem_pio2+0x5ba>
 800927c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009280:	4619      	mov	r1, r3
 8009282:	9b04      	ldr	r3, [sp, #16]
 8009284:	e9c3 0100 	strd	r0, r1, [r3]
 8009288:	e78f      	b.n	80091aa <__kernel_rem_pio2+0x4e2>
 800928a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800928e:	f7f7 f809 	bl	80002a4 <__adddf3>
 8009292:	f108 38ff 	add.w	r8, r8, #4294967295
 8009296:	e7eb      	b.n	8009270 <__kernel_rem_pio2+0x5a8>
 8009298:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800929c:	f7f7 f802 	bl	80002a4 <__adddf3>
 80092a0:	3c01      	subs	r4, #1
 80092a2:	e7c1      	b.n	8009228 <__kernel_rem_pio2+0x560>
 80092a4:	4602      	mov	r2, r0
 80092a6:	460b      	mov	r3, r1
 80092a8:	e7c6      	b.n	8009238 <__kernel_rem_pio2+0x570>
 80092aa:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80092ae:	f7f6 fff9 	bl	80002a4 <__adddf3>
 80092b2:	3401      	adds	r4, #1
 80092b4:	e7cb      	b.n	800924e <__kernel_rem_pio2+0x586>
 80092b6:	ed95 7b00 	vldr	d7, [r5]
 80092ba:	ed8d 7b00 	vstr	d7, [sp]
 80092be:	ed95 7b02 	vldr	d7, [r5, #8]
 80092c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80092c6:	ec53 2b17 	vmov	r2, r3, d7
 80092ca:	ed8d 7b06 	vstr	d7, [sp, #24]
 80092ce:	f7f6 ffe9 	bl	80002a4 <__adddf3>
 80092d2:	4602      	mov	r2, r0
 80092d4:	460b      	mov	r3, r1
 80092d6:	4606      	mov	r6, r0
 80092d8:	460f      	mov	r7, r1
 80092da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80092de:	f7f6 ffdf 	bl	80002a0 <__aeabi_dsub>
 80092e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80092e6:	f7f6 ffdd 	bl	80002a4 <__adddf3>
 80092ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80092ee:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80092f2:	e9c5 6700 	strd	r6, r7, [r5]
 80092f6:	e76d      	b.n	80091d4 <__kernel_rem_pio2+0x50c>
 80092f8:	ed94 7b00 	vldr	d7, [r4]
 80092fc:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8009300:	ec51 0b17 	vmov	r0, r1, d7
 8009304:	4652      	mov	r2, sl
 8009306:	465b      	mov	r3, fp
 8009308:	ed8d 7b00 	vstr	d7, [sp]
 800930c:	f7f6 ffca 	bl	80002a4 <__adddf3>
 8009310:	4602      	mov	r2, r0
 8009312:	460b      	mov	r3, r1
 8009314:	4606      	mov	r6, r0
 8009316:	460f      	mov	r7, r1
 8009318:	e9dd 0100 	ldrd	r0, r1, [sp]
 800931c:	f7f6 ffc0 	bl	80002a0 <__aeabi_dsub>
 8009320:	4652      	mov	r2, sl
 8009322:	465b      	mov	r3, fp
 8009324:	f7f6 ffbe 	bl	80002a4 <__adddf3>
 8009328:	3d01      	subs	r5, #1
 800932a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800932e:	e9c4 6700 	strd	r6, r7, [r4]
 8009332:	e755      	b.n	80091e0 <__kernel_rem_pio2+0x518>
 8009334:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009338:	f7f6 ffb4 	bl	80002a4 <__adddf3>
 800933c:	f108 38ff 	add.w	r8, r8, #4294967295
 8009340:	e758      	b.n	80091f4 <__kernel_rem_pio2+0x52c>
 8009342:	bf00      	nop
 8009344:	f3af 8000 	nop.w
	...
 8009350:	41700000 	.word	0x41700000
 8009354:	3e700000 	.word	0x3e700000
 8009358:	9b04      	ldr	r3, [sp, #16]
 800935a:	9a04      	ldr	r2, [sp, #16]
 800935c:	601f      	str	r7, [r3, #0]
 800935e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8009362:	605c      	str	r4, [r3, #4]
 8009364:	609d      	str	r5, [r3, #8]
 8009366:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800936a:	60d3      	str	r3, [r2, #12]
 800936c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009370:	6110      	str	r0, [r2, #16]
 8009372:	6153      	str	r3, [r2, #20]
 8009374:	e719      	b.n	80091aa <__kernel_rem_pio2+0x4e2>
 8009376:	bf00      	nop

08009378 <scalbn>:
 8009378:	b570      	push	{r4, r5, r6, lr}
 800937a:	ec55 4b10 	vmov	r4, r5, d0
 800937e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8009382:	4606      	mov	r6, r0
 8009384:	462b      	mov	r3, r5
 8009386:	b991      	cbnz	r1, 80093ae <scalbn+0x36>
 8009388:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800938c:	4323      	orrs	r3, r4
 800938e:	d03d      	beq.n	800940c <scalbn+0x94>
 8009390:	4b35      	ldr	r3, [pc, #212]	@ (8009468 <scalbn+0xf0>)
 8009392:	4620      	mov	r0, r4
 8009394:	4629      	mov	r1, r5
 8009396:	2200      	movs	r2, #0
 8009398:	f7f7 f93a 	bl	8000610 <__aeabi_dmul>
 800939c:	4b33      	ldr	r3, [pc, #204]	@ (800946c <scalbn+0xf4>)
 800939e:	429e      	cmp	r6, r3
 80093a0:	4604      	mov	r4, r0
 80093a2:	460d      	mov	r5, r1
 80093a4:	da0f      	bge.n	80093c6 <scalbn+0x4e>
 80093a6:	a328      	add	r3, pc, #160	@ (adr r3, 8009448 <scalbn+0xd0>)
 80093a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ac:	e01e      	b.n	80093ec <scalbn+0x74>
 80093ae:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80093b2:	4291      	cmp	r1, r2
 80093b4:	d10b      	bne.n	80093ce <scalbn+0x56>
 80093b6:	4622      	mov	r2, r4
 80093b8:	4620      	mov	r0, r4
 80093ba:	4629      	mov	r1, r5
 80093bc:	f7f6 ff72 	bl	80002a4 <__adddf3>
 80093c0:	4604      	mov	r4, r0
 80093c2:	460d      	mov	r5, r1
 80093c4:	e022      	b.n	800940c <scalbn+0x94>
 80093c6:	460b      	mov	r3, r1
 80093c8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80093cc:	3936      	subs	r1, #54	@ 0x36
 80093ce:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80093d2:	4296      	cmp	r6, r2
 80093d4:	dd0d      	ble.n	80093f2 <scalbn+0x7a>
 80093d6:	2d00      	cmp	r5, #0
 80093d8:	a11d      	add	r1, pc, #116	@ (adr r1, 8009450 <scalbn+0xd8>)
 80093da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093de:	da02      	bge.n	80093e6 <scalbn+0x6e>
 80093e0:	a11d      	add	r1, pc, #116	@ (adr r1, 8009458 <scalbn+0xe0>)
 80093e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093e6:	a31a      	add	r3, pc, #104	@ (adr r3, 8009450 <scalbn+0xd8>)
 80093e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ec:	f7f7 f910 	bl	8000610 <__aeabi_dmul>
 80093f0:	e7e6      	b.n	80093c0 <scalbn+0x48>
 80093f2:	1872      	adds	r2, r6, r1
 80093f4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80093f8:	428a      	cmp	r2, r1
 80093fa:	dcec      	bgt.n	80093d6 <scalbn+0x5e>
 80093fc:	2a00      	cmp	r2, #0
 80093fe:	dd08      	ble.n	8009412 <scalbn+0x9a>
 8009400:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8009404:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8009408:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800940c:	ec45 4b10 	vmov	d0, r4, r5
 8009410:	bd70      	pop	{r4, r5, r6, pc}
 8009412:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8009416:	da08      	bge.n	800942a <scalbn+0xb2>
 8009418:	2d00      	cmp	r5, #0
 800941a:	a10b      	add	r1, pc, #44	@ (adr r1, 8009448 <scalbn+0xd0>)
 800941c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009420:	dac1      	bge.n	80093a6 <scalbn+0x2e>
 8009422:	a10f      	add	r1, pc, #60	@ (adr r1, 8009460 <scalbn+0xe8>)
 8009424:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009428:	e7bd      	b.n	80093a6 <scalbn+0x2e>
 800942a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800942e:	3236      	adds	r2, #54	@ 0x36
 8009430:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8009434:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009438:	4620      	mov	r0, r4
 800943a:	4b0d      	ldr	r3, [pc, #52]	@ (8009470 <scalbn+0xf8>)
 800943c:	4629      	mov	r1, r5
 800943e:	2200      	movs	r2, #0
 8009440:	e7d4      	b.n	80093ec <scalbn+0x74>
 8009442:	bf00      	nop
 8009444:	f3af 8000 	nop.w
 8009448:	c2f8f359 	.word	0xc2f8f359
 800944c:	01a56e1f 	.word	0x01a56e1f
 8009450:	8800759c 	.word	0x8800759c
 8009454:	7e37e43c 	.word	0x7e37e43c
 8009458:	8800759c 	.word	0x8800759c
 800945c:	fe37e43c 	.word	0xfe37e43c
 8009460:	c2f8f359 	.word	0xc2f8f359
 8009464:	81a56e1f 	.word	0x81a56e1f
 8009468:	43500000 	.word	0x43500000
 800946c:	ffff3cb0 	.word	0xffff3cb0
 8009470:	3c900000 	.word	0x3c900000
 8009474:	00000000 	.word	0x00000000

08009478 <floor>:
 8009478:	ec51 0b10 	vmov	r0, r1, d0
 800947c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009484:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8009488:	2e13      	cmp	r6, #19
 800948a:	460c      	mov	r4, r1
 800948c:	4605      	mov	r5, r0
 800948e:	4680      	mov	r8, r0
 8009490:	dc34      	bgt.n	80094fc <floor+0x84>
 8009492:	2e00      	cmp	r6, #0
 8009494:	da17      	bge.n	80094c6 <floor+0x4e>
 8009496:	a332      	add	r3, pc, #200	@ (adr r3, 8009560 <floor+0xe8>)
 8009498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800949c:	f7f6 ff02 	bl	80002a4 <__adddf3>
 80094a0:	2200      	movs	r2, #0
 80094a2:	2300      	movs	r3, #0
 80094a4:	f7f7 fb44 	bl	8000b30 <__aeabi_dcmpgt>
 80094a8:	b150      	cbz	r0, 80094c0 <floor+0x48>
 80094aa:	2c00      	cmp	r4, #0
 80094ac:	da55      	bge.n	800955a <floor+0xe2>
 80094ae:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80094b2:	432c      	orrs	r4, r5
 80094b4:	2500      	movs	r5, #0
 80094b6:	42ac      	cmp	r4, r5
 80094b8:	4c2b      	ldr	r4, [pc, #172]	@ (8009568 <floor+0xf0>)
 80094ba:	bf08      	it	eq
 80094bc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80094c0:	4621      	mov	r1, r4
 80094c2:	4628      	mov	r0, r5
 80094c4:	e023      	b.n	800950e <floor+0x96>
 80094c6:	4f29      	ldr	r7, [pc, #164]	@ (800956c <floor+0xf4>)
 80094c8:	4137      	asrs	r7, r6
 80094ca:	ea01 0307 	and.w	r3, r1, r7
 80094ce:	4303      	orrs	r3, r0
 80094d0:	d01d      	beq.n	800950e <floor+0x96>
 80094d2:	a323      	add	r3, pc, #140	@ (adr r3, 8009560 <floor+0xe8>)
 80094d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094d8:	f7f6 fee4 	bl	80002a4 <__adddf3>
 80094dc:	2200      	movs	r2, #0
 80094de:	2300      	movs	r3, #0
 80094e0:	f7f7 fb26 	bl	8000b30 <__aeabi_dcmpgt>
 80094e4:	2800      	cmp	r0, #0
 80094e6:	d0eb      	beq.n	80094c0 <floor+0x48>
 80094e8:	2c00      	cmp	r4, #0
 80094ea:	bfbe      	ittt	lt
 80094ec:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80094f0:	4133      	asrlt	r3, r6
 80094f2:	18e4      	addlt	r4, r4, r3
 80094f4:	ea24 0407 	bic.w	r4, r4, r7
 80094f8:	2500      	movs	r5, #0
 80094fa:	e7e1      	b.n	80094c0 <floor+0x48>
 80094fc:	2e33      	cmp	r6, #51	@ 0x33
 80094fe:	dd0a      	ble.n	8009516 <floor+0x9e>
 8009500:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8009504:	d103      	bne.n	800950e <floor+0x96>
 8009506:	4602      	mov	r2, r0
 8009508:	460b      	mov	r3, r1
 800950a:	f7f6 fecb 	bl	80002a4 <__adddf3>
 800950e:	ec41 0b10 	vmov	d0, r0, r1
 8009512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009516:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800951a:	f04f 37ff 	mov.w	r7, #4294967295
 800951e:	40df      	lsrs	r7, r3
 8009520:	4207      	tst	r7, r0
 8009522:	d0f4      	beq.n	800950e <floor+0x96>
 8009524:	a30e      	add	r3, pc, #56	@ (adr r3, 8009560 <floor+0xe8>)
 8009526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800952a:	f7f6 febb 	bl	80002a4 <__adddf3>
 800952e:	2200      	movs	r2, #0
 8009530:	2300      	movs	r3, #0
 8009532:	f7f7 fafd 	bl	8000b30 <__aeabi_dcmpgt>
 8009536:	2800      	cmp	r0, #0
 8009538:	d0c2      	beq.n	80094c0 <floor+0x48>
 800953a:	2c00      	cmp	r4, #0
 800953c:	da0a      	bge.n	8009554 <floor+0xdc>
 800953e:	2e14      	cmp	r6, #20
 8009540:	d101      	bne.n	8009546 <floor+0xce>
 8009542:	3401      	adds	r4, #1
 8009544:	e006      	b.n	8009554 <floor+0xdc>
 8009546:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800954a:	2301      	movs	r3, #1
 800954c:	40b3      	lsls	r3, r6
 800954e:	441d      	add	r5, r3
 8009550:	4545      	cmp	r5, r8
 8009552:	d3f6      	bcc.n	8009542 <floor+0xca>
 8009554:	ea25 0507 	bic.w	r5, r5, r7
 8009558:	e7b2      	b.n	80094c0 <floor+0x48>
 800955a:	2500      	movs	r5, #0
 800955c:	462c      	mov	r4, r5
 800955e:	e7af      	b.n	80094c0 <floor+0x48>
 8009560:	8800759c 	.word	0x8800759c
 8009564:	7e37e43c 	.word	0x7e37e43c
 8009568:	bff00000 	.word	0xbff00000
 800956c:	000fffff 	.word	0x000fffff

08009570 <_init>:
 8009570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009572:	bf00      	nop
 8009574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009576:	bc08      	pop	{r3}
 8009578:	469e      	mov	lr, r3
 800957a:	4770      	bx	lr

0800957c <_fini>:
 800957c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800957e:	bf00      	nop
 8009580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009582:	bc08      	pop	{r3}
 8009584:	469e      	mov	lr, r3
 8009586:	4770      	bx	lr
